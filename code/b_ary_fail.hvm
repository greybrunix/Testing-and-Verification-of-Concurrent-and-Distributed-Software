{
  "labels": {
    "__end__": 217
  },
  "modules": {
    "__main__": {
      "file": "b_ary_fail.hny",
      "lines": [
        "#critical reached?",
        "#invariant reached_crit in {0, 1} # safety",
        "#invariant   #forall (C1 C2: clients) , cs C1 /\\ cs C2 -> C1 = C2",
        "#invariant  (in_cs in { 0, 1 }) and (any [entering tid for tid in [0,1]] => one_entered [0,1])",
        "sequential turn, lockTaken, flags",
        "flags = [False, False]",
        "in_cs = 0",
        "invariant in_cs in {0,1}",
        "turn = 0",
        "lockTaken = False",
        "counter = 0",
        "def fail0 p_q:",
        "\twhile choose {False, True}:",
        "\t\t# non crit",
        "\t\t#entering crit",
        "\t\t#crit",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "",
        "\t\t#leave crit",
        "def fail1 p_q:",
        "\twhile choose {False, True}:",
        "\t\t# Enter cs",
        "\t\tawait not lockTaken",
        "\t\tlockTaken = True",
        "\t\t#cs",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "\t\t#leaving cs",
        "\t\tlockTaken = False",
        "def fail2 p_q:",
        "\twhile choose {False, True}:",
        "\t\t# enter critical",
        "\t\tturn = 1 - p_q",
        "\t\tawait turn == p_q",
        "\t\t# critical",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "\t\t# leaving critical",
        "\t\t# post protocol",
        "def fail4 p_q:",
        "\twhile choose {False, True}:",
        "\t\twhile not (turn == p_q):",
        "\t\t\tpass",
        "\t\t#cs",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "\t\t#counter += 1",
        "\t\tturn = 1 - p_q",
        "",
        "def fail3 p_q:",
        "\twhile choose {False, True}:",
        "\t\t#entering critical",
        "\t\tflags p_q = True",
        "\t\tawait not flags (1 - p_q)",
        "\t\t#crit",
        "\t\tatomically in_cs += 1",
        "\t\tprint(\"entrei\");",
        "\t\tprint(\"sai\");",
        "\t\tatomically in_cs -= 1",
        "\t\t#leaving",
        "\t\tflags p_q = False",
        "spawn fail0 0;",
        "spawn fail0 1;"
      ],
      "identifiers": {
        "p_q": "local-const",
        "this": "local-var",
        "fail0": "constant",
        "fail1": "constant",
        "fail2": "constant",
        "fail4": "constant",
        "fail3": "constant",
        "turn": "global",
        "lockTaken": "global",
        "flags": "global",
        "in_cs": "global",
        "counter": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "lockTaken" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "flags"}] },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Jump", "pc": "26" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "16" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "lockTaken"}] },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "counter"}] },
    { "op": "Jump", "pc": "205" },
    { "op": "Frame", "name": "fail0", "args": "p_q" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "56", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "35" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "205" },
    { "op": "Frame", "name": "fail1", "args": "p_q" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "89", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "lockTaken"}] },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "67", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "72" },
    { "op": "Jump", "pc": "67" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "lockTaken"}] },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "lockTaken"}] },
    { "op": "Jump", "pc": "59" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "205" },
    { "op": "Frame", "name": "fail2", "args": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "122", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "103", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "109" },
    { "op": "Jump", "pc": "103" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "92" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "205" },
    { "op": "Frame", "name": "fail4", "args": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "155", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "138", "cond": { "type": "bool", "value": "True" } },
    { "op": "Jump", "pc": "133" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Jump", "pc": "126" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "205" },
    { "op": "Frame", "name": "fail3", "args": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "203", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "171", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "181" },
    { "op": "Jump", "pc": "171" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "atom", "value": "entrei" } },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "atom", "value": "sai" } },
    { "op": "Print" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "159" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?lockTaken","push constant ?lockTaken"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?flags","push constant ?flags"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store flags","pop a value and store it in shared variable flags"],
    ["Push 0","push constant 0"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["Jump 26","jump over invariant definition: set program counter to 26"],
    ["Frame invariant()","start of method invariant"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 16","test invariant"],
    ["Push 0","push constant 0"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push False","push constant False"],
    ["Store lockTaken","pop a value and store it in shared variable lockTaken"],
    ["Push 0","push constant 0"],
    ["Store counter","pop a value and store it in shared variable counter"],
    ["Jump 205","jump over method definition: set program counter to 205"],
    ["Frame fail0(p_q)","start of method fail0"],
    ["DelVar p_q","delete method variable p_q"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 56","pop a value and jump to 56 if the value is False"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 35","set program counter to 35"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 205","jump over method definition: set program counter to 205"],
    ["Frame fail1(p_q)","start of method fail1"],
    ["DelVar p_q","delete method variable p_q"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 89","pop a value and jump to 89 if the value is False"],
    ["Load lockTaken","push value of shared variable lockTaken"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 67","pop a value and jump to 67 if the value is False"],
    ["Jump 72","set program counter to 72"],
    ["Jump 67","set program counter to 67"],
    ["Push True","push constant True"],
    ["Store lockTaken","pop a value and store it in shared variable lockTaken"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push False","push constant False"],
    ["Store lockTaken","pop a value and store it in shared variable lockTaken"],
    ["Jump 59","set program counter to 59"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 205","jump over method definition: set program counter to 205"],
    ["Frame fail2(p_q)","start of method fail2"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 122","pop a value and jump to 122 if the value is False"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 103","pop a value and jump to 103 if the value is False"],
    ["Jump 109","set program counter to 109"],
    ["Jump 103","set program counter to 103"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 92","set program counter to 92"],
    ["DelVar p_q","delete method variable p_q"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 205","jump over method definition: set program counter to 205"],
    ["Frame fail4(p_q)","start of method fail4"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 155","pop a value and jump to 155 if the value is False"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond True 138","pop a value and jump to 138 if the value is True"],
    ["Jump 133","set program counter to 133"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Jump 126","set program counter to 126"],
    ["DelVar p_q","delete method variable p_q"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 205","jump over method definition: set program counter to 205"],
    ["Frame fail3(p_q)","start of method fail3"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 203","pop a value and jump to 203 if the value is False"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 171","pop a value and jump to 171 if the value is False"],
    ["Jump 181","set program counter to 181"],
    ["Jump 171","set program counter to 171"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push \"entrei\"","push constant \"entrei\""],
    ["Print","pop a value and add to print history"],
    ["Push \"sai\"","push constant \"sai\""],
    ["Print","pop a value and add to print history"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 159","set program counter to 159"],
    ["DelVar p_q","delete method variable p_q"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push ?PC(34)","push constant ?PC(34)"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push ?PC(34)","push constant ?PC(34)"],
    ["Push 1","push constant 1"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 5, "column": 1, "endline": 65, "endcolumn": 7, "stmt": [5,1,65,7] },
    { "module": "__main__", "line": 5, "column": 12, "endline": 5, "endcolumn": 15, "stmt": [5,1,5,33] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 33, "stmt": [5,1,5,33] },
    { "module": "__main__", "line": 5, "column": 18, "endline": 5, "endcolumn": 26, "stmt": [5,1,5,33] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 33, "stmt": [5,1,5,33] },
    { "module": "__main__", "line": 5, "column": 29, "endline": 5, "endcolumn": 33, "stmt": [5,1,5,33] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 33, "stmt": [5,1,5,33] },
    { "module": "__main__", "line": 6, "column": 10, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,22] },
    { "module": "__main__", "line": 6, "column": 10, "endline": 6, "endcolumn": 14, "stmt": [6,1,6,22] },
    { "module": "__main__", "line": 6, "column": 10, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,22] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,22] },
    { "module": "__main__", "line": 6, "column": 10, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,22] },
    { "module": "__main__", "line": 6, "column": 1, "endline": 6, "endcolumn": 7, "stmt": [6,1,6,22] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 9, "stmt": [7,1,7,9] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 7, "stmt": [7,1,7,9] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 9, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 24, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 11, "endline": 8, "endcolumn": 15, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 21, "endline": 8, "endcolumn": 23, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 21, "endline": 8, "endcolumn": 21, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 21, "endline": 8, "endcolumn": 23, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 23, "endline": 8, "endcolumn": 23, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 21, "endline": 8, "endcolumn": 23, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 11, "endline": 8, "endcolumn": 24, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 24, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 24, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 24, "stmt": [8,1,8,24] },
    { "module": "__main__", "line": 9, "column": 8, "endline": 9, "endcolumn": 8, "stmt": [9,1,9,8] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 6, "stmt": [9,1,9,8] },
    { "module": "__main__", "line": 10, "column": 13, "endline": 10, "endcolumn": 17, "stmt": [10,1,10,17] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 11, "stmt": [10,1,10,17] },
    { "module": "__main__", "line": 11, "column": 11, "endline": 11, "endcolumn": 11, "stmt": [11,1,11,11] },
    { "module": "__main__", "line": 11, "column": 1, "endline": 11, "endcolumn": 9, "stmt": [11,1,11,11] },
    { "module": "__main__", "line": 12, "column": 1, "endline": 12, "endcolumn": 3, "stmt": [12,1,12,14] },
    { "module": "__main__", "line": 12, "column": 1, "endline": 12, "endcolumn": 14, "stmt": [12,1,12,14] },
    { "module": "__main__", "line": 13, "column": 16, "endline": 13, "endcolumn": 26, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 13, "column": 16, "endline": 13, "endcolumn": 26, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 13, "column": 16, "endline": 13, "endcolumn": 20, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 13, "column": 16, "endline": 13, "endcolumn": 26, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 13, "column": 23, "endline": 13, "endcolumn": 26, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 13, "column": 16, "endline": 13, "endcolumn": 26, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 13, "column": 8, "endline": 13, "endcolumn": 27, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 13, "column": 2, "endline": 13, "endcolumn": 6, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 23, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 21, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 18, "column": 14, "endline": 18, "endcolumn": 23, "stmt": [18,14,18,23] },
    { "module": "__main__", "line": 18, "column": 14, "endline": 18, "endcolumn": 23, "stmt": [18,14,18,23] },
    { "module": "__main__", "line": 18, "column": 23, "endline": 18, "endcolumn": 23, "stmt": [18,14,18,23] },
    { "module": "__main__", "line": 18, "column": 14, "endline": 18, "endcolumn": 23, "stmt": [18,14,18,23] },
    { "module": "__main__", "line": 18, "column": 14, "endline": 18, "endcolumn": 21, "stmt": [18,14,18,23] },
    { "module": "__main__", "line": 18, "column": 14, "endline": 18, "endcolumn": 23, "stmt": [18,14,18,23] },
    { "module": "__main__", "line": 13, "column": 2, "endline": 13, "endcolumn": 28, "stmt": [13,2,13,28] },
    { "module": "__main__", "line": 12, "column": 1, "endline": 12, "endcolumn": 14, "stmt": [12,1,12,14] },
    { "module": "__main__", "line": 21, "column": 1, "endline": 21, "endcolumn": 3, "stmt": [21,1,21,14] },
    { "module": "__main__", "line": 21, "column": 1, "endline": 21, "endcolumn": 14, "stmt": [21,1,21,14] },
    { "module": "__main__", "line": 22, "column": 16, "endline": 22, "endcolumn": 26, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 22, "column": 16, "endline": 22, "endcolumn": 26, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 22, "column": 16, "endline": 22, "endcolumn": 20, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 22, "column": 16, "endline": 22, "endcolumn": 26, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 22, "column": 23, "endline": 22, "endcolumn": 26, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 22, "column": 16, "endline": 22, "endcolumn": 26, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 22, "column": 8, "endline": 22, "endcolumn": 27, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 22, "column": 2, "endline": 22, "endcolumn": 6, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 24, "column": 13, "endline": 24, "endcolumn": 21, "stmt": [24,3,24,21] },
    { "module": "__main__", "line": 24, "column": 9, "endline": 24, "endcolumn": 21, "stmt": [24,3,24,21] },
    { "module": "__main__", "line": 24, "column": 3, "endline": 24, "endcolumn": 21, "stmt": [24,3,24,21] },
    { "module": "__main__", "line": 24, "column": 13, "endline": 24, "endcolumn": 21, "stmt": [24,3,24,21] },
    { "module": "__main__", "line": 24, "column": 13, "endline": 24, "endcolumn": 21, "stmt": [24,3,24,21] },
    { "module": "__main__", "line": 25, "column": 15, "endline": 25, "endcolumn": 18, "stmt": [25,3,25,18] },
    { "module": "__main__", "line": 25, "column": 3, "endline": 25, "endcolumn": 13, "stmt": [25,3,25,18] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 23, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 21, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 28, "column": 14, "endline": 28, "endcolumn": 23, "stmt": [28,14,28,23] },
    { "module": "__main__", "line": 28, "column": 14, "endline": 28, "endcolumn": 23, "stmt": [28,14,28,23] },
    { "module": "__main__", "line": 28, "column": 23, "endline": 28, "endcolumn": 23, "stmt": [28,14,28,23] },
    { "module": "__main__", "line": 28, "column": 14, "endline": 28, "endcolumn": 23, "stmt": [28,14,28,23] },
    { "module": "__main__", "line": 28, "column": 14, "endline": 28, "endcolumn": 21, "stmt": [28,14,28,23] },
    { "module": "__main__", "line": 28, "column": 14, "endline": 28, "endcolumn": 23, "stmt": [28,14,28,23] },
    { "module": "__main__", "line": 30, "column": 15, "endline": 30, "endcolumn": 19, "stmt": [30,3,30,19] },
    { "module": "__main__", "line": 30, "column": 3, "endline": 30, "endcolumn": 13, "stmt": [30,3,30,19] },
    { "module": "__main__", "line": 22, "column": 2, "endline": 22, "endcolumn": 28, "stmt": [22,2,22,28] },
    { "module": "__main__", "line": 21, "column": 1, "endline": 21, "endcolumn": 14, "stmt": [21,1,21,14] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 3, "stmt": [31,1,31,14] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 14, "stmt": [31,1,31,14] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 26, "stmt": [32,2,32,28] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 20, "stmt": [32,2,32,28] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 26, "stmt": [32,2,32,28] },
    { "module": "__main__", "line": 32, "column": 23, "endline": 32, "endcolumn": 26, "stmt": [32,2,32,28] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 26, "stmt": [32,2,32,28] },
    { "module": "__main__", "line": 32, "column": 8, "endline": 32, "endcolumn": 27, "stmt": [32,2,32,28] },
    { "module": "__main__", "line": 32, "column": 2, "endline": 32, "endcolumn": 6, "stmt": [32,2,32,28] },
    { "module": "__main__", "line": 34, "column": 10, "endline": 34, "endcolumn": 10, "stmt": [34,3,34,16] },
    { "module": "__main__", "line": 34, "column": 14, "endline": 34, "endcolumn": 16, "stmt": [34,3,34,16] },
    { "module": "__main__", "line": 34, "column": 10, "endline": 34, "endcolumn": 16, "stmt": [34,3,34,16] },
    { "module": "__main__", "line": 34, "column": 3, "endline": 34, "endcolumn": 8, "stmt": [34,3,34,16] },
    { "module": "__main__", "line": 35, "column": 9, "endline": 35, "endcolumn": 12, "stmt": [35,3,35,19] },
    { "module": "__main__", "line": 35, "column": 17, "endline": 35, "endcolumn": 19, "stmt": [35,3,35,19] },
    { "module": "__main__", "line": 35, "column": 9, "endline": 35, "endcolumn": 19, "stmt": [35,3,35,19] },
    { "module": "__main__", "line": 35, "column": 3, "endline": 35, "endcolumn": 19, "stmt": [35,3,35,19] },
    { "module": "__main__", "line": 35, "column": 17, "endline": 35, "endcolumn": 19, "stmt": [35,3,35,19] },
    { "module": "__main__", "line": 35, "column": 17, "endline": 35, "endcolumn": 19, "stmt": [35,3,35,19] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 23, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 21, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 38, "column": 14, "endline": 38, "endcolumn": 23, "stmt": [38,14,38,23] },
    { "module": "__main__", "line": 38, "column": 14, "endline": 38, "endcolumn": 23, "stmt": [38,14,38,23] },
    { "module": "__main__", "line": 38, "column": 23, "endline": 38, "endcolumn": 23, "stmt": [38,14,38,23] },
    { "module": "__main__", "line": 38, "column": 14, "endline": 38, "endcolumn": 23, "stmt": [38,14,38,23] },
    { "module": "__main__", "line": 38, "column": 14, "endline": 38, "endcolumn": 21, "stmt": [38,14,38,23] },
    { "module": "__main__", "line": 38, "column": 14, "endline": 38, "endcolumn": 23, "stmt": [38,14,38,23] },
    { "module": "__main__", "line": 32, "column": 2, "endline": 32, "endcolumn": 28, "stmt": [32,2,32,28] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 14, "stmt": [31,1,31,14] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 14, "stmt": [31,1,31,14] },
    { "module": "__main__", "line": 41, "column": 1, "endline": 41, "endcolumn": 3, "stmt": [41,1,41,14] },
    { "module": "__main__", "line": 41, "column": 1, "endline": 41, "endcolumn": 14, "stmt": [41,1,41,14] },
    { "module": "__main__", "line": 42, "column": 16, "endline": 42, "endcolumn": 26, "stmt": [42,2,42,28] },
    { "module": "__main__", "line": 42, "column": 16, "endline": 42, "endcolumn": 20, "stmt": [42,2,42,28] },
    { "module": "__main__", "line": 42, "column": 16, "endline": 42, "endcolumn": 26, "stmt": [42,2,42,28] },
    { "module": "__main__", "line": 42, "column": 23, "endline": 42, "endcolumn": 26, "stmt": [42,2,42,28] },
    { "module": "__main__", "line": 42, "column": 16, "endline": 42, "endcolumn": 26, "stmt": [42,2,42,28] },
    { "module": "__main__", "line": 42, "column": 8, "endline": 42, "endcolumn": 27, "stmt": [42,2,42,28] },
    { "module": "__main__", "line": 42, "column": 2, "endline": 42, "endcolumn": 6, "stmt": [42,2,42,28] },
    { "module": "__main__", "line": 43, "column": 14, "endline": 43, "endcolumn": 17, "stmt": [43,3,43,26] },
    { "module": "__main__", "line": 43, "column": 22, "endline": 43, "endcolumn": 24, "stmt": [43,3,43,26] },
    { "module": "__main__", "line": 43, "column": 14, "endline": 43, "endcolumn": 24, "stmt": [43,3,43,26] },
    { "module": "__main__", "line": 43, "column": 3, "endline": 43, "endcolumn": 7, "stmt": [43,3,43,26] },
    { "module": "__main__", "line": 43, "column": 3, "endline": 43, "endcolumn": 26, "stmt": [43,3,43,26] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 23, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 21, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 23, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 21, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 49, "column": 10, "endline": 49, "endcolumn": 10, "stmt": [49,3,49,16] },
    { "module": "__main__", "line": 49, "column": 14, "endline": 49, "endcolumn": 16, "stmt": [49,3,49,16] },
    { "module": "__main__", "line": 49, "column": 10, "endline": 49, "endcolumn": 16, "stmt": [49,3,49,16] },
    { "module": "__main__", "line": 49, "column": 3, "endline": 49, "endcolumn": 8, "stmt": [49,3,49,16] },
    { "module": "__main__", "line": 42, "column": 2, "endline": 42, "endcolumn": 28, "stmt": [42,2,42,28] },
    { "module": "__main__", "line": 41, "column": 1, "endline": 41, "endcolumn": 14, "stmt": [41,1,41,14] },
    { "module": "__main__", "line": 41, "column": 1, "endline": 41, "endcolumn": 14, "stmt": [41,1,41,14] },
    { "module": "__main__", "line": 51, "column": 1, "endline": 51, "endcolumn": 3, "stmt": [51,1,51,14] },
    { "module": "__main__", "line": 51, "column": 1, "endline": 51, "endcolumn": 14, "stmt": [51,1,51,14] },
    { "module": "__main__", "line": 52, "column": 16, "endline": 52, "endcolumn": 26, "stmt": [52,2,52,28] },
    { "module": "__main__", "line": 52, "column": 16, "endline": 52, "endcolumn": 20, "stmt": [52,2,52,28] },
    { "module": "__main__", "line": 52, "column": 16, "endline": 52, "endcolumn": 26, "stmt": [52,2,52,28] },
    { "module": "__main__", "line": 52, "column": 23, "endline": 52, "endcolumn": 26, "stmt": [52,2,52,28] },
    { "module": "__main__", "line": 52, "column": 16, "endline": 52, "endcolumn": 26, "stmt": [52,2,52,28] },
    { "module": "__main__", "line": 52, "column": 8, "endline": 52, "endcolumn": 27, "stmt": [52,2,52,28] },
    { "module": "__main__", "line": 52, "column": 2, "endline": 52, "endcolumn": 6, "stmt": [52,2,52,28] },
    { "module": "__main__", "line": 54, "column": 3, "endline": 54, "endcolumn": 7, "stmt": [54,3,54,18] },
    { "module": "__main__", "line": 54, "column": 9, "endline": 54, "endcolumn": 11, "stmt": [54,3,54,18] },
    { "module": "__main__", "line": 54, "column": 3, "endline": 54, "endcolumn": 11, "stmt": [54,3,54,18] },
    { "module": "__main__", "line": 54, "column": 15, "endline": 54, "endcolumn": 18, "stmt": [54,3,54,18] },
    { "module": "__main__", "line": 54, "column": 3, "endline": 54, "endcolumn": 13, "stmt": [54,3,54,18] },
    { "module": "__main__", "line": 55, "column": 13, "endline": 55, "endcolumn": 27, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 20, "endline": 55, "endcolumn": 20, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 24, "endline": 55, "endcolumn": 26, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 13, "endline": 55, "endcolumn": 27, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 13, "endline": 55, "endcolumn": 27, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 9, "endline": 55, "endcolumn": 27, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 3, "endline": 55, "endcolumn": 27, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 27, "endline": 55, "endcolumn": 27, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 55, "column": 27, "endline": 55, "endcolumn": 27, "stmt": [55,3,55,27] },
    { "module": "__main__", "line": 57, "column": 14, "endline": 57, "endcolumn": 23, "stmt": [57,14,57,23] },
    { "module": "__main__", "line": 57, "column": 14, "endline": 57, "endcolumn": 23, "stmt": [57,14,57,23] },
    { "module": "__main__", "line": 57, "column": 23, "endline": 57, "endcolumn": 23, "stmt": [57,14,57,23] },
    { "module": "__main__", "line": 57, "column": 14, "endline": 57, "endcolumn": 23, "stmt": [57,14,57,23] },
    { "module": "__main__", "line": 57, "column": 14, "endline": 57, "endcolumn": 21, "stmt": [57,14,57,23] },
    { "module": "__main__", "line": 57, "column": 14, "endline": 57, "endcolumn": 23, "stmt": [57,14,57,23] },
    { "module": "__main__", "line": 58, "column": 9, "endline": 58, "endcolumn": 16, "stmt": [58,3,58,17] },
    { "module": "__main__", "line": 58, "column": 3, "endline": 58, "endcolumn": 17, "stmt": [58,3,58,17] },
    { "module": "__main__", "line": 59, "column": 9, "endline": 59, "endcolumn": 13, "stmt": [59,3,59,14] },
    { "module": "__main__", "line": 59, "column": 3, "endline": 59, "endcolumn": 14, "stmt": [59,3,59,14] },
    { "module": "__main__", "line": 60, "column": 14, "endline": 60, "endcolumn": 23, "stmt": [60,14,60,23] },
    { "module": "__main__", "line": 60, "column": 14, "endline": 60, "endcolumn": 23, "stmt": [60,14,60,23] },
    { "module": "__main__", "line": 60, "column": 23, "endline": 60, "endcolumn": 23, "stmt": [60,14,60,23] },
    { "module": "__main__", "line": 60, "column": 14, "endline": 60, "endcolumn": 23, "stmt": [60,14,60,23] },
    { "module": "__main__", "line": 60, "column": 14, "endline": 60, "endcolumn": 21, "stmt": [60,14,60,23] },
    { "module": "__main__", "line": 60, "column": 14, "endline": 60, "endcolumn": 23, "stmt": [60,14,60,23] },
    { "module": "__main__", "line": 62, "column": 3, "endline": 62, "endcolumn": 7, "stmt": [62,3,62,19] },
    { "module": "__main__", "line": 62, "column": 9, "endline": 62, "endcolumn": 11, "stmt": [62,3,62,19] },
    { "module": "__main__", "line": 62, "column": 3, "endline": 62, "endcolumn": 11, "stmt": [62,3,62,19] },
    { "module": "__main__", "line": 62, "column": 15, "endline": 62, "endcolumn": 19, "stmt": [62,3,62,19] },
    { "module": "__main__", "line": 62, "column": 3, "endline": 62, "endcolumn": 13, "stmt": [62,3,62,19] },
    { "module": "__main__", "line": 52, "column": 2, "endline": 52, "endcolumn": 28, "stmt": [52,2,52,28] },
    { "module": "__main__", "line": 51, "column": 1, "endline": 51, "endcolumn": 14, "stmt": [51,1,51,14] },
    { "module": "__main__", "line": 51, "column": 1, "endline": 51, "endcolumn": 14, "stmt": [51,1,51,14] },
    { "module": "__main__", "line": 63, "column": 7, "endline": 63, "endcolumn": 11, "stmt": [63,1,63,13] },
    { "module": "__main__", "line": 63, "column": 13, "endline": 63, "endcolumn": 13, "stmt": [63,1,63,13] },
    { "module": "__main__", "line": 63, "column": 7, "endline": 63, "endcolumn": 13, "stmt": [63,1,63,13] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 13, "stmt": [63,1,63,13] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 13, "stmt": [63,1,63,13] },
    { "module": "__main__", "line": 64, "column": 7, "endline": 64, "endcolumn": 11, "stmt": [64,1,64,13] },
    { "module": "__main__", "line": 64, "column": 13, "endline": 64, "endcolumn": 13, "stmt": [64,1,64,13] },
    { "module": "__main__", "line": 64, "column": 7, "endline": 64, "endcolumn": 13, "stmt": [64,1,64,13] },
    { "module": "__main__", "line": 64, "column": 1, "endline": 64, "endcolumn": 13, "stmt": [64,1,64,13] },
    { "module": "__main__", "line": 64, "column": 1, "endline": 64, "endcolumn": 13, "stmt": [64,1,64,13] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 65, "endcolumn": 7, "stmt": [5,1,65,7] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 65, "endcolumn": 7, "stmt": [5,1,65,7] }
  ]
}
