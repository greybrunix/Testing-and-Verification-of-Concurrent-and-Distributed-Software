<html>
<head>
  <meta charset='UTF-8'></meta>
  <style>
#table-wrapper {
  position:relative;
}
#table-scroll {
  height:200px;
  overflow:auto;  
}
#table-wrapper table {
  width:100%;
}
#table-wrapper table * {
  color:black;
}
#table-wrapper table thead th .text {
  position:absolute;   
  top:-20px;
  z-index:2;
  height:20px;
  width:35%;
  border:1px solid red;
}
table {
    border-collapse: collapse;
    border-style: hidden;
}
table td, table th {
    border: 1px solid black;
}

  </style>
</head>
<body>
<table>
  <tr>
    <td colspan='2'>
<table border='1'>
  <thead>
    <tr>
      <th colspan='4' style='color:red;'>
        Issue: Safety violation
      </th>
      <th align='center' colspan='5'>
        Shared Variables
      </th>
      <th align='center' colspan='5'>
        Output
      </th>
    </tr>
    <tr>
      <th align='center' rowspan='1'>
        Turn
      </th>
      <th align='center' rowspan='1'>
        Thread
      </th>
      <th align='center' rowspan='1'>
        Instructions Executed
      </th>
      <th align='center' rowspan='1'>
        &nbsp;PC&nbsp;
      </th>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>counter</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>flags</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>in_cs</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>lockTaken</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>turn</td>
</tr><tr>
    </tr>
  </thead>
  <tbody id='mestable'>
<tr id='mes0'>
  <td align='right'>
    1&nbsp;
  </td>
  <td>
    T0: __init__()  </td>
  <td>
    <table border='0' style='max-width:400px; word-wrap: break-word;'>
      <tr><td><canvas id='timeline0' width='400px' height='10px'>
      </canvas></td></tr>
      <tr><td id='nextstep0'></td></tr>
    </table>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log0' border='1'>
    </table>
  </td>
</tr>
<tr id='mes1'>
  <td align='right'>
    2&nbsp;
  </td>
  <td>
    T2: fail0(1)  </td>
  <td>
    <table border='0' style='max-width:400px; word-wrap: break-word;'>
      <tr><td><canvas id='timeline1' width='400px' height='10px'>
      </canvas></td></tr>
      <tr><td id='nextstep1'></td></tr>
    </table>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log1' border='1'>
    </table>
  </td>
</tr>
<tr id='mes2'>
  <td align='right'>
    3&nbsp;
  </td>
  <td>
    T1: fail0(0)  </td>
  <td>
    <table border='0' style='max-width:400px; word-wrap: break-word;'>
      <tr><td><canvas id='timeline2' width='400px' height='10px'>
      </canvas></td></tr>
      <tr><td id='nextstep2'></td></tr>
    </table>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log2' border='1'>
    </table>
  </td>
</tr>
<tr id='mes3'>
  <td align='right'>
    4&nbsp;
  </td>
  <td>
    T3: invariant()  </td>
  <td>
    <table border='0' style='max-width:400px; word-wrap: break-word;'>
      <tr><td><canvas id='timeline3' width='400px' height='10px'>
      </canvas></td></tr>
      <tr><td id='nextstep3'></td></tr>
    </table>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log3' border='1'>
    </table>
  </td>
</tr>
  </tbody>
</table>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:blue;'>
        <div id='coderow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td valign='top'>
<div id='table-wrapper'>
  <div id='table-scroll'>
    <table border='1'>
      <tbody>
        <tr id='P0'>
          <td align='right'>
            <a name='P0'>0</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method __init__' id='C0'>
              Frame __init__()
            </span>
          </td>
        </tr>
        <tr id='P1'>
          <td align='right'>
            <a name='P1'>1</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?turn' id='C1'>
              Push ?turn
            </span>
          </td>
        </tr>
        <tr id='P2'>
          <td align='right'>
            <a name='P2'>2</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='sequential consistency for variable on top of stack' id='C2'>
              Sequential
            </span>
          </td>
        </tr>
        <tr id='P3'>
          <td align='right'>
            <a name='P3'>3</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?lockTaken' id='C3'>
              Push ?lockTaken
            </span>
          </td>
        </tr>
        <tr id='P4'>
          <td align='right'>
            <a name='P4'>4</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='sequential consistency for variable on top of stack' id='C4'>
              Sequential
            </span>
          </td>
        </tr>
        <tr id='P5'>
          <td align='right'>
            <a name='P5'>5</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?flags' id='C5'>
              Push ?flags
            </span>
          </td>
        </tr>
        <tr id='P6'>
          <td align='right'>
            <a name='P6'>6</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='sequential consistency for variable on top of stack' id='C6'>
              Sequential
            </span>
          </td>
        </tr>
        <tr id='P7'>
          <td align='right'>
            <a name='P7'>7</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C7'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P8'>
          <td align='right'>
            <a name='P8'>8</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C8'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P9'>
          <td align='right'>
            <a name='P9'>9</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C9'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P10'>
          <td align='right'>
            <a name='P10'>10</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C10'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P11'>
          <td align='right'>
            <a name='P11'>11</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C11'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P12'>
          <td align='right'>
            <a name='P12'>12</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable flags' id='C12'>
              Store flags
            </span>
          </td>
        </tr>
        <tr id='P13'>
          <td align='right'>
            <a name='P13'>13</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C13'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P14'>
          <td align='right'>
            <a name='P14'>14</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable in_cs' id='C14'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P15'>
          <td align='right'>
            <a name='P15'>15</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over invariant definition: set program counter to 26' id='C15'>
              Jump 26
            </span>
          </td>
        </tr>
        <tr id='P16'>
          <td align='right'>
            <a name='P16'>16</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method invariant' id='C16'>
              Frame invariant()
            </span>
          </td>
        </tr>
        <tr id='P17'>
          <td align='right'>
            <a name='P17'>17</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable in_cs' id='C17'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P18'>
          <td align='right'>
            <a name='P18'>18</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C18'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P19'>
          <td align='right'>
            <a name='P19'>19</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C19'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P20'>
          <td align='right'>
            <a name='P20'>20</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C20'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P21'>
          <td align='right'>
            <a name='P21'>21</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C21'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P22'>
          <td align='right'>
            <a name='P22'>22</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C22'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P23'>
          <td align='right'>
            <a name='P23'>23</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying in' id='C23'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P24'>
          <td align='right'>
            <a name='P24'>24</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C24'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P25'>
          <td align='right'>
            <a name='P25'>25</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C25'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P26'>
          <td align='right'>
            <a name='P26'>26</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='test invariant' id='C26'>
              Invariant 16
            </span>
          </td>
        </tr>
        <tr id='P27'>
          <td align='right'>
            <a name='P27'>27</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C27'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P28'>
          <td align='right'>
            <a name='P28'>28</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable turn' id='C28'>
              Store turn
            </span>
          </td>
        </tr>
        <tr id='P29'>
          <td align='right'>
            <a name='P29'>29</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C29'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P30'>
          <td align='right'>
            <a name='P30'>30</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable lockTaken' id='C30'>
              Store lockTaken
            </span>
          </td>
        </tr>
        <tr id='P31'>
          <td align='right'>
            <a name='P31'>31</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C31'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P32'>
          <td align='right'>
            <a name='P32'>32</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable counter' id='C32'>
              Store counter
            </span>
          </td>
        </tr>
        <tr id='P33'>
          <td align='right'>
            <a name='P33'>33</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 205' id='C33'>
              Jump 205
            </span>
          </td>
        </tr>
        <tr id='P34'>
          <td align='right'>
            <a name='P34'>34</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method fail0' id='C34'>
              Frame fail0(p_q)
            </span>
          </td>
        </tr>
        <tr id='P35'>
          <td align='right'>
            <a name='P35'>35</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p_q' id='C35'>
              DelVar p_q
            </span>
          </td>
        </tr>
        <tr id='P36'>
          <td align='right'>
            <a name='P36'>36</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C36'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P37'>
          <td align='right'>
            <a name='P37'>37</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C37'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P38'>
          <td align='right'>
            <a name='P38'>38</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C38'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P39'>
          <td align='right'>
            <a name='P39'>39</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C39'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P40'>
          <td align='right'>
            <a name='P40'>40</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C40'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P41'>
          <td align='right'>
            <a name='P41'>41</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C41'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P42'>
          <td align='right'>
            <a name='P42'>42</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 56 if the value is False' id='C42'>
              JumpCond False 56
            </span>
          </td>
        </tr>
        <tr id='P43'>
          <td align='right'>
            <a name='P43'>43</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C43'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P44'>
          <td align='right'>
            <a name='P44'>44</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable in_cs' id='C44'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P45'>
          <td align='right'>
            <a name='P45'>45</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C45'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P46'>
          <td align='right'>
            <a name='P46'>46</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C46'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P47'>
          <td align='right'>
            <a name='P47'>47</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable in_cs' id='C47'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P48'>
          <td align='right'>
            <a name='P48'>48</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C48'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P49'>
          <td align='right'>
            <a name='P49'>49</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C49'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P50'>
          <td align='right'>
            <a name='P50'>50</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable in_cs' id='C50'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P51'>
          <td align='right'>
            <a name='P51'>51</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C51'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P52'>
          <td align='right'>
            <a name='P52'>52</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C52'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P53'>
          <td align='right'>
            <a name='P53'>53</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable in_cs' id='C53'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P54'>
          <td align='right'>
            <a name='P54'>54</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C54'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P55'>
          <td align='right'>
            <a name='P55'>55</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 35' id='C55'>
              Jump 35
            </span>
          </td>
        </tr>
        <tr id='P56'>
          <td align='right'>
            <a name='P56'>56</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C56'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P57'>
          <td align='right'>
            <a name='P57'>57</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 205' id='C57'>
              Jump 205
            </span>
          </td>
        </tr>
        <tr id='P58'>
          <td align='right'>
            <a name='P58'>58</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method fail1' id='C58'>
              Frame fail1(p_q)
            </span>
          </td>
        </tr>
        <tr id='P59'>
          <td align='right'>
            <a name='P59'>59</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p_q' id='C59'>
              DelVar p_q
            </span>
          </td>
        </tr>
        <tr id='P60'>
          <td align='right'>
            <a name='P60'>60</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C60'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P61'>
          <td align='right'>
            <a name='P61'>61</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C61'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P62'>
          <td align='right'>
            <a name='P62'>62</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C62'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P63'>
          <td align='right'>
            <a name='P63'>63</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C63'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P64'>
          <td align='right'>
            <a name='P64'>64</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C64'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P65'>
          <td align='right'>
            <a name='P65'>65</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C65'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P66'>
          <td align='right'>
            <a name='P66'>66</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 89 if the value is False' id='C66'>
              JumpCond False 89
            </span>
          </td>
        </tr>
        <tr id='P67'>
          <td align='right'>
            <a name='P67'>67</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable lockTaken' id='C67'>
              Load lockTaken
            </span>
          </td>
        </tr>
        <tr id='P68'>
          <td align='right'>
            <a name='P68'>68</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying not' id='C68'>
              1-ary not
            </span>
          </td>
        </tr>
        <tr id='P69'>
          <td align='right'>
            <a name='P69'>69</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 67 if the value is False' id='C69'>
              JumpCond False 67
            </span>
          </td>
        </tr>
        <tr id='P70'>
          <td align='right'>
            <a name='P70'>70</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 72' id='C70'>
              Jump 72
            </span>
          </td>
        </tr>
        <tr id='P71'>
          <td align='right'>
            <a name='P71'>71</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 67' id='C71'>
              Jump 67
            </span>
          </td>
        </tr>
        <tr id='P72'>
          <td align='right'>
            <a name='P72'>72</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C72'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P73'>
          <td align='right'>
            <a name='P73'>73</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable lockTaken' id='C73'>
              Store lockTaken
            </span>
          </td>
        </tr>
        <tr id='P74'>
          <td align='right'>
            <a name='P74'>74</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C74'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P75'>
          <td align='right'>
            <a name='P75'>75</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable in_cs' id='C75'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P76'>
          <td align='right'>
            <a name='P76'>76</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C76'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P77'>
          <td align='right'>
            <a name='P77'>77</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C77'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P78'>
          <td align='right'>
            <a name='P78'>78</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable in_cs' id='C78'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P79'>
          <td align='right'>
            <a name='P79'>79</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C79'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P80'>
          <td align='right'>
            <a name='P80'>80</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C80'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P81'>
          <td align='right'>
            <a name='P81'>81</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable in_cs' id='C81'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P82'>
          <td align='right'>
            <a name='P82'>82</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C82'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P83'>
          <td align='right'>
            <a name='P83'>83</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C83'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P84'>
          <td align='right'>
            <a name='P84'>84</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable in_cs' id='C84'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P85'>
          <td align='right'>
            <a name='P85'>85</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C85'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P86'>
          <td align='right'>
            <a name='P86'>86</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C86'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P87'>
          <td align='right'>
            <a name='P87'>87</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable lockTaken' id='C87'>
              Store lockTaken
            </span>
          </td>
        </tr>
        <tr id='P88'>
          <td align='right'>
            <a name='P88'>88</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 59' id='C88'>
              Jump 59
            </span>
          </td>
        </tr>
        <tr id='P89'>
          <td align='right'>
            <a name='P89'>89</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C89'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P90'>
          <td align='right'>
            <a name='P90'>90</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 205' id='C90'>
              Jump 205
            </span>
          </td>
        </tr>
        <tr id='P91'>
          <td align='right'>
            <a name='P91'>91</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method fail2' id='C91'>
              Frame fail2(p_q)
            </span>
          </td>
        </tr>
        <tr id='P92'>
          <td align='right'>
            <a name='P92'>92</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C92'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P93'>
          <td align='right'>
            <a name='P93'>93</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C93'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P94'>
          <td align='right'>
            <a name='P94'>94</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C94'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P95'>
          <td align='right'>
            <a name='P95'>95</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C95'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P96'>
          <td align='right'>
            <a name='P96'>96</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C96'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P97'>
          <td align='right'>
            <a name='P97'>97</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C97'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P98'>
          <td align='right'>
            <a name='P98'>98</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 122 if the value is False' id='C98'>
              JumpCond False 122
            </span>
          </td>
        </tr>
        <tr id='P99'>
          <td align='right'>
            <a name='P99'>99</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C99'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P100'>
          <td align='right'>
            <a name='P100'>100</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p_q' id='C100'>
              LoadVar p_q
            </span>
          </td>
        </tr>
        <tr id='P101'>
          <td align='right'>
            <a name='P101'>101</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C101'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P102'>
          <td align='right'>
            <a name='P102'>102</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable turn' id='C102'>
              Store turn
            </span>
          </td>
        </tr>
        <tr id='P103'>
          <td align='right'>
            <a name='P103'>103</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable turn' id='C103'>
              Load turn
            </span>
          </td>
        </tr>
        <tr id='P104'>
          <td align='right'>
            <a name='P104'>104</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p_q' id='C104'>
              LoadVar p_q
            </span>
          </td>
        </tr>
        <tr id='P105'>
          <td align='right'>
            <a name='P105'>105</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C105'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P106'>
          <td align='right'>
            <a name='P106'>106</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 103 if the value is False' id='C106'>
              JumpCond False 103
            </span>
          </td>
        </tr>
        <tr id='P107'>
          <td align='right'>
            <a name='P107'>107</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 109' id='C107'>
              Jump 109
            </span>
          </td>
        </tr>
        <tr id='P108'>
          <td align='right'>
            <a name='P108'>108</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 103' id='C108'>
              Jump 103
            </span>
          </td>
        </tr>
        <tr id='P109'>
          <td align='right'>
            <a name='P109'>109</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C109'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P110'>
          <td align='right'>
            <a name='P110'>110</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable in_cs' id='C110'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P111'>
          <td align='right'>
            <a name='P111'>111</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C111'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P112'>
          <td align='right'>
            <a name='P112'>112</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C112'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P113'>
          <td align='right'>
            <a name='P113'>113</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable in_cs' id='C113'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P114'>
          <td align='right'>
            <a name='P114'>114</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C114'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P115'>
          <td align='right'>
            <a name='P115'>115</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C115'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P116'>
          <td align='right'>
            <a name='P116'>116</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable in_cs' id='C116'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P117'>
          <td align='right'>
            <a name='P117'>117</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C117'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P118'>
          <td align='right'>
            <a name='P118'>118</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C118'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P119'>
          <td align='right'>
            <a name='P119'>119</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable in_cs' id='C119'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P120'>
          <td align='right'>
            <a name='P120'>120</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C120'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P121'>
          <td align='right'>
            <a name='P121'>121</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 92' id='C121'>
              Jump 92
            </span>
          </td>
        </tr>
        <tr id='P122'>
          <td align='right'>
            <a name='P122'>122</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable p_q' id='C122'>
              DelVar p_q
            </span>
          </td>
        </tr>
        <tr id='P123'>
          <td align='right'>
            <a name='P123'>123</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C123'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P124'>
          <td align='right'>
            <a name='P124'>124</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 205' id='C124'>
              Jump 205
            </span>
          </td>
        </tr>
        <tr id='P125'>
          <td align='right'>
            <a name='P125'>125</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method fail4' id='C125'>
              Frame fail4(p_q)
            </span>
          </td>
        </tr>
        <tr id='P126'>
          <td align='right'>
            <a name='P126'>126</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C126'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P127'>
          <td align='right'>
            <a name='P127'>127</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C127'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P128'>
          <td align='right'>
            <a name='P128'>128</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C128'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P129'>
          <td align='right'>
            <a name='P129'>129</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C129'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P130'>
          <td align='right'>
            <a name='P130'>130</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C130'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P131'>
          <td align='right'>
            <a name='P131'>131</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C131'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P132'>
          <td align='right'>
            <a name='P132'>132</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 155 if the value is False' id='C132'>
              JumpCond False 155
            </span>
          </td>
        </tr>
        <tr id='P133'>
          <td align='right'>
            <a name='P133'>133</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable turn' id='C133'>
              Load turn
            </span>
          </td>
        </tr>
        <tr id='P134'>
          <td align='right'>
            <a name='P134'>134</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p_q' id='C134'>
              LoadVar p_q
            </span>
          </td>
        </tr>
        <tr id='P135'>
          <td align='right'>
            <a name='P135'>135</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C135'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P136'>
          <td align='right'>
            <a name='P136'>136</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 138 if the value is True' id='C136'>
              JumpCond True 138
            </span>
          </td>
        </tr>
        <tr id='P137'>
          <td align='right'>
            <a name='P137'>137</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 133' id='C137'>
              Jump 133
            </span>
          </td>
        </tr>
        <tr id='P138'>
          <td align='right'>
            <a name='P138'>138</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C138'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P139'>
          <td align='right'>
            <a name='P139'>139</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable in_cs' id='C139'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P140'>
          <td align='right'>
            <a name='P140'>140</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C140'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P141'>
          <td align='right'>
            <a name='P141'>141</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C141'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P142'>
          <td align='right'>
            <a name='P142'>142</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable in_cs' id='C142'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P143'>
          <td align='right'>
            <a name='P143'>143</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C143'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P144'>
          <td align='right'>
            <a name='P144'>144</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C144'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P145'>
          <td align='right'>
            <a name='P145'>145</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable in_cs' id='C145'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P146'>
          <td align='right'>
            <a name='P146'>146</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C146'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P147'>
          <td align='right'>
            <a name='P147'>147</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C147'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P148'>
          <td align='right'>
            <a name='P148'>148</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable in_cs' id='C148'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P149'>
          <td align='right'>
            <a name='P149'>149</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C149'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P150'>
          <td align='right'>
            <a name='P150'>150</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C150'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P151'>
          <td align='right'>
            <a name='P151'>151</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of p_q' id='C151'>
              LoadVar p_q
            </span>
          </td>
        </tr>
        <tr id='P152'>
          <td align='right'>
            <a name='P152'>152</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C152'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P153'>
          <td align='right'>
            <a name='P153'>153</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable turn' id='C153'>
              Store turn
            </span>
          </td>
        </tr>
        <tr id='P154'>
          <td align='right'>
            <a name='P154'>154</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 126' id='C154'>
              Jump 126
            </span>
          </td>
        </tr>
        <tr id='P155'>
          <td align='right'>
            <a name='P155'>155</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p_q' id='C155'>
              DelVar p_q
            </span>
          </td>
        </tr>
        <tr id='P156'>
          <td align='right'>
            <a name='P156'>156</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C156'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P157'>
          <td align='right'>
            <a name='P157'>157</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 205' id='C157'>
              Jump 205
            </span>
          </td>
        </tr>
        <tr id='P158'>
          <td align='right'>
            <a name='P158'>158</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method fail3' id='C158'>
              Frame fail3(p_q)
            </span>
          </td>
        </tr>
        <tr id='P159'>
          <td align='right'>
            <a name='P159'>159</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {}' id='C159'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P160'>
          <td align='right'>
            <a name='P160'>160</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C160'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P161'>
          <td align='right'>
            <a name='P161'>161</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C161'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P162'>
          <td align='right'>
            <a name='P162'>162</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C162'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P163'>
          <td align='right'>
            <a name='P163'>163</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C163'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P164'>
          <td align='right'>
            <a name='P164'>164</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a set value and push one of its elements' id='C164'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P165'>
          <td align='right'>
            <a name='P165'>165</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 203 if the value is False' id='C165'>
              JumpCond False 203
            </span>
          </td>
        </tr>
        <tr id='P166'>
          <td align='right'>
            <a name='P166'>166</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?flags' id='C166'>
              Push ?flags
            </span>
          </td>
        </tr>
        <tr id='P167'>
          <td align='right'>
            <a name='P167'>167</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of p_q' id='C167'>
              LoadVar p_q
            </span>
          </td>
        </tr>
        <tr id='P168'>
          <td align='right'>
            <a name='P168'>168</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C168'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P169'>
          <td align='right'>
            <a name='P169'>169</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C169'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P170'>
          <td align='right'>
            <a name='P170'>170</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C170'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P171'>
          <td align='right'>
            <a name='P171'>171</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?flags' id='C171'>
              Push ?flags
            </span>
          </td>
        </tr>
        <tr id='P172'>
          <td align='right'>
            <a name='P172'>172</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C172'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P173'>
          <td align='right'>
            <a name='P173'>173</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of p_q' id='C173'>
              LoadVar p_q
            </span>
          </td>
        </tr>
        <tr id='P174'>
          <td align='right'>
            <a name='P174'>174</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C174'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P175'>
          <td align='right'>
            <a name='P175'>175</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C175'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P176'>
          <td align='right'>
            <a name='P176'>176</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C176'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P177'>
          <td align='right'>
            <a name='P177'>177</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying not' id='C177'>
              1-ary not
            </span>
          </td>
        </tr>
        <tr id='P178'>
          <td align='right'>
            <a name='P178'>178</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 171 if the value is False' id='C178'>
              JumpCond False 171
            </span>
          </td>
        </tr>
        <tr id='P179'>
          <td align='right'>
            <a name='P179'>179</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 181' id='C179'>
              Jump 181
            </span>
          </td>
        </tr>
        <tr id='P180'>
          <td align='right'>
            <a name='P180'>180</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 171' id='C180'>
              Jump 171
            </span>
          </td>
        </tr>
        <tr id='P181'>
          <td align='right'>
            <a name='P181'>181</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C181'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P182'>
          <td align='right'>
            <a name='P182'>182</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable in_cs' id='C182'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P183'>
          <td align='right'>
            <a name='P183'>183</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C183'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P184'>
          <td align='right'>
            <a name='P184'>184</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C184'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P185'>
          <td align='right'>
            <a name='P185'>185</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable in_cs' id='C185'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P186'>
          <td align='right'>
            <a name='P186'>186</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C186'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P187'>
          <td align='right'>
            <a name='P187'>187</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "entrei"' id='C187'>
              Push "entrei"
            </span>
          </td>
        </tr>
        <tr id='P188'>
          <td align='right'>
            <a name='P188'>188</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C188'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P189'>
          <td align='right'>
            <a name='P189'>189</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "sai"' id='C189'>
              Push "sai"
            </span>
          </td>
        </tr>
        <tr id='P190'>
          <td align='right'>
            <a name='P190'>190</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C190'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P191'>
          <td align='right'>
            <a name='P191'>191</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C191'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P192'>
          <td align='right'>
            <a name='P192'>192</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable in_cs' id='C192'>
              Load in_cs
            </span>
          </td>
        </tr>
        <tr id='P193'>
          <td align='right'>
            <a name='P193'>193</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C193'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P194'>
          <td align='right'>
            <a name='P194'>194</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C194'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P195'>
          <td align='right'>
            <a name='P195'>195</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable in_cs' id='C195'>
              Store in_cs
            </span>
          </td>
        </tr>
        <tr id='P196'>
          <td align='right'>
            <a name='P196'>196</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C196'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P197'>
          <td align='right'>
            <a name='P197'>197</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?flags' id='C197'>
              Push ?flags
            </span>
          </td>
        </tr>
        <tr id='P198'>
          <td align='right'>
            <a name='P198'>198</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p_q' id='C198'>
              LoadVar p_q
            </span>
          </td>
        </tr>
        <tr id='P199'>
          <td align='right'>
            <a name='P199'>199</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C199'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P200'>
          <td align='right'>
            <a name='P200'>200</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C200'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P201'>
          <td align='right'>
            <a name='P201'>201</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C201'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P202'>
          <td align='right'>
            <a name='P202'>202</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 159' id='C202'>
              Jump 159
            </span>
          </td>
        </tr>
        <tr id='P203'>
          <td align='right'>
            <a name='P203'>203</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p_q' id='C203'>
              DelVar p_q
            </span>
          </td>
        </tr>
        <tr id='P204'>
          <td align='right'>
            <a name='P204'>204</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C204'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P205'>
          <td align='right'>
            <a name='P205'>205</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?PC(34)' id='C205'>
              Push ?PC(34)
            </span>
          </td>
        </tr>
        <tr id='P206'>
          <td align='right'>
            <a name='P206'>206</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C206'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P207'>
          <td align='right'>
            <a name='P207'>207</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C207'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P208'>
          <td align='right'>
            <a name='P208'>208</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C208'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P209'>
          <td align='right'>
            <a name='P209'>209</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C209'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P210'>
          <td align='right'>
            <a name='P210'>210</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?PC(34)' id='C210'>
              Push ?PC(34)
            </span>
          </td>
        </tr>
        <tr id='P211'>
          <td align='right'>
            <a name='P211'>211</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C211'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P212'>
          <td align='right'>
            <a name='P212'>212</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C212'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P213'>
          <td align='right'>
            <a name='P213'>213</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C213'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P214'>
          <td align='right'>
            <a name='P214'>214</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C214'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P215'>
          <td align='right'>
            <a name='P215'>215</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C215'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P216'>
          <td align='right'>
            <a name='P216'>216</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C216'>
              DelVar result
            </span>
          </td>
        </tr>
      </body>
    </table>
  </div>
</div>
    </td>
    <td valign='top'>
<table border='1'
  <thead>
    <tr>
      <th colspan='4'>Threads</th>
    </tr>
    <tr>
      <th>
        ID
      </th>
      <th>
        Status
      </th>
      <th>
        Stack Trace
      </th>
      <th>
        Stack Top
      </th>
    </tr>
  </thead>
  <tbody id='threadtable'>
    <tr id='thread0'>
      <td align='center'>
        T0
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo0' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread1'>
      <td align='center'>
        T1
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo1' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread2'>
      <td align='center'>
        T2
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo2' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread3'>
      <td align='center'>
        T3
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo3' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
  </tbody>
</table>
    </td>
  </tr>
</table>
<script>
var nthreads = 4;
var nmegasteps = 4;
var vardir = [
  ['counter'],
  ['flags'],
  ['in_cs'],
  ['lockTaken'],
  ['turn']
];
var state =
{
  "nstates": 19,
  "issue": "Safety violation",
  "hvm": {
    "modules": {
        "__main__": {
            "file": "b_ary_fail.hny",
            "lines": [
                "#critical reached?",
                "#invariant reached_crit in {0, 1} # safety",
                "#invariant   #forall (C1 C2: clients) , cs C1 /\\ cs C2 -> C1 = C2",
                "#invariant  (in_cs in { 0, 1 }) and (any [entering tid for tid in [0,1]] => one_entered [0,1])",
                "sequential turn, lockTaken, flags",
                "flags = [False, False]",
                "in_cs = 0",
                "invariant in_cs in {0,1}",
                "turn = 0",
                "lockTaken = False",
                "counter = 0",
                "def fail0 p_q:",
                "	while choose {False, True}:",
                "		# non crit",
                "		#entering crit",
                "		#crit",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "",
                "		#leave crit",
                "def fail1 p_q:",
                "	while choose {False, True}:",
                "		# Enter cs",
                "		await not lockTaken",
                "		lockTaken = True",
                "		#cs",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "		#leaving cs",
                "		lockTaken = False",
                "def fail2 p_q:",
                "	while choose {False, True}:",
                "		# enter critical",
                "		turn = 1 - p_q",
                "		await turn == p_q",
                "		# critical",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "		# leaving critical",
                "		# post protocol",
                "def fail4 p_q:",
                "	while choose {False, True}:",
                "		while not (turn == p_q):",
                "			pass",
                "		#cs",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "		#counter += 1",
                "		turn = 1 - p_q",
                "",
                "def fail3 p_q:",
                "	while choose {False, True}:",
                "		#entering critical",
                "		flags p_q = True",
                "		await not flags (1 - p_q)",
                "		#crit",
                "		atomically in_cs += 1",
                "		print(\"entrei\");",
                "		print(\"sai\");",
                "		atomically in_cs -= 1",
                "		#leaving",
                "		flags p_q = False",
                "spawn fail0 0;",
                "spawn fail0 1;"
              ],
            "identifiers": {
                "lockTaken": "global",
                "flags": "global",
                "in_cs": "global",
                "fail4": "constant",
                "this": "local-var",
                "turn": "global",
                "fail0": "constant",
                "fail2": "constant",
                "fail1": "constant",
                "fail3": "constant",
                "p_q": "local-const",
                "counter": "global",
                "___": "___"
              }
          }
      },
    "labels": {
        "__end__": 217
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Push ?turn",
            "push constant ?turn"
          ],
        [
            "Sequential",
            "sequential consistency for variable on top of stack"
          ],
        [
            "Push ?lockTaken",
            "push constant ?lockTaken"
          ],
        [
            "Sequential",
            "sequential consistency for variable on top of stack"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "Sequential",
            "sequential consistency for variable on top of stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Store flags",
            "pop a value and store it in shared variable flags"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "Jump 26",
            "jump over invariant definition: set program counter to 26"
          ],
        [
            "Frame invariant()",
            "start of method invariant"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Invariant 16",
            "test invariant"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store turn",
            "pop a value and store it in shared variable turn"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store lockTaken",
            "pop a value and store it in shared variable lockTaken"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store counter",
            "pop a value and store it in shared variable counter"
          ],
        [
            "Jump 205",
            "jump over method definition: set program counter to 205"
          ],
        [
            "Frame fail0(p_q)",
            "start of method fail0"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 56",
            "pop a value and jump to 56 if the value is False"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 35",
            "set program counter to 35"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 205",
            "jump over method definition: set program counter to 205"
          ],
        [
            "Frame fail1(p_q)",
            "start of method fail1"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 89",
            "pop a value and jump to 89 if the value is False"
          ],
        [
            "Load lockTaken",
            "push value of shared variable lockTaken"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 67",
            "pop a value and jump to 67 if the value is False"
          ],
        [
            "Jump 72",
            "set program counter to 72"
          ],
        [
            "Jump 67",
            "set program counter to 67"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store lockTaken",
            "pop a value and store it in shared variable lockTaken"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store lockTaken",
            "pop a value and store it in shared variable lockTaken"
          ],
        [
            "Jump 59",
            "set program counter to 59"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 205",
            "jump over method definition: set program counter to 205"
          ],
        [
            "Frame fail2(p_q)",
            "start of method fail2"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 122",
            "pop a value and jump to 122 if the value is False"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store turn",
            "pop a value and store it in shared variable turn"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 103",
            "pop a value and jump to 103 if the value is False"
          ],
        [
            "Jump 109",
            "set program counter to 109"
          ],
        [
            "Jump 103",
            "set program counter to 103"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 92",
            "set program counter to 92"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 205",
            "jump over method definition: set program counter to 205"
          ],
        [
            "Frame fail4(p_q)",
            "start of method fail4"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 155",
            "pop a value and jump to 155 if the value is False"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond True 138",
            "pop a value and jump to 138 if the value is True"
          ],
        [
            "Jump 133",
            "set program counter to 133"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store turn",
            "pop a value and store it in shared variable turn"
          ],
        [
            "Jump 126",
            "set program counter to 126"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 205",
            "jump over method definition: set program counter to 205"
          ],
        [
            "Frame fail3(p_q)",
            "start of method fail3"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 203",
            "pop a value and jump to 203 if the value is False"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 171",
            "pop a value and jump to 171 if the value is False"
          ],
        [
            "Jump 181",
            "set program counter to 181"
          ],
        [
            "Jump 171",
            "set program counter to 171"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push \"entrei\"",
            "push constant \"entrei\""
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push \"sai\"",
            "push constant \"sai\""
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Jump 159",
            "set program counter to 159"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push ?PC(34)",
            "push constant ?PC(34)"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Push ?PC(34)",
            "push constant ?PC(34)"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 65,
            "stmt": [
                5,
                1,
                65,
                7
              ],
            "line": 5,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                33
              ],
            "line": 5,
            "endcolumn": 15,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                33
              ],
            "line": 5,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                33
              ],
            "line": 5,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                33
              ],
            "line": 5,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                33
              ],
            "line": 5,
            "endcolumn": 33,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                33
              ],
            "line": 5,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                22
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                22
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                22
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                22
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                22
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                22
              ],
            "line": 6,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                9
              ],
            "line": 7,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                9
              ],
            "line": 7,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                8
              ],
            "line": 9,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                8
              ],
            "line": 9,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 11,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                11
              ],
            "line": 11,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                11
              ],
            "line": 11,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                14,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                14,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                14,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                14,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                14,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                14,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                2,
                13,
                28
              ],
            "line": 13,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                14
              ],
            "line": 21,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                14
              ],
            "line": 21,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                3,
                24,
                21
              ],
            "line": 24,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                3,
                24,
                21
              ],
            "line": 24,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                3,
                24,
                21
              ],
            "line": 24,
            "endcolumn": 21,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                3,
                24,
                21
              ],
            "line": 24,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                3,
                24,
                21
              ],
            "line": 24,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                3,
                25,
                18
              ],
            "line": 25,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                3,
                25,
                18
              ],
            "line": 25,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                14,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                14,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                14,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                14,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                14,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                14,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                3,
                30,
                19
              ],
            "line": 30,
            "endcolumn": 19,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                3,
                30,
                19
              ],
            "line": 30,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                2,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                14
              ],
            "line": 21,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                14
              ],
            "line": 31,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                14
              ],
            "line": 31,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                2,
                32,
                28
              ],
            "line": 32,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                2,
                32,
                28
              ],
            "line": 32,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                2,
                32,
                28
              ],
            "line": 32,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                2,
                32,
                28
              ],
            "line": 32,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                2,
                32,
                28
              ],
            "line": 32,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                2,
                32,
                28
              ],
            "line": 32,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                2,
                32,
                28
              ],
            "line": 32,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                16
              ],
            "line": 34,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                16
              ],
            "line": 34,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                16
              ],
            "line": 34,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                16
              ],
            "line": 34,
            "endcolumn": 8,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                3,
                35,
                19
              ],
            "line": 35,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                3,
                35,
                19
              ],
            "line": 35,
            "endcolumn": 19,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                3,
                35,
                19
              ],
            "line": 35,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                3,
                35,
                19
              ],
            "line": 35,
            "endcolumn": 19,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                3,
                35,
                19
              ],
            "line": 35,
            "endcolumn": 19,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                3,
                35,
                19
              ],
            "line": 35,
            "endcolumn": 19,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                14,
                38,
                23
              ],
            "line": 38,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                14,
                38,
                23
              ],
            "line": 38,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                14,
                38,
                23
              ],
            "line": 38,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                14,
                38,
                23
              ],
            "line": 38,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                14,
                38,
                23
              ],
            "line": 38,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                14,
                38,
                23
              ],
            "line": 38,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                2,
                32,
                28
              ],
            "line": 32,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                14
              ],
            "line": 31,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                14
              ],
            "line": 31,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                14
              ],
            "line": 41,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                14
              ],
            "line": 41,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                2,
                42,
                28
              ],
            "line": 42,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                2,
                42,
                28
              ],
            "line": 42,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                2,
                42,
                28
              ],
            "line": 42,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                2,
                42,
                28
              ],
            "line": 42,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                2,
                42,
                28
              ],
            "line": 42,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                2,
                42,
                28
              ],
            "line": 42,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                2,
                42,
                28
              ],
            "line": 42,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                26
              ],
            "line": 43,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                26
              ],
            "line": 43,
            "endcolumn": 24,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                26
              ],
            "line": 43,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                26
              ],
            "line": 43,
            "endcolumn": 7,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                26
              ],
            "line": 43,
            "endcolumn": 26,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                16
              ],
            "line": 49,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                16
              ],
            "line": 49,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                16
              ],
            "line": 49,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                16
              ],
            "line": 49,
            "endcolumn": 8,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                2,
                42,
                28
              ],
            "line": 42,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                14
              ],
            "line": 41,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                14
              ],
            "line": 41,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                14
              ],
            "line": 51,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                14
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                2,
                52,
                28
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                2,
                52,
                28
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                2,
                52,
                28
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                2,
                52,
                28
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                2,
                52,
                28
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                2,
                52,
                28
              ],
            "line": 52,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                2,
                52,
                28
              ],
            "line": 52,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                3,
                54,
                18
              ],
            "line": 54,
            "endcolumn": 7,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                3,
                54,
                18
              ],
            "line": 54,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                3,
                54,
                18
              ],
            "line": 54,
            "endcolumn": 11,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                3,
                54,
                18
              ],
            "line": 54,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 54,
            "stmt": [
                54,
                3,
                54,
                18
              ],
            "line": 54,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                3,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 57,
            "stmt": [
                57,
                14,
                57,
                23
              ],
            "line": 57,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 57,
            "stmt": [
                57,
                14,
                57,
                23
              ],
            "line": 57,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 57,
            "stmt": [
                57,
                14,
                57,
                23
              ],
            "line": 57,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 57,
            "stmt": [
                57,
                14,
                57,
                23
              ],
            "line": 57,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 57,
            "stmt": [
                57,
                14,
                57,
                23
              ],
            "line": 57,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 57,
            "stmt": [
                57,
                14,
                57,
                23
              ],
            "line": 57,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 58,
            "stmt": [
                58,
                3,
                58,
                17
              ],
            "line": 58,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 58,
            "stmt": [
                58,
                3,
                58,
                17
              ],
            "line": 58,
            "endcolumn": 17,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 59,
            "stmt": [
                59,
                3,
                59,
                14
              ],
            "line": 59,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 59,
            "stmt": [
                59,
                3,
                59,
                14
              ],
            "line": 59,
            "endcolumn": 14,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                14,
                60,
                23
              ],
            "line": 60,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                14,
                60,
                23
              ],
            "line": 60,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                14,
                60,
                23
              ],
            "line": 60,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                14,
                60,
                23
              ],
            "line": 60,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                14,
                60,
                23
              ],
            "line": 60,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                14,
                60,
                23
              ],
            "line": 60,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 62,
            "stmt": [
                62,
                3,
                62,
                19
              ],
            "line": 62,
            "endcolumn": 7,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 62,
            "stmt": [
                62,
                3,
                62,
                19
              ],
            "line": 62,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 62,
            "stmt": [
                62,
                3,
                62,
                19
              ],
            "line": 62,
            "endcolumn": 11,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 62,
            "stmt": [
                62,
                3,
                62,
                19
              ],
            "line": 62,
            "endcolumn": 19,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 62,
            "stmt": [
                62,
                3,
                62,
                19
              ],
            "line": 62,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                2,
                52,
                28
              ],
            "line": 52,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                14
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                1,
                51,
                14
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                13
              ],
            "line": 63,
            "endcolumn": 11,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                13
              ],
            "line": 63,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                13
              ],
            "line": 63,
            "endcolumn": 13,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                13
              ],
            "line": 63,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                13
              ],
            "line": 63,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 64,
            "stmt": [
                64,
                1,
                64,
                13
              ],
            "line": 64,
            "endcolumn": 11,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 64,
            "stmt": [
                64,
                1,
                64,
                13
              ],
            "line": 64,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 64,
            "stmt": [
                64,
                1,
                64,
                13
              ],
            "line": 64,
            "endcolumn": 13,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 64,
            "stmt": [
                64,
                1,
                64,
                13
              ],
            "line": 64,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 64,
            "stmt": [
                64,
                1,
                64,
                13
              ],
            "line": 64,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 65,
            "stmt": [
                5,
                1,
                65,
                7
              ],
            "line": 5,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 65,
            "stmt": [
                5,
                1,
                65,
                7
              ],
            "line": 5,
            "endcolumn": 7,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "turn"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "op": "Sequential"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "lockTaken"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "op": "Sequential"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "op": "Sequential"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "flags"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "26",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "invariant",
            "op": "Frame"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "16",
            "op": "Invariant",
            "pre": "False"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "lockTaken"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "counter"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "205",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail0",
            "op": "Frame"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "56",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "35",
            "op": "Jump"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "205",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail1",
            "op": "Frame"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "89",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "lockTaken"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "67",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "72",
            "op": "Jump"
          },
        {
            "pc": "67",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "lockTaken"
                  }
              ],
            "op": "Store"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "lockTaken"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "59",
            "op": "Jump"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "205",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail2",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "122",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Store"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "103",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "109",
            "op": "Jump"
          },
        {
            "pc": "103",
            "op": "Jump"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "92",
            "op": "Jump"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "205",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail4",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "155",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "138",
            "cond": {
                "type": "bool",
                "value": "True"
              },
            "op": "JumpCond"
          },
        {
            "pc": "133",
            "op": "Jump"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "126",
            "op": "Jump"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "205",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail3",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "203",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "171",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "181",
            "op": "Jump"
          },
        {
            "pc": "171",
            "op": "Jump"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "atom",
                "value": "entrei"
              },
            "op": "Push"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "atom",
                "value": "sai"
              },
            "op": "Push"
          },
        {
            "op": "Print"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "pc": "159",
            "op": "Jump"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "34"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "34"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "57c50766117a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Push ?turn",
          "explain": "push constant ?turn",
          "explain2": { "text": "push constant ?turn", "args": [] },
          "npc": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" } ] } ],
          "pc": "1"
        },

        {
          "code": "Sequential",
          "explain": "sequential consistency for variable on top of stack",
          "explain2": { "text": "sequential consistency for variable on top of stack", "args": [] },
          "npc": "3",
          "pop": "1",
          "push": [ ],
          "pc": "2"
        },

        {
          "code": "Push ?lockTaken",
          "explain": "push constant ?lockTaken",
          "explain2": { "text": "push constant ?lockTaken", "args": [] },
          "npc": "4",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "lockTaken" } ] } ],
          "pc": "3"
        },

        {
          "code": "Sequential",
          "explain": "sequential consistency for variable on top of stack",
          "explain2": { "text": "sequential consistency for variable on top of stack", "args": [] },
          "npc": "5",
          "pop": "1",
          "push": [ ],
          "pc": "4"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "6",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "5"
        },

        {
          "code": "Sequential",
          "explain": "sequential consistency for variable on top of stack",
          "explain2": { "text": "sequential consistency for variable on top of stack", "args": [] },
          "npc": "7",
          "pop": "1",
          "push": [ ],
          "pc": "6"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "8",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "7"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "9",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "8"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, []); insert first value into the second; push result ([False])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "10",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "9"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "11",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "10"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, [False]); insert first value into the second; push result ([False, False])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "list", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ] },
          "npc": "12",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ],
          "pc": "11"
        },

        {
          "code": "Store flags",
          "explain": "pop value ([False, False]) and store into variable flags",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ] },
          "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } },
          "npc": "13",
          "pop": "1",
          "push": [ ],
          "pc": "12"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "14",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "13"
        },

        {
          "code": "Store in_cs",
          "explain": "pop value (0) and store into variable in_cs",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "in_cs" } ] } ] },
          "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" } },
          "npc": "15",
          "pop": "1",
          "push": [ ],
          "pc": "14"
        },

        {
          "code": "Jump 26",
          "explain": "jump over invariant definition: set program counter to 26",
          "explain2": { "text": "jump over invariant definition: set program counter to 26", "args": [] },
          "npc": "26",
          "push": [ ],
          "pc": "15"
        },

        {
          "code": "Invariant 16",
          "explain": "test invariant",
          "explain2": { "text": "test invariant", "args": [] },
          "npc": "27",
          "push": [ ],
          "pc": "26"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "28",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "27"
        },

        {
          "code": "Store turn",
          "explain": "pop value (0) and store into variable turn",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" } ] } ] },
          "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "turn": { "type": "int", "value": "0" } },
          "npc": "29",
          "pop": "1",
          "push": [ ],
          "pc": "28"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "30",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "29"
        },

        {
          "code": "Store lockTaken",
          "explain": "pop value (False) and store into variable lockTaken",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "bool", "value": "False" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "lockTaken" } ] } ] },
          "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
          "npc": "31",
          "pop": "1",
          "push": [ ],
          "pc": "30"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "32",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "31"
        },

        {
          "code": "Store counter",
          "explain": "pop value (0) and store into variable counter",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "counter" } ] } ] },
          "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
          "npc": "33",
          "pop": "1",
          "push": [ ],
          "pc": "32"
        },

        {
          "code": "Jump 205",
          "explain": "jump over method definition: set program counter to 205",
          "explain2": { "text": "jump over method definition: set program counter to 205", "args": [] },
          "npc": "205",
          "push": [ ],
          "pc": "33"
        },

        {
          "code": "Push ?PC(34)",
          "explain": "push constant ?PC(34)",
          "explain2": { "text": "push constant ?PC(34)", "args": [] },
          "npc": "206",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [ ] } ],
          "pc": "205"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "207",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "206"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?PC(34)); push result (?PC(34)[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "208",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [{ "type": "int", "value": "0" } ] } ],
          "pc": "207"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "209",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "208"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (0), and pc (34: \"fail0\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (34: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "0" }, { "type": "atom", "value": "fail0" } ] },
          "npc": "210",
          "pop": "2",
          "push": [ ],
          "pc": "209"
        },

        {
          "code": "Push ?PC(34)",
          "explain": "push constant ?PC(34)",
          "explain2": { "text": "push constant ?PC(34)", "args": [] },
          "npc": "211",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [ ] } ],
          "pc": "210"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "212",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "211"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(34)); push result (?PC(34)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "213",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "34" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "212"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "214",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "213"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (34: \"fail0\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (34: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "fail0" } ] },
          "npc": "215",
          "pop": "2",
          "push": [ ],
          "pc": "214"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "215",
          "mode": "terminated",
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "215"
        }

      ],
      "ctxbag": {
          "7f7ca440025a": "1",
          "7f7ca44002aa": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f7ca44002da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "215",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "215","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f7ca440025a",
          "fp": "1",
          "name": "fail0(0)",
          "entry": "34",
          "pc": "34",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "34","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail0", "args": "p_q", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f7ca44002aa",
          "fp": "1",
          "name": "fail0(1)",
          "entry": "34",
          "pc": "34",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "34","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail0", "args": "p_q", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3",
      "tid": "2",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail0(1)",
      "context": {
        "tid": "2",
        "hvalue": "7f7ca44002aa",
        "fp": "1",
        "name": "fail0(1)",
        "entry": "34",
        "pc": "34",
        "sp": "1",
        "stack": [{ "type": "int", "value": "1" }],
        "trace": [
{"pc": "34","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "fail0", "args": "p_q", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame fail0(p_q)",
          "explain": "pop argument (1), assign to p_q, and run method \"fail0\"",
          "explain2": { "text": "pop argument (#+), assign to p_q, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "fail0" } ] },
          "npc": "35",
          "fp": "1",
          "trace": [
{"pc": "35","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "local": { "p_q": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "34"
        },

        {
          "code": "DelVar p_q",
          "explain": "delete method variable p_q",
          "explain2": { "text": "delete method variable p_q", "args": [] },
          "npc": "36",
          "local": { },
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "37",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "36"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "38",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "37"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (False, {}); insert first value into the second; push result ({ False })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "40",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "39"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "41",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "40"
        }

      ],
      "ctxbag": {
          "7f7ca440025a": "1",
          "7f7ca440034a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f7ca44002da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "215",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "215","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f7ca440025a",
          "fp": "1",
          "name": "fail0(0)",
          "entry": "34",
          "pc": "34",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "34","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail0", "args": "p_q", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f7ca440034a",
          "fp": "1",
          "name": "fail0(1)",
          "entry": "34",
          "pc": "41",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }],
          "trace": [
{"pc": "41","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "7",
      "tid": "2",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail0(1)",
      "choice": { "type": "bool", "value": "True" },
      "context": {
        "tid": "2",
        "hvalue": "7f7ca440034a",
        "fp": "1",
        "name": "fail0(1)",
        "entry": "34",
        "pc": "41",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }],
        "trace": [
{"pc": "41","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ False, True }) with choice (True)",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "True" } ] },
          "choose": { "type": "bool", "value": "True" },
          "npc": "42",
          "fp": "1",
          "trace": [
{"pc": "42","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 56",
          "explain": "pop value (True), compare to False, and jump to 56 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 56 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        }

      ],
      "ctxbag": {
          "7f7ca440025a": "1",
          "7f7caf80004a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f7ca44002da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "215",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "215","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f7ca440025a",
          "fp": "1",
          "name": "fail0(0)",
          "entry": "34",
          "pc": "34",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "34","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail0", "args": "p_q", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f7caf80004a",
          "fp": "1",
          "name": "fail0(1)",
          "entry": "34",
          "pc": "43",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "43","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "11",
      "tid": "2",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail0(1)",
      "context": {
        "tid": "2",
        "hvalue": "7f7caf80004a",
        "fp": "1",
        "name": "fail0(1)",
        "entry": "34",
        "pc": "43",
        "sp": "1",
        "stack": [{ "type": "dict", "value": [] }],
        "trace": [
{"pc": "43","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "44",
          "fp": "1",
          "trace": [
{"pc": "44","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "43"
        },

        {
          "code": "Load in_cs",
          "explain": "push value (0) of variable in_cs",
          "explain2": { "text": "push value (#+) of variable in_cs", "args": [ { "type": "int", "value": "0" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "46",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "45"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "47",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "46"
        },

        {
          "code": "Store in_cs",
          "explain": "pop value (1) and store into variable in_cs",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "in_cs" } ] } ] },
          "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "1" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
          "npc": "48",
          "pop": "1",
          "push": [ ],
          "pc": "47"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "49",
          "atomic": "0",
          "push": [ ],
          "pc": "48"
        }

      ],
      "ctxbag": {
          "7f7ca440025a": "1",
          "7f7cad40007a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f7ca44002da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "215",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "215","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f7ca440025a",
          "fp": "1",
          "name": "fail0(0)",
          "entry": "34",
          "pc": "34",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "34","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail0", "args": "p_q", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f7cad40007a",
          "fp": "1",
          "name": "fail0(1)",
          "entry": "34",
          "pc": "49",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "49","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "15",
      "tid": "1",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "1" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail0(0)",
      "context": {
        "tid": "1",
        "hvalue": "7f7ca440025a",
        "fp": "1",
        "name": "fail0(0)",
        "entry": "34",
        "pc": "34",
        "sp": "1",
        "stack": [{ "type": "int", "value": "0" }],
        "trace": [
{"pc": "34","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "fail0", "args": "p_q", "value": { "type": "int", "value": "0" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame fail0(p_q)",
          "explain": "pop argument (0), assign to p_q, and run method \"fail0\"",
          "explain2": { "text": "pop argument (#+), assign to p_q, and run method #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "fail0" } ] },
          "npc": "35",
          "fp": "1",
          "trace": [
{"pc": "35","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "local": { "p_q": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "34"
        },

        {
          "code": "DelVar p_q",
          "explain": "delete method variable p_q",
          "explain2": { "text": "delete method variable p_q", "args": [] },
          "npc": "36",
          "local": { },
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "37",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "36"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "38",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "37"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (False, {}); insert first value into the second; push result ({ False })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "40",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "39"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "41",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "40"
        }

      ],
      "ctxbag": {
          "7f7ca440034a": "1",
          "7f7cad40007a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f7ca44002da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "215",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "215","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f7ca440034a",
          "fp": "1",
          "name": "fail0(0)",
          "entry": "34",
          "pc": "41",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }],
          "trace": [
{"pc": "41","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } },
          "mode": "choosing"
        },
        {
          "tid": "2",
          "hvalue": "7f7cad40007a",
          "fp": "1",
          "name": "fail0(1)",
          "entry": "34",
          "pc": "49",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "49","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "17",
      "tid": "1",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "1" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail0(0)",
      "choice": { "type": "bool", "value": "True" },
      "context": {
        "tid": "1",
        "hvalue": "7f7ca440034a",
        "fp": "1",
        "name": "fail0(0)",
        "entry": "34",
        "pc": "41",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }],
        "trace": [
{"pc": "41","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ False, True }) with choice (True)",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "True" } ] },
          "choose": { "type": "bool", "value": "True" },
          "npc": "42",
          "fp": "1",
          "trace": [
{"pc": "42","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 56",
          "explain": "pop value (True), compare to False, and jump to 56 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 56 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        }

      ],
      "ctxbag": {
          "7f7cad40007a": "1",
          "7f7caf80004a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f7ca44002da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "215",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "215","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f7caf80004a",
          "fp": "1",
          "name": "fail0(0)",
          "entry": "34",
          "pc": "43",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "43","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f7cad40007a",
          "fp": "1",
          "name": "fail0(1)",
          "entry": "34",
          "pc": "49",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "49","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "18",
      "tid": "1",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "1" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail0(0)",
      "context": {
        "tid": "1",
        "hvalue": "7f7caf80004a",
        "fp": "1",
        "name": "fail0(0)",
        "entry": "34",
        "pc": "43",
        "sp": "1",
        "stack": [{ "type": "dict", "value": [] }],
        "trace": [
{"pc": "43","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "44",
          "fp": "1",
          "trace": [
{"pc": "44","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "43"
        },

        {
          "code": "Load in_cs",
          "explain": "push value (1) of variable in_cs",
          "explain2": { "text": "push value (#+) of variable in_cs", "args": [ { "type": "int", "value": "1" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "46",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "45"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 1); add the integers; push result (2)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] },
          "npc": "47",
          "pop": "2",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "46"
        },

        {
          "code": "Store in_cs",
          "explain": "pop value (2) and store into variable in_cs",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "in_cs" } ] } ] },
          "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "2" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
          "npc": "48",
          "pop": "1",
          "push": [ ],
          "pc": "47"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "49",
          "atomic": "0",
          "push": [ ],
          "pc": "48"
        }

      ],
      "ctxbag": {
          "7f7cad40007a": "2"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f7ca44002da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "215",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "215","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f7cad40007a",
          "fp": "1",
          "name": "fail0(0)",
          "entry": "34",
          "pc": "49",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "49","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f7cad40007a",
          "fp": "1",
          "name": "fail0(1)",
          "entry": "34",
          "pc": "49",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "49","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "18",
      "tid": "3",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "2" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "invariant()",
      "context": {
        "tid": "3",
        "hvalue": "7f7ca440011a",
        "fp": "1",
        "name": "invariant()",
        "entry": "16",
        "pc": "16",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "16","xpc": "16","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "readonly": "1",
        "next": { "type": "Frame", "name": "invariant", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame invariant()",
          "explain": "pop argument () and run method \"invariant\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "invariant" } ] },
          "npc": "17",
          "fp": "1",
          "trace": [
{"pc": "17","xpc": "16","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "16"
        },

        {
          "code": "Load in_cs",
          "explain": "push value (2) of variable in_cs",
          "explain2": { "text": "push value (#+) of variable in_cs", "args": [ { "type": "int", "value": "2" } ] },
          "npc": "18",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "17"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "19",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "18"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "20",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "19"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (0, {}); insert first value into the second; push result ({ 0 })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "21",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "20"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "22",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "21"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (1, { 0 }); insert first value into the second; push result ({ 0, 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "23",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "22"
        },

        {
          "code": "2-ary in",
          "explain": "pop 2 values ({ 0, 1 }, 2); check if the second value is a member of the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the second value is a member of the first; push result (#+)", "args": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "23"
        },

        {
          "code": "Assert",
          "explain": "pop a value (False) and raise exception",
          "explain2": { "text": "pop a value (False) and raise exception", "args": [ ] },
          "npc": "24",
          "failure": "Harmony assertion failed",
          "mode": "failed",
          "pop": "1",
          "push": [ ],
          "pc": "24"
        }

      ],
      "ctxbag": {
          "7f7cad40007a": "2"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f7ca44002da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "215",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "215","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f7cad40007a",
          "fp": "1",
          "name": "fail0(0)",
          "entry": "34",
          "pc": "49",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "49","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail0(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f7cad40007a",
          "fp": "1",
          "name": "fail0(1)",
          "entry": "34",
          "pc": "49",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "49","xpc": "34","method_name": { "type": "atom", "value": "fail0" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail0(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f7cad4000da",
          "fp": "1",
          "name": "invariant()",
          "entry": "16",
          "pc": "24",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "24","xpc": "16","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
          ],
          "failure": "Harmony assertion failed",
          "this": { "type": "dict", "value": [] },
          "atomic": "1",
          "readonly": "1",
          "mode": "failed"
        }
      ]
    }

  ]
}

;
var boxSize = 10;
var timeWidth = 40;
var currentTime = 0;
var totalTime = 0;
var microsteps = [];
var megasteps = []
var threads = [];
var curMegaStep = 0;
var mestable = document.getElementById("mestable");
var threadtable = document.getElementById("threadtable");
var coderow = document.getElementById("coderow");
// var hvmrow = document.getElementById("hvmrow");
var container = document.getElementById('table-scroll');
var currOffset = 0;
var currCloc = null;

// printing contexts
var contexts = {};
var ctxGen = 0;

function json_string_list(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "[ " + result + " ]";
}

function json_string_tuple(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "(" + result + ")";
}

function json_string_set(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "{ " + result + " }";
}

function json_string_dict(obj) {
  if (obj.length == 0) {
    return "{:}"
  }

  var islist = true;
  for (var i = 0; i < obj.length; i++) {
    if (obj[i].key.type != "int" || obj[i].key.value != i.toString()) {
      islist = false;
      break;
    }
  }

  var result = "";
  if (islist) {
    for (var i = 0; i < obj.length; i++) {
      if (i != 0) {
        result += ", ";
      }
      result += json_string(obj[i].value);
    }
    if (obj.length == 1) {
      result += ",";
    }
    return "[" + result + "]";
  }

  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    var kv = obj[i];
    var k = json_string(kv.key);
    var v = json_string(kv.value);
    result += k + ": " + v;
  }
  return "{ " + result + " }";
}

function json_string_address(func, args) {
  var result = "?";
  var index = 0;
  if (func.type == "pc") {
    if (func.value == -1 || func.value == -2) {
      result += args[0].value;
      index = 1;
    }
    else if (func.value == -3) {
      result += "this." + args[0].value;
      index = 1;
    }
    else {
      result += json_string(func);
    }
  }
  else {
    result += json_string(func);
  }
  for (var i = index; i < args.length; i++) {
    result += "[" + json_string(args[i]) + "]";
  }
  return result;
}

function json_string_context(obj) {
  // TODO.  Is JSON.stringify deterministic (same context --> same string)?
  var key = JSON.stringify(obj);
  if (!(key in contexts)) {
    contexts[key] = ++ctxGen;
  }
  var output = '<span title="CONTEXT\n';
  if ("id" in obj) {
    output += "id: " + json_string(obj["id"]) + "\n";
  }
  output += "pc: " + json_string(obj["pc"]) + "\n";
  output += "vars: " + stringify_vars(obj["vars"]) + "\n";
  var atomic = "atomic" in obj && obj["atomic"]["value"] == "True";
  var stopped = "stopped" in obj && obj["stopped"]["value"] == "True";
  if (atomic || stopped) {
    output += "mode:"
    if (atomic) output += " atomic";
    if (stopped) output += " stopped";
    output += "\n";
  }
  output += "sp: " + json_string(obj["sp"]);
  return output + '" style="color:blue">C' + contexts[key] + '</span>';

  // var pc = json_string(obj.pc);
  // return "CTX(" + pc + ")";
}

function json_string(obj) {
  switch (obj.type) {
  case "bool": case "int":
    return obj.value;
  case "atom":
    return '"' + obj.value + '"';
  case "set":
    return json_string_set(obj.value);
  case "list":
    return json_string_list(obj.value);
  case "dict":
    return json_string_dict(obj.value);
  case "pc":
    return "PC(" + obj.value + ")"
  case "address":
    if ("func" in obj) {
      return json_string_address(obj.func, obj.args);
    }
    return "None";
  case "context":
    return json_string_context(obj.value);
  default:
    return JSON.stringify(obj);
  }
}

var noloc = { file: "", line: "", code: "" };

function getCode(pc) {
  var loc = state.hvm.locs[pc];
  var module = state.hvm.modules[loc.module];
  loc.file = module.file;
  loc.code = module.lines[loc.line - 1];
  return loc;
//  var locs = state.locations;
//  while (pc >= 0) {
//    s = "" + pc;
//    if (locs.hasOwnProperty(s)) {
//      return locs[s];
//    }
//    pc--;
//  }
//  return noloc;
}

function drawTimeLine(mes) {
  var c = mes.canvas.getContext("2d");
  c.beginPath();
  c.clearRect(0, 0, mes.canvas.width, mes.canvas.height);
  var t = mes.startTime;
  var yboxes = Math.floor((mes.nsteps + timeWidth - 1) / timeWidth);
  var nsteps = mes.nsteps;
  for (var y = 0; y < yboxes; y++) {
    var xboxes = nsteps > timeWidth ? timeWidth : nsteps;
    for (var x = 0; x < xboxes; x++) {
      c.fillStyle = t < currentTime ? "orange" : "white";
      c.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.rect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.stroke();
      t += 1;
    }
    nsteps -= xboxes;
  }
  mes.nextstep.innerHTML = "";
  return t;
}

function updateStatus(mes) {
  for (var i = 0; i < mes.contexts.length; i++) {
    var c = mes.contexts[i];
    if (c.tid == mes.tid) {
      if (c.mode == "terminated") {
        mes.nextstep.innerHTML = "terminated"
      }
      else if (c.hasOwnProperty("next")) {
        switch (c.next.type) {
        case "Continue":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "stopped in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line;
          break;
        case "Store":
          mes.nextstep.innerHTML = "about to store " + json_string(c.next.value) + " in variable " + c.next.var;
          break;
        case "Load":
          mes.nextstep.innerHTML = "about to load variable " + c.next.var;
          break;
        case "Assert":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "assertion failed in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + ":" + loc.code;
          mes.nextstep.style.color = "red";
          break;
        case "AtomicInc":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "about to execute in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + ":" + loc.code;
          break;
        case "Print":
          mes.nextstep.innerHTML = "about to print " + json_string(c.next.value);
          break;
        default:
           mes.nextstep.innerHTML = "about to " + state.hvm.pretty[c.pc][1];
        }
      }
      break;
    }
  }
}

function currentMegaStep() {
  if (currentTime == totalTime) {
    return microsteps[currentTime - 1].mesidx;
  }
  return microsteps[currentTime].mesidx;
}

function stringify_vars(obj) {
  var result = "";
  for (var k in obj) {
    if (false && k == "result" && obj[k].type == "address" && !("func" in obj)) {
      continue;
    }
    if (result != "") {
      result += ", ";
    }
    result += k + ": " + json_string(obj[k]);
  }
  return result;
}

function convert_var(obj) {
  if (obj.type != "dict") {
    return json_string(obj);
  }
  if (obj.value.length == 0) {
    return "";
  }
  var result = {};
  for (var i = 0; i < obj.value.length; i++) {
    var kv = obj.value[i];
    var k = json_string(kv.key);      // TODO.  convert_var???
    result[k] = convert_var(kv.value);
  }
  return result;
}

function convert_vars(obj) {
  var result = {};
  for (var k in obj) {
    result[k] = convert_var(obj[k]);
  }
  return result;
}

function method_call(m, arg) {
  var result = "";
  if (m.type == "atom") {
    result += m.value;
  }
  else {
    result += json_string(m);
  }
  if (arg.type == "list") {
    result += json_string_tuple(arg.value);
  }
  else {
    result += "(" + json_string(arg) + ")";
  }
  return result;
}

function stackTrace(tid, trace, failure) {
  var table = threads[tid].tracetable;
  table.innerHTML = "";
  if (trace.length == 0) {
    var row = table.insertRow();
    var mcell = row.insertCell();
    mcell.innerHTML = threads[tid].name;
  }
  for (var i = 0; i < trace.length; i++) {
    var row = table.insertRow();

    var mcell = row.insertCell();
    // mcell.innerHTML = trace[i].method;
    mcell.innerHTML = method_call(trace[i].method_name, trace[i].method_arg);
    switch (trace[i].calltype) {
    case "process":
        mcell.style.color = "blue";
        break;
    case "normal":
        mcell.style.color = "black";
        break;
    case "interrupt":
        mcell.style.color = "orange";
        break;
    default:
        mcell.style.color = "red";
    }

    var vcell = row.insertCell();
    // var vtext = document.createTextNode(stringify_vars(trace[i].vars));
    var vtext = document.createElement("div");
    vtext.innerHTML = stringify_vars(trace[i].vars);
    vcell.appendChild(vtext);
  }
  if (false && failure != null) {
    var row = table.insertRow();
    var fcell = row.insertCell();
    fcell.innerHTML = failure;
    fcell.colSpan = 2;
    fcell.style.color = "red";
  }
}

function addToLog(step, entry) {
  var table = megasteps[step].log;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function handleClick(e, mesIdx) {
  var x = Math.floor(e.offsetX / boxSize);
  var y = Math.floor(e.offsetY / boxSize);
  currentTime = megasteps[mesIdx].startTime + y*timeWidth + x + 1;
  run_microsteps();
}

function handleKeyPress(e) {
  switch (e.key) {
    case '0':
      currentTime = 0;
      run_microsteps();
      break;
    case 'ArrowLeft':
      if (currentTime > 0) {
        currentTime -= 1;
      }
      run_microsteps();
      break;
    case 'ArrowRight':
      if (currentTime < totalTime) {
        currentTime += 1;
      }
      run_microsteps();
      break;
    case 'ArrowUp':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      if (currentTime == mes.startTime && mesidx > 0) {
          mes = megasteps[mesidx - 1];
      }
      currentTime = mes.startTime;
      run_microsteps();
      break;
    case 'ArrowDown':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      currentTime = mes.startTime + mes.nsteps;
      if (currentTime > totalTime) {
        currentTime = totalTime;
      }
      run_microsteps();
      break;
    case 'Enter':
      if (currentTime < totalTime) {
        var cloc = getCode(microsteps[currentTime].pc);
        while (++currentTime < totalTime) {
          var nloc = getCode(microsteps[currentTime].pc);
          if (nloc.file != cloc.file || nloc.line != cloc.line || nloc.code != cloc.code) {
            break;
          }
        }
        run_microsteps();
      }
      break;
    default:
      // alert("unknown key " + e.code);
  }
}

function init_microstep(masidx, misidx) {
  var mas = state.macrosteps[masidx];
  var mis = mas.microsteps[misidx];
  var tid = mas.tid;
  var t = microsteps.length;
  megasteps[curMegaStep].contexts = mas.contexts;
  if (t > 0 && microsteps[t - 1].tid != tid) {
    curMegaStep++;
    megasteps[curMegaStep].startTime = t;
    megasteps[curMegaStep].tid = tid;
  }
  var mes = megasteps[curMegaStep];
  mes.nsteps++;
  microsteps[t] = {
    mesidx: curMegaStep,
    masidx: masidx,
    misidx: misidx,
    tid: parseInt(tid),
    pc: parseInt(mis.pc),
    // invfails: misidx == mas.microsteps.length - 1 ? mas.invfails : [],
    contexts: mas.contexts,
    hvm: mis.code,
    explain2: mis.explain2
  };
  if (misidx != 0) {
    previous = microsteps[t-1];
  }
  else {
    ctx = mas.context;
    previous = { mode: ctx.mode, };
    if (ctx.hasOwnProperty("atomic")) {
      previous.atomic = ctx["atomic"];
    }
    else {
      previous.atomic = 0;
    }
    if (ctx.hasOwnProperty("readonly")) {
      previous.readonly = ctx["readonly"];
    }
    else {
      previous.readonly = 0;
    }
    if (ctx.hasOwnProperty("interruptlevel")) {
      previous.interruptlevel = ctx["interruptlevel"];
    }
    else {
      previous.interruptlevel = 0;
    }
    if (ctx.hasOwnProperty("trace")) {
      previous.trace = ctx.trace;
    }
    else {
      previous.trace = [];
    }
    if (ctx.hasOwnProperty("fp")) {
      previous.fp = ctx.fp;
    }
    else {
      previous.fp = 0;
    }
    if (ctx.hasOwnProperty("stack")) {
      previous.stack = ctx.stack.map(x => json_string(x));
    }
    else {
      previous.stack = [];
    }
    if (mas.hasOwnProperty("shared")) {
      previous.shared = convert_vars(mas.shared);
    }
    else {
      previous.shared = {};
    }
  }

  if (mis.hasOwnProperty("npc")) {
    microsteps[t].npc = mis.npc;
  }
  else {
    microsteps[t].npc = mis.pc;
  }

  microsteps[t].code = getCode(microsteps[t].npc);

  microsteps[t].cloc = document.getElementById('C' + microsteps[t].npc);
  var npc = microsteps[t].npc - 4;
  if (npc < 0) {
    npc = 0;
  }
  microsteps[t].offset = document.getElementById('P' + npc);

  if (mis.hasOwnProperty("mode")) {
    microsteps[t].mode = mis.mode;
  }
  else {
    microsteps[t].mode = previous.mode;
  }

  if (mis.hasOwnProperty("atomic")) {
    microsteps[t].atomic = mis["atomic"];
  }
  else {
    microsteps[t].atomic = previous.atomic;
  }

  if (mis.hasOwnProperty("readonly")) {
    microsteps[t].readonly = mis["readonly"];
  }
  else {
    microsteps[t].readonly = previous.readonly;
  }

  if (mis.hasOwnProperty("interruptlevel")) {
    microsteps[t].interruptlevel = mis["interruptlevel"];
  }
  else {
    microsteps[t].interruptlevel = previous.interruptlevel;
  }

  if (mis.hasOwnProperty("choose")) {
    microsteps[t].choose = "chose " + json_string(mis["choose"]);
  }
  else {
    microsteps[t].choose = null;
  }
  if (mis.hasOwnProperty("print")) {
    microsteps[t].print = json_string(mis["print"]);
  }
  else {
    microsteps[t].print = null;
  }

  if (mis.hasOwnProperty("failure")) {
    microsteps[t].failure = mis.failure;
    microsteps[t].cloc = null;
  }
  else {
    microsteps[t].failure = null;
  }

  if (mis.hasOwnProperty("trace")) {
    microsteps[t].trace = mis.trace;
  }
  else {
    microsteps[t].trace = previous.trace;
  }

  // Update local variables
  var trl = microsteps[t].trace.length; 
  if (trl > 0 && mis.hasOwnProperty("local")) {
    // deep copy first
    microsteps[t].trace = JSON.parse(JSON.stringify(microsteps[t].trace));
    microsteps[t].trace[trl - 1].vars = mis.local;
  }

  if (mis.hasOwnProperty("shared")) {
    microsteps[t].shared = convert_vars(mis.shared);
  }
  else {
    microsteps[t].shared = previous.shared;
  }

  if (mis.hasOwnProperty("fp")) {
    microsteps[t].fp = mis.fp;
  }
  else {
    microsteps[t].fp = previous.fp;
  }
  if (mis.hasOwnProperty("pop")) {
    var n = parseInt(mis.pop);
    microsteps[t].stack = previous.stack.slice(0,
                              previous.stack.length - n);
  }
  else {
    microsteps[t].stack = previous.stack;
  }
  if (mis.hasOwnProperty("push")) {
    var vals = mis.push.map(x => json_string(x));
    microsteps[t].stack = microsteps[t].stack.concat(vals);
  }
}

function init_macrostep(i) {
  var mas = state.macrosteps[i];
  for (var j = 0; j < mas.microsteps.length; j++) {
    init_microstep(i, j);
  }
  for (var ctx = 0; ctx < mas.contexts.length; ctx++) {
    var tid = parseInt(mas.contexts[ctx].tid);
    threads[tid].name = mas.contexts[ctx].name;
  }
}

function dict_convert(d) {
  if (typeof d === "string") {
    return d;
  }
  result = "";
  for (var k in d) {
    if (result != "") {
      result += ", ";
    }
    result += dict_convert(k) + ":" + dict_convert(d[k]);;
  }
  return "{" + result + "}";
}

function get_shared(shared, path) {
  if (!shared.hasOwnProperty(path[0])) {
    return "";
  }
  if (path.length == 1) {
    return dict_convert(shared[path[0]]);
  }
  return get_shared(shared[path[0]], path.slice(1));
}

function get_status(ctx) {
  var status = ctx.mode;
  if (status != "terminated") {
    if (ctx.atomic > 0) {
      status += " atomic";
    }
    if (ctx.readonly > 0) {
      status += " read-only";
    }
    if (ctx.interruptlevel > 0) {
      status += " interrupts-disabled";
    }
  }
  return status;
}

function escapeHTML(s) {
  return s
     .replace(/&/g, "&amp;")
     .replace(/</g, "&lt;")
     .replace(/>/g, "&gt;")
     .replace(/"/g, "&quot;")
     .replace(/'/g, "&#039;");
}

function explain_expand(e) {
    var s = e.text;
    var result = "";
    var arg = 0;
    for (var i = 0; i < s.length; i++) {
      if (s[i] == '#') {
        i++;
        if (i == s.length) {
          break;
        }
        if (s[i] == '#') {
          result += '#';
        }
        else if (s[i] == '+') {
          result += json_string(e.args[arg++]);
        }
        else if (s[i] == '@') {
          var addr = json_string(e.args[arg++]);
          result += addr.slice(1);
        }
        else {
          result += json_string(e.args[parseInt(s[i])]);
        }
      }
      else {
        result += s[i];
      }
    }
    return result;
}

function run_microstep(t) {
  var mis = microsteps[t];
  var mes = megasteps[mis.mesidx];
  var mesrow = mestable.rows[mis.mesidx];
  mesrow.cells[3].innerHTML = mis.npc;

  for (var i = 0; i < vardir.length; i++) {
    mesrow.cells[i + 4].innerHTML = get_shared(mis.shared, vardir[i]);
  }

  if (mis.failure != null) {
    stackTrace(mis.tid, mis.trace, mis.failure);
  }
  else if (mis.print != null) {
    stackTrace(mis.tid, mis.trace, "print " + mis.print);
    addToLog(mis.mesidx, mis.print);
  }
  else {
    stackTrace(mis.tid, mis.trace, mis.choose);
  }

  for (var ctx = 0; ctx < mis.contexts.length; ctx++) {
    var cv = mis.contexts[ctx];
    var tid = parseInt(cv.tid);
    threads[tid].name = cv.name;
    threadtable.rows[tid].cells[1].innerHTML = get_status(cv);
    threadtable.rows[tid].cells[3].innerHTML = cv.stack.slice(cv.fp).map(x => json_string(x));
  }
  if (t != mes.startTime + mes.nsteps - 1) {
    threadtable.rows[mis.tid].cells[1].innerHTML = get_status(mis);
  }
  threadtable.rows[mis.tid].cells[3].innerHTML = mis.stack.slice(mis.fp);

//  if (mis.invfails.length > 0) {
//    var inv = mis.invfails[0];
//    code = getCode(inv.pc);
//    coderow.style.color = "red";
//    coderow.innerHTML = '<a href="' + code.file + '">' + code.module + "</a>:" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code) + " (" + inv.reason + ")";
//    mis.cloc = null;
//  }
//  else
    {
    coderow.style.color = "blue";
    if (t+1 < microsteps.length) {
      var nmis = microsteps[t+1];
      code = getCode(nmis.pc);
      var l1 = parseInt(code.line);
      var l2 = parseInt(code.endline);
      if (l1 == l2 && l1 == code.stmt[0] && l2 == code.stmt[2]) {
        var c1 = parseInt(code.column) - 1;
        var c2 = parseInt(code.endcolumn);
        var s1 = code.code.slice(0, c1);
        var s2 = code.code.slice(c1, c2);
        var s3 = code.code.slice(c2);
        coderow.innerHTML = '<a href="' + code.file + '">' + code.module + "</a>:" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(s1) + "<span style='color:green'>" + escapeHTML(s2) + "</span>" + escapeHTML(s3);
      }
      else {
        coderow.innerHTML = '<a href="' + code.file + '">' + code.module + "</a>:" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code);
      }
    }
  }

  if (mis.failure != null) {
    mes.nextstep.innerHTML = '<span style="color:red">' + mis.failure + '</span>';
  }
  else if (t+1 < microsteps.length) {
    var nmis = microsteps[t+1];
    if (nmis.tid == mis.tid) {
        mes.nextstep.innerHTML = "next: " + explain_expand(nmis.explain2);
    }
    else {
        updateStatus(mes);
    }

    // hvmrow.innerHTML = "T" + nmis.tid + "/" + nmis.pc + ": " + nmis.hvm + " (" + explain_expand(nmis.explain2) + ")"
    currCloc = document.getElementById('C' + nmis.pc);
    currOffset = document.getElementById('P' + nmis.pc);
  }
  else {
    currCloc = null;
    currOffset = mis.offset;
    updateStatus(mes);
  }
}

function run_microsteps() {
  coderow.innerHTML = "";
  // hvmrow.innerHTML = "";
  if (currCloc != null) {
    currCloc.style.color = "black";
  }
  currCloc = document.getElementById('C0');
  currOffset = document.getElementById('P0');
  for (var i = 0; i < nmegasteps; i++) {
    mestable.rows[i].cells[3].innerHTML = "";
    for (var j = 0; j < vardir.length; j++) {
      mestable.rows[i].cells[j + 4].innerHTML = "";
    }
    megasteps[i].log.innerHTML = "";
  }
  for (var tid = 0; tid < nthreads; tid++) {
    threadtable.rows[tid].cells[1].innerHTML = "init";
    stackTrace(tid, [], null);
    threadtable.rows[tid].cells[3].innerHTML = threads[tid].stack;
  }

  for (var i = 0; i < nmegasteps; i++) {
    drawTimeLine(megasteps[i]);
  }
  for (var t = 0; t < currentTime; t++) {
    run_microstep(t);
  }
  if (currentTime < microsteps.length && (currentTime == 0 ||
            microsteps[currentTime - 1].tid != microsteps[currentTime].tid)) {
    var mis = microsteps[currentTime];
    var mes = megasteps[mis.mesidx];
    mes.nextstep.innerHTML = "next: " + explain_expand(mis.explain2);
    var mesrow = mestable.rows[mis.mesidx];
    mesrow.cells[3].innerHTML = mis.pc;

    if (mis.mesidx > 0) {
      var oldrow = mestable.rows[mis.mesidx - 1];
      for (var i = 0; i < vardir.length; i++) {
        mesrow.cells[i + 4].innerHTML = oldrow.cells[i + 4].innerHTML;
      }
    }
  }
  container.scrollTop = currOffset.offsetTop;

  if (currCloc != null) {
    currCloc.style.color = "red";
  }

  var curmes = currentTime < totalTime ? microsteps[currentTime].mesidx : -1;
  for (var mes = 0; mes < nmegasteps; mes++) {
    var row = document.getElementById("mes" + mes);
    if (mes == curmes) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  var curtid = currentTime < totalTime ? microsteps[currentTime].tid : -1;
  for (var tid = 0; tid < nthreads; tid++) {
    var row = document.getElementById("thread" + tid);
    if (tid == curtid) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }
}

// Initialization starts here

for (var tid = 0; tid < nthreads; tid++) {
  threads[tid] = {
    name: "T" + tid,
    status: "normal",
    stack: [],
    stacktrace: [],
    tracetable: document.getElementById("threadinfo" + tid)
  };
}
threads[0].stack = [ "()" ]
for (let i = 0; i < nmegasteps; i++) {
  var canvas = document.getElementById("timeline" + i);
  var nextstep = document.getElementById("nextstep" + i); 
  megasteps[i] = {
    canvas: canvas,
    nextstep: nextstep,
    startTime: 0,
    nsteps: 0,
    contexts: [],
    tid: 0,
    log: document.getElementById("log" + i)
  };
  canvas.addEventListener('mousedown', function(e){handleClick(e, i)});
}
for (var j = 0; j < state.macrosteps.length; j++) {
  init_macrostep(j);
}

currentTime = totalTime = microsteps.length;
run_microsteps();
document.addEventListener('keydown', handleKeyPress);

</script>
</body>
</html>
