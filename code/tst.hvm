{
  "labels": {
    "__end__": 83
  },
  "modules": {
    "__main__": {
      "file": "tst.hny",
      "lines": [
        "sequential flags, turn",
        "flags = ( False, False )",
        "turn  = choose { 0, 1 }",
        "",
        "def peterson self:",
        "  while choose {False, True}:",
        "    flags self = True",
        "    turn = 1 - self",
        "    await (flags[1-self])",
        "           or (turn==self)",
        "",
        "    print(\"Entered\", self);",
        "    print(\"Left\", self);",
        "    flags self = False",
        "",
        "spawn peterson 0",
        "spawn peterson 1"
      ],
      "identifiers": {
        "self": "local-const",
        "this": "local-var",
        "peterson": "constant",
        "flags": "global",
        "turn": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "flags"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Jump", "pc": "71" },
    { "op": "Frame", "name": "peterson", "args": "self" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "69", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "47", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "48" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "36", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "51" },
    { "op": "Jump", "pc": "36" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "Entered" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "Left" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "20" },
    { "op": "DelVar", "value": "self" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "19" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "19" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push ?flags","push constant ?flags"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store flags","pop a value and store it in shared variable flags"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Jump 71","jump over method definition: set program counter to 71"],
    ["Frame peterson(self)","start of method peterson"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 69","pop a value and jump to 69 if the value is False"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond True 47","pop a value and jump to 47 if the value is True"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar self","push the value of self"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 48","set program counter to 48"],
    ["Push True","push constant True"],
    ["JumpCond False 36","pop a value and jump to 36 if the value is False"],
    ["Jump 51","set program counter to 51"],
    ["Jump 36","set program counter to 36"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"Entered\"","push constant \"Entered\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"Left\"","push constant \"Left\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 20","set program counter to 20"],
    ["DelVar self","delete method variable self"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push ?PC(19)","push constant ?PC(19)"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push ?PC(19)","push constant ?PC(19)"],
    ["Push 1","push constant 1"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 1, "column": 1, "endline": 18, "endcolumn": 7, "stmt": [1,1,18,7] },
    { "module": "__main__", "line": 1, "column": 12, "endline": 1, "endcolumn": 16, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 1, "endcolumn": 22, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 1, "column": 19, "endline": 1, "endcolumn": 22, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 1, "endcolumn": 22, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 2, "column": 11, "endline": 2, "endcolumn": 22, "stmt": [2,1,2,24] },
    { "module": "__main__", "line": 2, "column": 11, "endline": 2, "endcolumn": 15, "stmt": [2,1,2,24] },
    { "module": "__main__", "line": 2, "column": 11, "endline": 2, "endcolumn": 22, "stmt": [2,1,2,24] },
    { "module": "__main__", "line": 2, "column": 18, "endline": 2, "endcolumn": 22, "stmt": [2,1,2,24] },
    { "module": "__main__", "line": 2, "column": 11, "endline": 2, "endcolumn": 22, "stmt": [2,1,2,24] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 7, "stmt": [2,1,2,24] },
    { "module": "__main__", "line": 3, "column": 18, "endline": 3, "endcolumn": 21, "stmt": [3,1,3,23] },
    { "module": "__main__", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,1,3,23] },
    { "module": "__main__", "line": 3, "column": 18, "endline": 3, "endcolumn": 21, "stmt": [3,1,3,23] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 21, "stmt": [3,1,3,23] },
    { "module": "__main__", "line": 3, "column": 18, "endline": 3, "endcolumn": 21, "stmt": [3,1,3,23] },
    { "module": "__main__", "line": 3, "column": 9, "endline": 3, "endcolumn": 23, "stmt": [3,1,3,23] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 7, "stmt": [3,1,3,23] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 3, "stmt": [5,1,5,18] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 18, "stmt": [5,1,5,18] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 27, "stmt": [6,3,6,29] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 21, "stmt": [6,3,6,29] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 27, "stmt": [6,3,6,29] },
    { "module": "__main__", "line": 6, "column": 24, "endline": 6, "endcolumn": 27, "stmt": [6,3,6,29] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 27, "stmt": [6,3,6,29] },
    { "module": "__main__", "line": 6, "column": 9, "endline": 6, "endcolumn": 28, "stmt": [6,3,6,29] },
    { "module": "__main__", "line": 6, "column": 3, "endline": 6, "endcolumn": 7, "stmt": [6,3,6,29] },
    { "module": "__main__", "line": 7, "column": 5, "endline": 7, "endcolumn": 9, "stmt": [7,5,7,21] },
    { "module": "__main__", "line": 7, "column": 11, "endline": 7, "endcolumn": 14, "stmt": [7,5,7,21] },
    { "module": "__main__", "line": 7, "column": 5, "endline": 7, "endcolumn": 14, "stmt": [7,5,7,21] },
    { "module": "__main__", "line": 7, "column": 18, "endline": 7, "endcolumn": 21, "stmt": [7,5,7,21] },
    { "module": "__main__", "line": 7, "column": 5, "endline": 7, "endcolumn": 16, "stmt": [7,5,7,21] },
    { "module": "__main__", "line": 8, "column": 12, "endline": 8, "endcolumn": 12, "stmt": [8,5,8,19] },
    { "module": "__main__", "line": 8, "column": 16, "endline": 8, "endcolumn": 19, "stmt": [8,5,8,19] },
    { "module": "__main__", "line": 8, "column": 12, "endline": 8, "endcolumn": 19, "stmt": [8,5,8,19] },
    { "module": "__main__", "line": 8, "column": 5, "endline": 8, "endcolumn": 10, "stmt": [8,5,8,19] },
    { "module": "__main__", "line": 9, "column": 12, "endline": 9, "endcolumn": 24, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 9, "column": 18, "endline": 9, "endcolumn": 18, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 23, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 9, "column": 18, "endline": 9, "endcolumn": 23, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 9, "column": 12, "endline": 9, "endcolumn": 24, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 9, "column": 12, "endline": 9, "endcolumn": 24, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 9, "column": 11, "endline": 10, "endcolumn": 26, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 10, "column": 16, "endline": 10, "endcolumn": 19, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 10, "column": 22, "endline": 10, "endcolumn": 25, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 10, "column": 16, "endline": 10, "endcolumn": 25, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 10, "column": 12, "endline": 10, "endcolumn": 13, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 9, "column": 11, "endline": 10, "endcolumn": 26, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 9, "column": 5, "endline": 10, "endcolumn": 26, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 10, "column": 26, "endline": 10, "endcolumn": 26, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 10, "column": 26, "endline": 10, "endcolumn": 26, "stmt": [9,5,10,26] },
    { "module": "__main__", "line": 12, "column": 11, "endline": 12, "endcolumn": 25, "stmt": [12,5,12,26] },
    { "module": "__main__", "line": 12, "column": 11, "endline": 12, "endcolumn": 19, "stmt": [12,5,12,26] },
    { "module": "__main__", "line": 12, "column": 11, "endline": 12, "endcolumn": 25, "stmt": [12,5,12,26] },
    { "module": "__main__", "line": 12, "column": 22, "endline": 12, "endcolumn": 25, "stmt": [12,5,12,26] },
    { "module": "__main__", "line": 12, "column": 11, "endline": 12, "endcolumn": 25, "stmt": [12,5,12,26] },
    { "module": "__main__", "line": 12, "column": 5, "endline": 12, "endcolumn": 26, "stmt": [12,5,12,26] },
    { "module": "__main__", "line": 13, "column": 11, "endline": 13, "endcolumn": 22, "stmt": [13,5,13,23] },
    { "module": "__main__", "line": 13, "column": 11, "endline": 13, "endcolumn": 16, "stmt": [13,5,13,23] },
    { "module": "__main__", "line": 13, "column": 11, "endline": 13, "endcolumn": 22, "stmt": [13,5,13,23] },
    { "module": "__main__", "line": 13, "column": 19, "endline": 13, "endcolumn": 22, "stmt": [13,5,13,23] },
    { "module": "__main__", "line": 13, "column": 11, "endline": 13, "endcolumn": 22, "stmt": [13,5,13,23] },
    { "module": "__main__", "line": 13, "column": 5, "endline": 13, "endcolumn": 23, "stmt": [13,5,13,23] },
    { "module": "__main__", "line": 14, "column": 5, "endline": 14, "endcolumn": 9, "stmt": [14,5,14,22] },
    { "module": "__main__", "line": 14, "column": 11, "endline": 14, "endcolumn": 14, "stmt": [14,5,14,22] },
    { "module": "__main__", "line": 14, "column": 5, "endline": 14, "endcolumn": 14, "stmt": [14,5,14,22] },
    { "module": "__main__", "line": 14, "column": 18, "endline": 14, "endcolumn": 22, "stmt": [14,5,14,22] },
    { "module": "__main__", "line": 14, "column": 5, "endline": 14, "endcolumn": 16, "stmt": [14,5,14,22] },
    { "module": "__main__", "line": 6, "column": 3, "endline": 6, "endcolumn": 29, "stmt": [6,3,6,29] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 18, "stmt": [5,1,5,18] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 18, "stmt": [5,1,5,18] },
    { "module": "__main__", "line": 16, "column": 7, "endline": 16, "endcolumn": 14, "stmt": [16,1,16,16] },
    { "module": "__main__", "line": 16, "column": 16, "endline": 16, "endcolumn": 16, "stmt": [16,1,16,16] },
    { "module": "__main__", "line": 16, "column": 7, "endline": 16, "endcolumn": 16, "stmt": [16,1,16,16] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 16, "stmt": [16,1,16,16] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 16, "stmt": [16,1,16,16] },
    { "module": "__main__", "line": 17, "column": 7, "endline": 17, "endcolumn": 14, "stmt": [17,1,17,16] },
    { "module": "__main__", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,1,17,16] },
    { "module": "__main__", "line": 17, "column": 7, "endline": 17, "endcolumn": 16, "stmt": [17,1,17,16] },
    { "module": "__main__", "line": 17, "column": 1, "endline": 17, "endcolumn": 16, "stmt": [17,1,17,16] },
    { "module": "__main__", "line": 17, "column": 1, "endline": 17, "endcolumn": 16, "stmt": [17,1,17,16] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 18, "endcolumn": 7, "stmt": [1,1,18,7] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 18, "endcolumn": 7, "stmt": [1,1,18,7] }
  ]
}
