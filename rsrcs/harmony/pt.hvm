{
  "labels": {
    "__end__": 98
  },
  "modules": {
    "__main__": {
      "file": "pt.hny",
      "lines": [
        "in_cs = 0",
        "invariant in_cs in { 0, 1}",
        "",
        "sequential flags, turn",
        "flags = [ False, False ]",
        "turn  = choose({0,1})",
        "",
        "def thread(self):",
        "    while choose( {False, True }):",
        "        flags[self] = True",
        "        turn = 1 - self",
        "        await (not flags[1 - self]) or (turn == self)",
        "",
        "        atomically in_cs += 1",
        "        # critical",
        "        atomically in_cs -= 1",
        "",
        "        # lv critical",
        "        flags[self] = False",
        "",
        "spawn thread(0)",
        "spawn thread(1)"
      ],
      "identifiers": {
        "self": "local-const",
        "this": "local-var",
        "thread": "constant",
        "in_cs": "global",
        "flags": "global",
        "turn": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Jump", "pc": "14" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "4" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "flags"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Jump", "pc": "86" },
    { "op": "Frame", "name": "thread", "args": "self" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "84", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "62", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "63" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "50", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "66" },
    { "op": "Jump", "pc": "50" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "34" },
    { "op": "DelVar", "value": "self" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "33" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "33" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push 0","push constant 0"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["Jump 14","jump over invariant definition: set program counter to 14"],
    ["Frame invariant()","start of method invariant"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 4","test invariant"],
    ["Push ?flags","push constant ?flags"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store flags","pop a value and store it in shared variable flags"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Jump 86","jump over method definition: set program counter to 86"],
    ["Frame thread(self)","start of method thread"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 84","pop a value and jump to 84 if the value is False"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond True 62","pop a value and jump to 62 if the value is True"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar self","push the value of self"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 63","set program counter to 63"],
    ["Push True","push constant True"],
    ["JumpCond False 50","pop a value and jump to 50 if the value is False"],
    ["Jump 66","set program counter to 66"],
    ["Jump 50","set program counter to 50"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 34","set program counter to 34"],
    ["DelVar self","delete method variable self"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push ?PC(33)","push constant ?PC(33)"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push ?PC(33)","push constant ?PC(33)"],
    ["Push 1","push constant 1"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 1, "column": 1, "endline": 23, "endcolumn": 7, "stmt": [1,1,23,7] },
    { "module": "__main__", "line": 1, "column": 9, "endline": 1, "endcolumn": 9, "stmt": [1,1,1,9] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 1, "endcolumn": 7, "stmt": [1,1,1,9] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 9, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 26, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 11, "endline": 2, "endcolumn": 15, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 22, "endline": 2, "endcolumn": 25, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 22, "endline": 2, "endcolumn": 22, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 22, "endline": 2, "endcolumn": 25, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 25, "endline": 2, "endcolumn": 25, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 22, "endline": 2, "endcolumn": 25, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 11, "endline": 2, "endcolumn": 26, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 26, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 26, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 26, "stmt": [2,1,2,26] },
    { "module": "__main__", "line": 4, "column": 12, "endline": 4, "endcolumn": 16, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 22, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 19, "endline": 4, "endcolumn": 22, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 22, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 15, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 18, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 7, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 19, "stmt": [6,1,6,21] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 17, "stmt": [6,1,6,21] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 19, "stmt": [6,1,6,21] },
    { "module": "__main__", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,1,6,21] },
    { "module": "__main__", "line": 6, "column": 17, "endline": 6, "endcolumn": 19, "stmt": [6,1,6,21] },
    { "module": "__main__", "line": 6, "column": 9, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,21] },
    { "module": "__main__", "line": 6, "column": 1, "endline": 6, "endcolumn": 7, "stmt": [6,1,6,21] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 3, "stmt": [8,1,8,17] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 17, "stmt": [8,1,8,17] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,34] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 24, "stmt": [9,5,9,34] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,34] },
    { "module": "__main__", "line": 9, "column": 27, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,34] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,34] },
    { "module": "__main__", "line": 9, "column": 11, "endline": 9, "endcolumn": 33, "stmt": [9,5,9,34] },
    { "module": "__main__", "line": 9, "column": 5, "endline": 9, "endcolumn": 9, "stmt": [9,5,9,34] },
    { "module": "__main__", "line": 10, "column": 9, "endline": 10, "endcolumn": 13, "stmt": [10,9,10,26] },
    { "module": "__main__", "line": 10, "column": 15, "endline": 10, "endcolumn": 18, "stmt": [10,9,10,26] },
    { "module": "__main__", "line": 10, "column": 9, "endline": 10, "endcolumn": 19, "stmt": [10,9,10,26] },
    { "module": "__main__", "line": 10, "column": 23, "endline": 10, "endcolumn": 26, "stmt": [10,9,10,26] },
    { "module": "__main__", "line": 10, "column": 9, "endline": 10, "endcolumn": 21, "stmt": [10,9,10,26] },
    { "module": "__main__", "line": 11, "column": 16, "endline": 11, "endcolumn": 16, "stmt": [11,9,11,23] },
    { "module": "__main__", "line": 11, "column": 20, "endline": 11, "endcolumn": 23, "stmt": [11,9,11,23] },
    { "module": "__main__", "line": 11, "column": 16, "endline": 11, "endcolumn": 23, "stmt": [11,9,11,23] },
    { "module": "__main__", "line": 11, "column": 9, "endline": 11, "endcolumn": 14, "stmt": [11,9,11,23] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 34, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 26, "endline": 12, "endcolumn": 26, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 30, "endline": 12, "endcolumn": 33, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 26, "endline": 12, "endcolumn": 33, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 34, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 34, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 16, "endline": 12, "endcolumn": 34, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 15, "endline": 12, "endcolumn": 53, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 41, "endline": 12, "endcolumn": 44, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 49, "endline": 12, "endcolumn": 52, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 41, "endline": 12, "endcolumn": 52, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 37, "endline": 12, "endcolumn": 38, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 15, "endline": 12, "endcolumn": 53, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 9, "endline": 12, "endcolumn": 53, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 53, "endline": 12, "endcolumn": 53, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 12, "column": 53, "endline": 12, "endcolumn": 53, "stmt": [12,9,12,53] },
    { "module": "__main__", "line": 14, "column": 20, "endline": 14, "endcolumn": 29, "stmt": [14,20,14,29] },
    { "module": "__main__", "line": 14, "column": 20, "endline": 14, "endcolumn": 29, "stmt": [14,20,14,29] },
    { "module": "__main__", "line": 14, "column": 29, "endline": 14, "endcolumn": 29, "stmt": [14,20,14,29] },
    { "module": "__main__", "line": 14, "column": 20, "endline": 14, "endcolumn": 29, "stmt": [14,20,14,29] },
    { "module": "__main__", "line": 14, "column": 20, "endline": 14, "endcolumn": 27, "stmt": [14,20,14,29] },
    { "module": "__main__", "line": 14, "column": 20, "endline": 14, "endcolumn": 29, "stmt": [14,20,14,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 29, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 27, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 19, "column": 9, "endline": 19, "endcolumn": 13, "stmt": [19,9,19,27] },
    { "module": "__main__", "line": 19, "column": 15, "endline": 19, "endcolumn": 18, "stmt": [19,9,19,27] },
    { "module": "__main__", "line": 19, "column": 9, "endline": 19, "endcolumn": 19, "stmt": [19,9,19,27] },
    { "module": "__main__", "line": 19, "column": 23, "endline": 19, "endcolumn": 27, "stmt": [19,9,19,27] },
    { "module": "__main__", "line": 19, "column": 9, "endline": 19, "endcolumn": 21, "stmt": [19,9,19,27] },
    { "module": "__main__", "line": 9, "column": 5, "endline": 9, "endcolumn": 34, "stmt": [9,5,9,34] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 17, "stmt": [8,1,8,17] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 17, "stmt": [8,1,8,17] },
    { "module": "__main__", "line": 21, "column": 7, "endline": 21, "endcolumn": 12, "stmt": [21,1,21,15] },
    { "module": "__main__", "line": 21, "column": 14, "endline": 21, "endcolumn": 14, "stmt": [21,1,21,15] },
    { "module": "__main__", "line": 21, "column": 7, "endline": 21, "endcolumn": 15, "stmt": [21,1,21,15] },
    { "module": "__main__", "line": 21, "column": 1, "endline": 21, "endcolumn": 15, "stmt": [21,1,21,15] },
    { "module": "__main__", "line": 21, "column": 1, "endline": 21, "endcolumn": 15, "stmt": [21,1,21,15] },
    { "module": "__main__", "line": 22, "column": 7, "endline": 22, "endcolumn": 12, "stmt": [22,1,22,15] },
    { "module": "__main__", "line": 22, "column": 14, "endline": 22, "endcolumn": 14, "stmt": [22,1,22,15] },
    { "module": "__main__", "line": 22, "column": 7, "endline": 22, "endcolumn": 15, "stmt": [22,1,22,15] },
    { "module": "__main__", "line": 22, "column": 1, "endline": 22, "endcolumn": 15, "stmt": [22,1,22,15] },
    { "module": "__main__", "line": 22, "column": 1, "endline": 22, "endcolumn": 15, "stmt": [22,1,22,15] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 23, "endcolumn": 7, "stmt": [1,1,23,7] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 23, "endcolumn": 7, "stmt": [1,1,23,7] }
  ]
}
