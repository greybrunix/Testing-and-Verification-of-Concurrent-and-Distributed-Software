{
  "labels": {
    "__end__": 71
  },
  "modules": {
    "__main__": {
      "file": "b_ary_fail.hny",
      "lines": [
        "wants = [False, False]",
        "turn = 1",
        "",
        "def dekk(p_q):",
        "    while choose({False,True}):",
        "        wants[p_q] = True",
        "        while wants[(p_q - 1) % 2]:",
        "            if turn == p_q:",
        "                wants[p_q] = False",
        "                await turn == 2",
        "                wants[p_q] = True",
        "        #critical",
        "        turn = 1",
        "        wants[p_q] = False",
        "        #remaind",
        "",
        "dekk(0)",
        "dekk(1)"
      ],
      "identifiers": {
        "p_q": "local-const",
        "this": "local-var",
        "dekk": "constant",
        "wants": "global",
        "turn": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "wants"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Jump", "pc": "63" },
    { "op": "Frame", "name": "dekk", "args": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "61", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Nary", "arity": 2, "value": "%" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "53", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "23", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "41", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "47" },
    { "op": "Jump", "pc": "41" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "23" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "11" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Apply", "value": { "type": "pc", "value": "10" } },
    { "op": "Pop" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Apply", "value": { "type": "pc", "value": "10" } },
    { "op": "Pop" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store wants","pop a value and store it in shared variable wants"],
    ["Push 1","push constant 1"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Jump 63","jump over method definition: set program counter to 63"],
    ["Frame dekk(p_q)","start of method dekk"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 61","pop a value and jump to 61 if the value is False"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Push 2","push constant 2"],
    ["2-ary %","pop 2 values and push the result of applying %"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 53","pop a value and jump to 53 if the value is False"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 23","pop a value and jump to 23 if the value is False"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Load turn","push value of shared variable turn"],
    ["Push 2","push constant 2"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 41","pop a value and jump to 41 if the value is False"],
    ["Jump 47","set program counter to 47"],
    ["Jump 41","set program counter to 41"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 23","set program counter to 23"],
    ["Push 1","push constant 1"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 11","set program counter to 11"],
    ["DelVar p_q","delete method variable p_q"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push 0","push constant 0"],
    ["Apply PC(10)","call method PC(10)"],
    ["Pop","discard the top value on the stack"],
    ["Push 1","push constant 1"],
    ["Apply PC(10)","call method PC(10)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 1, "column": 1, "endline": 19, "endcolumn": 7, "stmt": [1,1,19,7] },
    { "module": "__main__", "line": 1, "column": 10, "endline": 1, "endcolumn": 21, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 1, "column": 10, "endline": 1, "endcolumn": 14, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 1, "column": 10, "endline": 1, "endcolumn": 21, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 1, "column": 17, "endline": 1, "endcolumn": 21, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 1, "column": 10, "endline": 1, "endcolumn": 21, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 1, "endcolumn": 7, "stmt": [1,1,1,22] },
    { "module": "__main__", "line": 2, "column": 8, "endline": 2, "endcolumn": 8, "stmt": [2,1,2,8] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 6, "stmt": [2,1,2,8] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 3, "stmt": [4,1,4,14] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 14, "stmt": [4,1,4,14] },
    { "module": "__main__", "line": 5, "column": 19, "endline": 5, "endcolumn": 28, "stmt": [5,5,5,31] },
    { "module": "__main__", "line": 5, "column": 19, "endline": 5, "endcolumn": 23, "stmt": [5,5,5,31] },
    { "module": "__main__", "line": 5, "column": 19, "endline": 5, "endcolumn": 28, "stmt": [5,5,5,31] },
    { "module": "__main__", "line": 5, "column": 25, "endline": 5, "endcolumn": 28, "stmt": [5,5,5,31] },
    { "module": "__main__", "line": 5, "column": 19, "endline": 5, "endcolumn": 28, "stmt": [5,5,5,31] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 30, "stmt": [5,5,5,31] },
    { "module": "__main__", "line": 5, "column": 5, "endline": 5, "endcolumn": 9, "stmt": [5,5,5,31] },
    { "module": "__main__", "line": 6, "column": 9, "endline": 6, "endcolumn": 13, "stmt": [6,9,6,25] },
    { "module": "__main__", "line": 6, "column": 15, "endline": 6, "endcolumn": 17, "stmt": [6,9,6,25] },
    { "module": "__main__", "line": 6, "column": 9, "endline": 6, "endcolumn": 18, "stmt": [6,9,6,25] },
    { "module": "__main__", "line": 6, "column": 22, "endline": 6, "endcolumn": 25, "stmt": [6,9,6,25] },
    { "module": "__main__", "line": 6, "column": 9, "endline": 6, "endcolumn": 20, "stmt": [6,9,6,25] },
    { "module": "__main__", "line": 7, "column": 15, "endline": 7, "endcolumn": 34, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 7, "column": 22, "endline": 7, "endcolumn": 24, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 7, "column": 28, "endline": 7, "endcolumn": 28, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 7, "column": 22, "endline": 7, "endcolumn": 28, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 7, "column": 33, "endline": 7, "endcolumn": 33, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 7, "column": 21, "endline": 7, "endcolumn": 33, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 7, "column": 15, "endline": 7, "endcolumn": 34, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 7, "column": 15, "endline": 7, "endcolumn": 34, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 13, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 8, "column": 16, "endline": 8, "endcolumn": 19, "stmt": [8,13,8,27] },
    { "module": "__main__", "line": 8, "column": 24, "endline": 8, "endcolumn": 26, "stmt": [8,13,8,27] },
    { "module": "__main__", "line": 8, "column": 16, "endline": 8, "endcolumn": 26, "stmt": [8,13,8,27] },
    { "module": "__main__", "line": 8, "column": 13, "endline": 8, "endcolumn": 14, "stmt": [8,13,8,27] },
    { "module": "__main__", "line": 9, "column": 17, "endline": 9, "endcolumn": 21, "stmt": [9,17,9,34] },
    { "module": "__main__", "line": 9, "column": 23, "endline": 9, "endcolumn": 25, "stmt": [9,17,9,34] },
    { "module": "__main__", "line": 9, "column": 17, "endline": 9, "endcolumn": 26, "stmt": [9,17,9,34] },
    { "module": "__main__", "line": 9, "column": 30, "endline": 9, "endcolumn": 34, "stmt": [9,17,9,34] },
    { "module": "__main__", "line": 9, "column": 17, "endline": 9, "endcolumn": 28, "stmt": [9,17,9,34] },
    { "module": "__main__", "line": 10, "column": 23, "endline": 10, "endcolumn": 26, "stmt": [10,17,10,31] },
    { "module": "__main__", "line": 10, "column": 31, "endline": 10, "endcolumn": 31, "stmt": [10,17,10,31] },
    { "module": "__main__", "line": 10, "column": 23, "endline": 10, "endcolumn": 31, "stmt": [10,17,10,31] },
    { "module": "__main__", "line": 10, "column": 17, "endline": 10, "endcolumn": 31, "stmt": [10,17,10,31] },
    { "module": "__main__", "line": 10, "column": 31, "endline": 10, "endcolumn": 31, "stmt": [10,17,10,31] },
    { "module": "__main__", "line": 10, "column": 31, "endline": 10, "endcolumn": 31, "stmt": [10,17,10,31] },
    { "module": "__main__", "line": 11, "column": 17, "endline": 11, "endcolumn": 21, "stmt": [11,17,11,33] },
    { "module": "__main__", "line": 11, "column": 23, "endline": 11, "endcolumn": 25, "stmt": [11,17,11,33] },
    { "module": "__main__", "line": 11, "column": 17, "endline": 11, "endcolumn": 26, "stmt": [11,17,11,33] },
    { "module": "__main__", "line": 11, "column": 30, "endline": 11, "endcolumn": 33, "stmt": [11,17,11,33] },
    { "module": "__main__", "line": 11, "column": 17, "endline": 11, "endcolumn": 28, "stmt": [11,17,11,33] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 35, "stmt": [7,9,7,35] },
    { "module": "__main__", "line": 13, "column": 16, "endline": 13, "endcolumn": 16, "stmt": [13,9,13,16] },
    { "module": "__main__", "line": 13, "column": 9, "endline": 13, "endcolumn": 14, "stmt": [13,9,13,16] },
    { "module": "__main__", "line": 14, "column": 9, "endline": 14, "endcolumn": 13, "stmt": [14,9,14,26] },
    { "module": "__main__", "line": 14, "column": 15, "endline": 14, "endcolumn": 17, "stmt": [14,9,14,26] },
    { "module": "__main__", "line": 14, "column": 9, "endline": 14, "endcolumn": 18, "stmt": [14,9,14,26] },
    { "module": "__main__", "line": 14, "column": 22, "endline": 14, "endcolumn": 26, "stmt": [14,9,14,26] },
    { "module": "__main__", "line": 14, "column": 9, "endline": 14, "endcolumn": 20, "stmt": [14,9,14,26] },
    { "module": "__main__", "line": 5, "column": 5, "endline": 5, "endcolumn": 31, "stmt": [5,5,5,31] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 14, "stmt": [4,1,4,14] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 14, "stmt": [4,1,4,14] },
    { "module": "__main__", "line": 17, "column": 6, "endline": 17, "endcolumn": 6, "stmt": [17,1,17,7] },
    { "module": "__main__", "line": 17, "column": 1, "endline": 17, "endcolumn": 7, "stmt": [17,1,17,7] },
    { "module": "__main__", "line": 17, "column": 1, "endline": 17, "endcolumn": 7, "stmt": [17,1,17,7] },
    { "module": "__main__", "line": 18, "column": 6, "endline": 18, "endcolumn": 6, "stmt": [18,1,18,7] },
    { "module": "__main__", "line": 18, "column": 1, "endline": 18, "endcolumn": 7, "stmt": [18,1,18,7] },
    { "module": "__main__", "line": 18, "column": 1, "endline": 18, "endcolumn": 7, "stmt": [18,1,18,7] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 19, "endcolumn": 7, "stmt": [1,1,19,7] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 19, "endcolumn": 7, "stmt": [1,1,19,7] }
  ]
}
