{
  "labels": {
    "__end__": 110
  },
  "modules": {
    "__main__": {
      "file": "dekker.hny",
      "lines": [
        "#critical reached?",
        "crit=0",
        "sequential wants, turn, counter",
        "wants = [False, False]",
        "turn = 0",
        "global counter;",
        "counter = 0",
        "I=10",
        "def dekk(p_q):",
        "\t# while True:",
        "\tvar i = 0",
        "\twhile i < I:",
        "\t# non critical",
        "\t\twants[p_q] = True # declare interest ",
        "\t\t# can enter critical section",
        "\t\twhile wants[1 - p_q]: # does another process have interest?",
        "\t\t\tif turn == (1 - p_q): # is it it's turn?",
        "\t\t\t\twants[p_q] = False",
        "\t\t\t\tawait turn == p_q # waiting for turn",
        "\t\t\t\twants[p_q] = True",
        "\t\t# enter critical section",
        "\t\tatomically crit +=1",
        "\t\t# critical",
        "\t\tcounter+=1",
        "\t\t# leaving critical",
        "\t\tatomically crit -=1",
        "\t\tturn = 1 - p_q",
        "\t\twants[p_q] = False",
        "\t\t# post protocol",
        "\t\ti+=1",
        "spawn dekk(0)",
        "spawn dekk(1)"
      ],
      "identifiers": {
        "p_q": "local-const",
        "i": "local-var",
        "this": "local-var",
        "dekk": "constant",
        "crit": "global",
        "wants": "global",
        "turn": "global",
        "counter": "global",
        "I": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "crit"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "counter" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "wants"}] },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "counter"}] },
    { "op": "Push", "value": { "type": "int", "value": 10 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "I"}] },
    { "op": "Jump", "pc": "98" },
    { "op": "Frame", "name": "dekk", "args": "p_q" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "i" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Load", "value": [{ "type": "atom", "value": "I"}] },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "95", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "64", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "34", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "52", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "58" },
    { "op": "Jump", "pc": "52" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "34" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "crit"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "crit"}] },
    { "op": "AtomicDec" },
    { "op": "Load", "value": [{ "type": "atom", "value": "counter"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "counter"}] },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "crit"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "crit"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "wants" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "i" },
    { "op": "Jump", "pc": "25" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "22" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "22" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push 0","push constant 0"],
    ["Store crit","pop a value and store it in shared variable crit"],
    ["Push ?wants","push constant ?wants"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?counter","push constant ?counter"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store wants","pop a value and store it in shared variable wants"],
    ["Push 0","push constant 0"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push 0","push constant 0"],
    ["Store counter","pop a value and store it in shared variable counter"],
    ["Push 10","push constant 10"],
    ["Store I","pop a value and store it in shared variable I"],
    ["Jump 98","jump over method definition: set program counter to 98"],
    ["Frame dekk(p_q)","start of method dekk"],
    ["Push 0","push constant 0"],
    ["StoreVar i","pop a value and store in i"],
    ["LoadVar i","push the value of i"],
    ["Load I","push value of shared variable I"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 95","pop a value and jump to 95 if the value is False"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push ?wants","push constant ?wants"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 64","pop a value and jump to 64 if the value is False"],
    ["Load turn","push value of shared variable turn"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 34","pop a value and jump to 34 if the value is False"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 52","pop a value and jump to 52 if the value is False"],
    ["Jump 58","set program counter to 58"],
    ["Jump 52","set program counter to 52"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 34","set program counter to 34"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load crit","push value of shared variable crit"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store crit","pop a value and store it in shared variable crit"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Load counter","push value of shared variable counter"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store counter","pop a value and store it in shared variable counter"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load crit","push value of shared variable crit"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store crit","pop a value and store it in shared variable crit"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ?wants","push constant ?wants"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar i","pop a value and store in i"],
    ["Jump 25","set program counter to 25"],
    ["DelVar i","delete method variable i"],
    ["DelVar p_q","delete method variable p_q"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push ?PC(22)","push constant ?PC(22)"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push ?PC(22)","push constant ?PC(22)"],
    ["Push 1","push constant 1"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 2, "column": 1, "endline": 33, "endcolumn": 7, "stmt": [2,1,33,7] },
    { "module": "__main__", "line": 2, "column": 6, "endline": 2, "endcolumn": 6, "stmt": [2,1,2,6] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 5, "stmt": [2,1,2,6] },
    { "module": "__main__", "line": 3, "column": 12, "endline": 3, "endcolumn": 16, "stmt": [3,1,3,31] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 31, "stmt": [3,1,3,31] },
    { "module": "__main__", "line": 3, "column": 19, "endline": 3, "endcolumn": 22, "stmt": [3,1,3,31] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 31, "stmt": [3,1,3,31] },
    { "module": "__main__", "line": 3, "column": 25, "endline": 3, "endcolumn": 31, "stmt": [3,1,3,31] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 31, "stmt": [3,1,3,31] },
    { "module": "__main__", "line": 4, "column": 10, "endline": 4, "endcolumn": 21, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 10, "endline": 4, "endcolumn": 14, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 10, "endline": 4, "endcolumn": 21, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 17, "endline": 4, "endcolumn": 21, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 10, "endline": 4, "endcolumn": 21, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 7, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 5, "column": 8, "endline": 5, "endcolumn": 8, "stmt": [5,1,5,8] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 6, "stmt": [5,1,5,8] },
    { "module": "__main__", "line": 7, "column": 11, "endline": 7, "endcolumn": 11, "stmt": [7,1,7,11] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 9, "stmt": [7,1,7,11] },
    { "module": "__main__", "line": 8, "column": 3, "endline": 8, "endcolumn": 4, "stmt": [8,1,8,4] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 2, "stmt": [8,1,8,4] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 3, "stmt": [9,1,9,14] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 14, "stmt": [9,1,9,14] },
    { "module": "__main__", "line": 11, "column": 10, "endline": 11, "endcolumn": 10, "stmt": [11,2,11,10] },
    { "module": "__main__", "line": 11, "column": 2, "endline": 11, "endcolumn": 10, "stmt": [11,2,11,10] },
    { "module": "__main__", "line": 12, "column": 8, "endline": 12, "endcolumn": 8, "stmt": [12,2,12,13] },
    { "module": "__main__", "line": 12, "column": 12, "endline": 12, "endcolumn": 12, "stmt": [12,2,12,13] },
    { "module": "__main__", "line": 12, "column": 8, "endline": 12, "endcolumn": 12, "stmt": [12,2,12,13] },
    { "module": "__main__", "line": 12, "column": 2, "endline": 12, "endcolumn": 6, "stmt": [12,2,12,13] },
    { "module": "__main__", "line": 14, "column": 3, "endline": 14, "endcolumn": 7, "stmt": [14,3,14,19] },
    { "module": "__main__", "line": 14, "column": 9, "endline": 14, "endcolumn": 11, "stmt": [14,3,14,19] },
    { "module": "__main__", "line": 14, "column": 3, "endline": 14, "endcolumn": 12, "stmt": [14,3,14,19] },
    { "module": "__main__", "line": 14, "column": 16, "endline": 14, "endcolumn": 19, "stmt": [14,3,14,19] },
    { "module": "__main__", "line": 14, "column": 3, "endline": 14, "endcolumn": 14, "stmt": [14,3,14,19] },
    { "module": "__main__", "line": 16, "column": 9, "endline": 16, "endcolumn": 22, "stmt": [16,3,16,23] },
    { "module": "__main__", "line": 16, "column": 15, "endline": 16, "endcolumn": 15, "stmt": [16,3,16,23] },
    { "module": "__main__", "line": 16, "column": 19, "endline": 16, "endcolumn": 21, "stmt": [16,3,16,23] },
    { "module": "__main__", "line": 16, "column": 15, "endline": 16, "endcolumn": 21, "stmt": [16,3,16,23] },
    { "module": "__main__", "line": 16, "column": 9, "endline": 16, "endcolumn": 22, "stmt": [16,3,16,23] },
    { "module": "__main__", "line": 16, "column": 9, "endline": 16, "endcolumn": 22, "stmt": [16,3,16,23] },
    { "module": "__main__", "line": 16, "column": 3, "endline": 16, "endcolumn": 7, "stmt": [16,3,16,23] },
    { "module": "__main__", "line": 17, "column": 7, "endline": 17, "endcolumn": 10, "stmt": [17,4,17,24] },
    { "module": "__main__", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,4,17,24] },
    { "module": "__main__", "line": 17, "column": 20, "endline": 17, "endcolumn": 22, "stmt": [17,4,17,24] },
    { "module": "__main__", "line": 17, "column": 16, "endline": 17, "endcolumn": 22, "stmt": [17,4,17,24] },
    { "module": "__main__", "line": 17, "column": 7, "endline": 17, "endcolumn": 23, "stmt": [17,4,17,24] },
    { "module": "__main__", "line": 17, "column": 4, "endline": 17, "endcolumn": 5, "stmt": [17,4,17,24] },
    { "module": "__main__", "line": 18, "column": 5, "endline": 18, "endcolumn": 9, "stmt": [18,5,18,22] },
    { "module": "__main__", "line": 18, "column": 11, "endline": 18, "endcolumn": 13, "stmt": [18,5,18,22] },
    { "module": "__main__", "line": 18, "column": 5, "endline": 18, "endcolumn": 14, "stmt": [18,5,18,22] },
    { "module": "__main__", "line": 18, "column": 18, "endline": 18, "endcolumn": 22, "stmt": [18,5,18,22] },
    { "module": "__main__", "line": 18, "column": 5, "endline": 18, "endcolumn": 16, "stmt": [18,5,18,22] },
    { "module": "__main__", "line": 19, "column": 11, "endline": 19, "endcolumn": 14, "stmt": [19,5,19,21] },
    { "module": "__main__", "line": 19, "column": 19, "endline": 19, "endcolumn": 21, "stmt": [19,5,19,21] },
    { "module": "__main__", "line": 19, "column": 11, "endline": 19, "endcolumn": 21, "stmt": [19,5,19,21] },
    { "module": "__main__", "line": 19, "column": 5, "endline": 19, "endcolumn": 21, "stmt": [19,5,19,21] },
    { "module": "__main__", "line": 19, "column": 19, "endline": 19, "endcolumn": 21, "stmt": [19,5,19,21] },
    { "module": "__main__", "line": 19, "column": 19, "endline": 19, "endcolumn": 21, "stmt": [19,5,19,21] },
    { "module": "__main__", "line": 20, "column": 5, "endline": 20, "endcolumn": 9, "stmt": [20,5,20,21] },
    { "module": "__main__", "line": 20, "column": 11, "endline": 20, "endcolumn": 13, "stmt": [20,5,20,21] },
    { "module": "__main__", "line": 20, "column": 5, "endline": 20, "endcolumn": 14, "stmt": [20,5,20,21] },
    { "module": "__main__", "line": 20, "column": 18, "endline": 20, "endcolumn": 21, "stmt": [20,5,20,21] },
    { "module": "__main__", "line": 20, "column": 5, "endline": 20, "endcolumn": 16, "stmt": [20,5,20,21] },
    { "module": "__main__", "line": 16, "column": 3, "endline": 16, "endcolumn": 23, "stmt": [16,3,16,23] },
    { "module": "__main__", "line": 22, "column": 14, "endline": 22, "endcolumn": 21, "stmt": [22,14,22,21] },
    { "module": "__main__", "line": 22, "column": 14, "endline": 22, "endcolumn": 21, "stmt": [22,14,22,21] },
    { "module": "__main__", "line": 22, "column": 21, "endline": 22, "endcolumn": 21, "stmt": [22,14,22,21] },
    { "module": "__main__", "line": 22, "column": 14, "endline": 22, "endcolumn": 21, "stmt": [22,14,22,21] },
    { "module": "__main__", "line": 22, "column": 14, "endline": 22, "endcolumn": 20, "stmt": [22,14,22,21] },
    { "module": "__main__", "line": 22, "column": 14, "endline": 22, "endcolumn": 21, "stmt": [22,14,22,21] },
    { "module": "__main__", "line": 24, "column": 3, "endline": 24, "endcolumn": 12, "stmt": [24,3,24,12] },
    { "module": "__main__", "line": 24, "column": 12, "endline": 24, "endcolumn": 12, "stmt": [24,3,24,12] },
    { "module": "__main__", "line": 24, "column": 3, "endline": 24, "endcolumn": 12, "stmt": [24,3,24,12] },
    { "module": "__main__", "line": 24, "column": 3, "endline": 24, "endcolumn": 11, "stmt": [24,3,24,12] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 21, "stmt": [26,14,26,21] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 21, "stmt": [26,14,26,21] },
    { "module": "__main__", "line": 26, "column": 21, "endline": 26, "endcolumn": 21, "stmt": [26,14,26,21] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 21, "stmt": [26,14,26,21] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 20, "stmt": [26,14,26,21] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 21, "stmt": [26,14,26,21] },
    { "module": "__main__", "line": 27, "column": 10, "endline": 27, "endcolumn": 10, "stmt": [27,3,27,16] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 16, "stmt": [27,3,27,16] },
    { "module": "__main__", "line": 27, "column": 10, "endline": 27, "endcolumn": 16, "stmt": [27,3,27,16] },
    { "module": "__main__", "line": 27, "column": 3, "endline": 27, "endcolumn": 8, "stmt": [27,3,27,16] },
    { "module": "__main__", "line": 28, "column": 3, "endline": 28, "endcolumn": 7, "stmt": [28,3,28,20] },
    { "module": "__main__", "line": 28, "column": 9, "endline": 28, "endcolumn": 11, "stmt": [28,3,28,20] },
    { "module": "__main__", "line": 28, "column": 3, "endline": 28, "endcolumn": 12, "stmt": [28,3,28,20] },
    { "module": "__main__", "line": 28, "column": 16, "endline": 28, "endcolumn": 20, "stmt": [28,3,28,20] },
    { "module": "__main__", "line": 28, "column": 3, "endline": 28, "endcolumn": 14, "stmt": [28,3,28,20] },
    { "module": "__main__", "line": 30, "column": 3, "endline": 30, "endcolumn": 6, "stmt": [30,3,30,6] },
    { "module": "__main__", "line": 30, "column": 3, "endline": 30, "endcolumn": 6, "stmt": [30,3,30,6] },
    { "module": "__main__", "line": 30, "column": 6, "endline": 30, "endcolumn": 6, "stmt": [30,3,30,6] },
    { "module": "__main__", "line": 30, "column": 3, "endline": 30, "endcolumn": 6, "stmt": [30,3,30,6] },
    { "module": "__main__", "line": 30, "column": 3, "endline": 30, "endcolumn": 5, "stmt": [30,3,30,6] },
    { "module": "__main__", "line": 12, "column": 2, "endline": 12, "endcolumn": 13, "stmt": [12,2,12,13] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 14, "stmt": [9,1,9,14] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 14, "stmt": [9,1,9,14] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 14, "stmt": [9,1,9,14] },
    { "module": "__main__", "line": 31, "column": 7, "endline": 31, "endcolumn": 10, "stmt": [31,1,31,13] },
    { "module": "__main__", "line": 31, "column": 12, "endline": 31, "endcolumn": 12, "stmt": [31,1,31,13] },
    { "module": "__main__", "line": 31, "column": 7, "endline": 31, "endcolumn": 13, "stmt": [31,1,31,13] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 13, "stmt": [31,1,31,13] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 13, "stmt": [31,1,31,13] },
    { "module": "__main__", "line": 32, "column": 7, "endline": 32, "endcolumn": 10, "stmt": [32,1,32,13] },
    { "module": "__main__", "line": 32, "column": 12, "endline": 32, "endcolumn": 12, "stmt": [32,1,32,13] },
    { "module": "__main__", "line": 32, "column": 7, "endline": 32, "endcolumn": 13, "stmt": [32,1,32,13] },
    { "module": "__main__", "line": 32, "column": 1, "endline": 32, "endcolumn": 13, "stmt": [32,1,32,13] },
    { "module": "__main__", "line": 32, "column": 1, "endline": 32, "endcolumn": 13, "stmt": [32,1,32,13] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 33, "endcolumn": 7, "stmt": [2,1,33,7] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 33, "endcolumn": 7, "stmt": [2,1,33,7] }
  ]
}
