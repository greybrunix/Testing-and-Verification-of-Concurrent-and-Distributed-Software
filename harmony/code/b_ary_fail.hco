{
  "nstates": 30,
  "issue": "Non-terminating state",
  "hvm": {
    "modules": {
        "__main__": {
            "file": "b_ary_fail.hny",
            "lines": [
                "#critical reached?",
                "#invariant reached_crit in {0, 1} # safety",
                "in_cs = 0",
                "#invariant   #forall (C1 C2: clients) , cs C1 /\\ cs C2 -> C1 = C2",
                "invariant  (in_cs in { 0, 1 }) and (any [entering tid for tid in [0,1]] => one_entered [0,1])",
                "sequential turn, lockTaken, flags",
                "turn = 0",
                "lockTaken = False",
                "flags = [False, False]",
                "counter = 0",
                "def fail0 p_q:",
                "	while choose {False, True}:",
                "		# non crit",
                "		#entering crit",
                "		#crit",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "",
                "		#leave crit",
                "def fail1 p_q:",
                "	while choose {False, True}:",
                "		# Enter cs",
                "		await not lockTaken",
                "		lockTaken = True",
                "		#cs",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "		#leaving cs",
                "		lockTaken = False",
                "def fail2 p_q:",
                "	while choose {False, True}:",
                "		# enter critical",
                "		turn = 1 - p_q",
                "		await turn == p_q",
                "		# critical",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "		# leaving critical",
                "		# post protocol",
                "def fail3 p_q:",
                "	while choose {False, True}:",
                "		#entering critical",
                "		flags p_q = True",
                "		await not flags (1 - p_q)",
                "		#crit",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "		#leaving",
                "		flags p_q = False",
                "def fail4 p_q:",
                "	while choose {False, True}:",
                "		while not (turn == p_q):",
                "			pass",
                "		#cs",
                "		atomically in_cs += 1",
                "		atomically in_cs -= 1",
                "		#counter += 1",
                "		turn = 1 - p_q",
                "",
                "def entering tid returns tst1:",
                "    tst1 = (turn != tid)",
                "",
                "def one_entered tids returns tst2:",
                "    var i = 0",
                "    tst2 = False",
                "    while (i < len(tids)) and (not tst2):",
                "        if cs i:",
                "            tst2 = True",
                "        i += 1",
                "",
                "def cs tid returns tst3:",
                "    tst3 =  turn == tid",
                "",
                "spawn fail2 0;",
                "spawn fail2 1;"
              ],
            "identifiers": {
                "one_entered": "constant",
                "tids": "local-const",
                "tid": "local-const",
                "lockTaken": "global",
                "i": "local-var",
                "flags": "global",
                "cs": "constant",
                "in_cs": "global",
                "fail4": "constant",
                "this": "local-var",
                "turn": "global",
                "fail0": "constant",
                "fail2": "constant",
                "fail1": "constant",
                "fail3": "constant",
                "p_q": "local-const",
                "counter": "global",
                "___": "___",
                "entering": "constant"
              }
          }
      },
    "labels": {
        "__end__": 297
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "Jump 48",
            "jump over invariant definition: set program counter to 48"
          ],
        [
            "Frame invariant()",
            "start of method invariant"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 45",
            "pop a value and jump to 45 if the value is False"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu13",
            "initialize accumulator for list comprehension: pop a value and store in $accu13"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(tid)",
            "get next element and assign to tid; push False or True depending on success"
          ],
        [
            "JumpCond False 31",
            "check if loop is done: pop a value and jump to 31 if the value is False"
          ],
        [
            "LoadVar $accu13",
            "load accumulator: push the value of $accu13"
          ],
        [
            "DelVar $accu13",
            "delete method variable $accu13"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "Apply PC(236)",
            "call method PC(236)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu13",
            "update accumulator: pop a value and store in $accu13"
          ],
        [
            "Jump 21",
            "set program counter to 21"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "LoadVar $accu13",
            "load final accumulator result: push the value of $accu13"
          ],
        [
            "DelVar $accu13",
            "delete method variable $accu13"
          ],
        [
            "1-ary any",
            "pop 1 value and push the result of applying any"
          ],
        [
            "JumpCond False 43",
            "pop a value and jump to 43 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(245)",
            "call method PC(245)"
          ],
        [
            "Jump 46",
            "set program counter to 46"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Jump 46",
            "set program counter to 46"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Invariant 4",
            "test invariant"
          ],
        [
            "Push ?turn",
            "push constant ?turn"
          ],
        [
            "Sequential",
            "sequential consistency for variable on top of stack"
          ],
        [
            "Push ?lockTaken",
            "push constant ?lockTaken"
          ],
        [
            "Sequential",
            "sequential consistency for variable on top of stack"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "Sequential",
            "sequential consistency for variable on top of stack"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store turn",
            "pop a value and store it in shared variable turn"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store lockTaken",
            "pop a value and store it in shared variable lockTaken"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Store flags",
            "pop a value and store it in shared variable flags"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store counter",
            "pop a value and store it in shared variable counter"
          ],
        [
            "Jump 285",
            "jump over method definition: set program counter to 285"
          ],
        [
            "Frame fail0(p_q)",
            "start of method fail0"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 90",
            "pop a value and jump to 90 if the value is False"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 69",
            "set program counter to 69"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 285",
            "jump over method definition: set program counter to 285"
          ],
        [
            "Frame fail1(p_q)",
            "start of method fail1"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 123",
            "pop a value and jump to 123 if the value is False"
          ],
        [
            "Load lockTaken",
            "push value of shared variable lockTaken"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 101",
            "pop a value and jump to 101 if the value is False"
          ],
        [
            "Jump 106",
            "set program counter to 106"
          ],
        [
            "Jump 101",
            "set program counter to 101"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store lockTaken",
            "pop a value and store it in shared variable lockTaken"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store lockTaken",
            "pop a value and store it in shared variable lockTaken"
          ],
        [
            "Jump 93",
            "set program counter to 93"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 285",
            "jump over method definition: set program counter to 285"
          ],
        [
            "Frame fail2(p_q)",
            "start of method fail2"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 156",
            "pop a value and jump to 156 if the value is False"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store turn",
            "pop a value and store it in shared variable turn"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 137",
            "pop a value and jump to 137 if the value is False"
          ],
        [
            "Jump 143",
            "set program counter to 143"
          ],
        [
            "Jump 137",
            "set program counter to 137"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 126",
            "set program counter to 126"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 285",
            "jump over method definition: set program counter to 285"
          ],
        [
            "Frame fail3(p_q)",
            "start of method fail3"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 200",
            "pop a value and jump to 200 if the value is False"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 172",
            "pop a value and jump to 172 if the value is False"
          ],
        [
            "Jump 182",
            "set program counter to 182"
          ],
        [
            "Jump 172",
            "set program counter to 172"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Jump 160",
            "set program counter to 160"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 285",
            "jump over method definition: set program counter to 285"
          ],
        [
            "Frame fail4(p_q)",
            "start of method fail4"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 233",
            "pop a value and jump to 233 if the value is False"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond True 216",
            "pop a value and jump to 216 if the value is True"
          ],
        [
            "Jump 211",
            "set program counter to 211"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar p_q",
            "push the value of p_q"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store turn",
            "pop a value and store it in shared variable turn"
          ],
        [
            "Jump 204",
            "set program counter to 204"
          ],
        [
            "DelVar p_q",
            "delete method variable p_q"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 285",
            "jump over method definition: set program counter to 285"
          ],
        [
            "Frame entering(tid)",
            "start of method entering"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "StoreVar tst1",
            "pop a value and store in tst1"
          ],
        [
            "ReturnOp(tst1)",
            "restore caller method state and push tst1"
          ],
        [
            "DelVar tst1",
            "delete method variable tst1"
          ],
        [
            "Jump 285",
            "jump over method definition: set program counter to 285"
          ],
        [
            "Frame one_entered(tids)",
            "start of method one_entered"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "StoreVar tst2",
            "pop a value and store in tst2"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "LoadVar tids",
            "push the value of tids"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary <",
            "pop 2 values and push the result of applying <"
          ],
        [
            "JumpCond False 258",
            "pop a value and jump to 258 if the value is False"
          ],
        [
            "LoadVar tst2",
            "push the value of tst2"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "Jump 259",
            "set program counter to 259"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "JumpCond False 272",
            "pop a value and jump to 272 if the value is False"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "Apply PC(277)",
            "call method PC(277)"
          ],
        [
            "JumpCond False 266",
            "pop a value and jump to 266 if the value is False"
          ],
        [
            "DelVar tst2",
            "delete method variable tst2"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "StoreVar tst2",
            "pop a value and store in tst2"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Jump 250",
            "set program counter to 250"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar tids",
            "delete method variable tids"
          ],
        [
            "ReturnOp(tst2)",
            "restore caller method state and push tst2"
          ],
        [
            "DelVar tst2",
            "delete method variable tst2"
          ],
        [
            "Jump 285",
            "jump over method definition: set program counter to 285"
          ],
        [
            "Frame cs(tid)",
            "start of method cs"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "StoreVar tst3",
            "pop a value and store in tst3"
          ],
        [
            "ReturnOp(tst3)",
            "restore caller method state and push tst3"
          ],
        [
            "DelVar tst3",
            "delete method variable tst3"
          ],
        [
            "Push ?PC(125)",
            "push constant ?PC(125)"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Push ?PC(125)",
            "push constant ?PC(125)"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 76,
            "stmt": [
                3,
                1,
                76,
                7
              ],
            "line": 3,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                9
              ],
            "line": 3,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                9
              ],
            "line": 3,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 93,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 93,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 69,
            "column": 67
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 67,
            "column": 67
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 69,
            "column": 67
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 69,
            "column": 69
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 69,
            "column": 67
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 49,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 49,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 49,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 53,
            "column": 51
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 53,
            "column": 51
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 53,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 70
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 70,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 71,
            "column": 37
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 92,
            "column": 37
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 91,
            "column": 89
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 89,
            "column": 89
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 91,
            "column": 89
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 91,
            "column": 91
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 91,
            "column": 89
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 92,
            "column": 76
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 74,
            "column": 73
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 92,
            "column": 37
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 93,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 93,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 93,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                93
              ],
            "line": 5,
            "endcolumn": 93,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                33
              ],
            "line": 6,
            "endcolumn": 15,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                33
              ],
            "line": 6,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                33
              ],
            "line": 6,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                33
              ],
            "line": 6,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                33
              ],
            "line": 6,
            "endcolumn": 33,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                33
              ],
            "line": 6,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                8
              ],
            "line": 7,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                8
              ],
            "line": 7,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                17
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                17
              ],
            "line": 8,
            "endcolumn": 11,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 21,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 21,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 21,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 21,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                11
              ],
            "line": 10,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                11
              ],
            "line": 10,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                14
              ],
            "line": 11,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                14
              ],
            "line": 11,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                14,
                16,
                23
              ],
            "line": 16,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                14,
                16,
                23
              ],
            "line": 16,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                14,
                16,
                23
              ],
            "line": 16,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                14,
                16,
                23
              ],
            "line": 16,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                14,
                16,
                23
              ],
            "line": 16,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                14,
                16,
                23
              ],
            "line": 16,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                14,
                17,
                23
              ],
            "line": 17,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                2,
                12,
                28
              ],
            "line": 12,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                14
              ],
            "line": 11,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                14
              ],
            "line": 20,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                14
              ],
            "line": 20,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                3,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                3,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                3,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                3,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                3,
                23,
                21
              ],
            "line": 23,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                3,
                24,
                18
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                3,
                24,
                18
              ],
            "line": 24,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                14,
                26,
                23
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                14,
                26,
                23
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                14,
                26,
                23
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                14,
                26,
                23
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                14,
                26,
                23
              ],
            "line": 26,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                14,
                26,
                23
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                14,
                27,
                23
              ],
            "line": 27,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                3,
                29,
                19
              ],
            "line": 29,
            "endcolumn": 19,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                3,
                29,
                19
              ],
            "line": 29,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                2,
                21,
                28
              ],
            "line": 21,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                14
              ],
            "line": 20,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                14
              ],
            "line": 30,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                14
              ],
            "line": 30,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                2,
                31,
                28
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                2,
                31,
                28
              ],
            "line": 31,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                2,
                31,
                28
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                2,
                31,
                28
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                2,
                31,
                28
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                2,
                31,
                28
              ],
            "line": 31,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                2,
                31,
                28
              ],
            "line": 31,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                3,
                33,
                16
              ],
            "line": 33,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                3,
                33,
                16
              ],
            "line": 33,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                3,
                33,
                16
              ],
            "line": 33,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                3,
                33,
                16
              ],
            "line": 33,
            "endcolumn": 8,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 19,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 19,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 19,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                3,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 19,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                14,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                14,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                14,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                14,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                14,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                14,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                14,
                37,
                23
              ],
            "line": 37,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                2,
                31,
                28
              ],
            "line": 31,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                14
              ],
            "line": 30,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                14
              ],
            "line": 30,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                1,
                40,
                14
              ],
            "line": 40,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                1,
                40,
                14
              ],
            "line": 40,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                2,
                41,
                28
              ],
            "line": 41,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                2,
                41,
                28
              ],
            "line": 41,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                2,
                41,
                28
              ],
            "line": 41,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                2,
                41,
                28
              ],
            "line": 41,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                2,
                41,
                28
              ],
            "line": 41,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                2,
                41,
                28
              ],
            "line": 41,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                2,
                41,
                28
              ],
            "line": 41,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                18
              ],
            "line": 43,
            "endcolumn": 7,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                18
              ],
            "line": 43,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                18
              ],
            "line": 43,
            "endcolumn": 11,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                18
              ],
            "line": 43,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                3,
                43,
                18
              ],
            "line": 43,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 27,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 27,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 44,
            "stmt": [
                44,
                3,
                44,
                27
              ],
            "line": 44,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 46,
            "stmt": [
                46,
                14,
                46,
                23
              ],
            "line": 46,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 47,
            "stmt": [
                47,
                14,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 7,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 11,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 19,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 49,
            "stmt": [
                49,
                3,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                2,
                41,
                28
              ],
            "line": 41,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                1,
                40,
                14
              ],
            "line": 40,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                1,
                40,
                14
              ],
            "line": 40,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                14
              ],
            "line": 50,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                14
              ],
            "line": 50,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                2,
                51,
                28
              ],
            "line": 51,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                2,
                51,
                28
              ],
            "line": 51,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                2,
                51,
                28
              ],
            "line": 51,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                2,
                51,
                28
              ],
            "line": 51,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                2,
                51,
                28
              ],
            "line": 51,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                2,
                51,
                28
              ],
            "line": 51,
            "endcolumn": 27,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                2,
                51,
                28
              ],
            "line": 51,
            "endcolumn": 6,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                3,
                52,
                26
              ],
            "line": 52,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                3,
                52,
                26
              ],
            "line": 52,
            "endcolumn": 24,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                3,
                52,
                26
              ],
            "line": 52,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                3,
                52,
                26
              ],
            "line": 52,
            "endcolumn": 7,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 52,
            "stmt": [
                52,
                3,
                52,
                26
              ],
            "line": 52,
            "endcolumn": 26,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                14,
                55,
                23
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                14,
                55,
                23
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                14,
                55,
                23
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                14,
                55,
                23
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                14,
                55,
                23
              ],
            "line": 55,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 55,
            "stmt": [
                55,
                14,
                55,
                23
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                56,
                14,
                56,
                23
              ],
            "line": 56,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                56,
                14,
                56,
                23
              ],
            "line": 56,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                56,
                14,
                56,
                23
              ],
            "line": 56,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                56,
                14,
                56,
                23
              ],
            "line": 56,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                56,
                14,
                56,
                23
              ],
            "line": 56,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 56,
            "stmt": [
                56,
                14,
                56,
                23
              ],
            "line": 56,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 58,
            "stmt": [
                58,
                3,
                58,
                16
              ],
            "line": 58,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 58,
            "stmt": [
                58,
                3,
                58,
                16
              ],
            "line": 58,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 58,
            "stmt": [
                58,
                3,
                58,
                16
              ],
            "line": 58,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 58,
            "stmt": [
                58,
                3,
                58,
                16
              ],
            "line": 58,
            "endcolumn": 8,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 51,
            "stmt": [
                51,
                2,
                51,
                28
              ],
            "line": 51,
            "endcolumn": 28,
            "column": 2
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                14
              ],
            "line": 50,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                14
              ],
            "line": 50,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                30
              ],
            "line": 60,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                30
              ],
            "line": 60,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 23,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                30
              ],
            "line": 60,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                30
              ],
            "line": 60,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                13
              ],
            "line": 64,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                13
              ],
            "line": 64,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 65,
            "stmt": [
                65,
                5,
                65,
                16
              ],
            "line": 65,
            "endcolumn": 16,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 65,
            "stmt": [
                65,
                5,
                65,
                16
              ],
            "line": 65,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 24,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 24,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 40,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 39,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 29,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 40,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 67,
            "stmt": [
                67,
                9,
                67,
                16
              ],
            "line": 67,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 67,
            "stmt": [
                67,
                9,
                67,
                16
              ],
            "line": 67,
            "endcolumn": 15,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 67,
            "stmt": [
                67,
                9,
                67,
                16
              ],
            "line": 67,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 68,
            "stmt": [
                68,
                13,
                68,
                23
              ],
            "line": 68,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 68,
            "stmt": [
                68,
                13,
                68,
                23
              ],
            "line": 68,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 68,
            "stmt": [
                68,
                13,
                68,
                23
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 69,
            "stmt": [
                69,
                9,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 69,
            "stmt": [
                69,
                9,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 69,
            "stmt": [
                69,
                9,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 69,
            "stmt": [
                69,
                9,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 69,
            "stmt": [
                69,
                9,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 66,
            "stmt": [
                66,
                5,
                66,
                41
              ],
            "line": 66,
            "endcolumn": 41,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 71,
            "stmt": [
                71,
                1,
                71,
                24
              ],
            "line": 71,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 71,
            "stmt": [
                71,
                1,
                71,
                24
              ],
            "line": 71,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                23
              ],
            "line": 72,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                23
              ],
            "line": 72,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                23
              ],
            "line": 72,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                23
              ],
            "line": 72,
            "endcolumn": 23,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                23
              ],
            "line": 72,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 71,
            "stmt": [
                71,
                1,
                71,
                24
              ],
            "line": 71,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 71,
            "stmt": [
                71,
                1,
                71,
                24
              ],
            "line": 71,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 74,
            "stmt": [
                74,
                1,
                74,
                13
              ],
            "line": 74,
            "endcolumn": 11,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 74,
            "stmt": [
                74,
                1,
                74,
                13
              ],
            "line": 74,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 74,
            "stmt": [
                74,
                1,
                74,
                13
              ],
            "line": 74,
            "endcolumn": 13,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 74,
            "stmt": [
                74,
                1,
                74,
                13
              ],
            "line": 74,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 74,
            "stmt": [
                74,
                1,
                74,
                13
              ],
            "line": 74,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 75,
            "stmt": [
                75,
                1,
                75,
                13
              ],
            "line": 75,
            "endcolumn": 11,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 75,
            "stmt": [
                75,
                1,
                75,
                13
              ],
            "line": 75,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 75,
            "stmt": [
                75,
                1,
                75,
                13
              ],
            "line": 75,
            "endcolumn": 13,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 75,
            "stmt": [
                75,
                1,
                75,
                13
              ],
            "line": 75,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 75,
            "stmt": [
                75,
                1,
                75,
                13
              ],
            "line": 75,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 76,
            "stmt": [
                3,
                1,
                76,
                7
              ],
            "line": 3,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 76,
            "stmt": [
                3,
                1,
                76,
                7
              ],
            "line": 3,
            "endcolumn": 7,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "48",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "invariant",
            "op": "Frame"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "45",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu13",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "tid",
            "op": "Cut"
          },
        {
            "pc": "31",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu13",
            "op": "LoadVar"
          },
        {
            "value": "$accu13",
            "op": "DelVar"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "236"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu13",
            "op": "StoreVar"
          },
        {
            "pc": "21",
            "op": "Jump"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "value": "$accu13",
            "op": "LoadVar"
          },
        {
            "value": "$accu13",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "any",
            "op": "Nary"
          },
        {
            "pc": "43",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "245"
              },
            "op": "Apply"
          },
        {
            "pc": "46",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "pc": "46",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Assert"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "4",
            "op": "Invariant",
            "pre": "False"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "turn"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "op": "Sequential"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "lockTaken"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "op": "Sequential"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "op": "Sequential"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "lockTaken"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "flags"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "counter"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "285",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail0",
            "op": "Frame"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "90",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "69",
            "op": "Jump"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "285",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail1",
            "op": "Frame"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "123",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "lockTaken"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "101",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "106",
            "op": "Jump"
          },
        {
            "pc": "101",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "lockTaken"
                  }
              ],
            "op": "Store"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "lockTaken"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "93",
            "op": "Jump"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "285",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail2",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "156",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Store"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "137",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "143",
            "op": "Jump"
          },
        {
            "pc": "137",
            "op": "Jump"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "126",
            "op": "Jump"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "285",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail3",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "200",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "172",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "182",
            "op": "Jump"
          },
        {
            "pc": "172",
            "op": "Jump"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "pc": "160",
            "op": "Jump"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "285",
            "op": "Jump"
          },
        {
            "args": "p_q",
            "name": "fail4",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "233",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "216",
            "cond": {
                "type": "bool",
                "value": "True"
              },
            "op": "JumpCond"
          },
        {
            "pc": "211",
            "op": "Jump"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "p_q",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "204",
            "op": "Jump"
          },
        {
            "value": "p_q",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "285",
            "op": "Jump"
          },
        {
            "args": "tid",
            "name": "entering",
            "op": "Frame"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "value": "tst1",
            "op": "StoreVar"
          },
        {
            "result": "tst1",
            "op": "Return"
          },
        {
            "value": "tst1",
            "op": "DelVar"
          },
        {
            "pc": "285",
            "op": "Jump"
          },
        {
            "args": "tids",
            "name": "one_entered",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": "tst2",
            "op": "StoreVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "tids",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "<",
            "op": "Nary"
          },
        {
            "pc": "258",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "tst2",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "259",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "pc": "272",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "277"
              },
            "op": "Apply"
          },
        {
            "pc": "266",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "tst2",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "value": "tst2",
            "op": "StoreVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "pc": "250",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "tids",
            "op": "DelVar"
          },
        {
            "result": "tst2",
            "op": "Return"
          },
        {
            "value": "tst2",
            "op": "DelVar"
          },
        {
            "pc": "285",
            "op": "Jump"
          },
        {
            "args": "tid",
            "name": "cs",
            "op": "Frame"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "value": "tst3",
            "op": "StoreVar"
          },
        {
            "result": "tst3",
            "op": "Return"
          },
        {
            "value": "tst3",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "125"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "125"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "55e7e62c3a9a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1"
        },

        {
          "code": "Store in_cs",
          "explain": "pop value (0) and store into variable in_cs",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "in_cs" } ] } ] },
          "shared": { "in_cs": { "type": "int", "value": "0" } },
          "npc": "3",
          "pop": "1",
          "push": [ ],
          "pc": "2"
        },

        {
          "code": "Jump 48",
          "explain": "jump over invariant definition: set program counter to 48",
          "explain2": { "text": "jump over invariant definition: set program counter to 48", "args": [] },
          "npc": "48",
          "push": [ ],
          "pc": "3"
        },

        {
          "code": "Invariant 4",
          "explain": "test invariant",
          "explain2": { "text": "test invariant", "args": [] },
          "npc": "49",
          "push": [ ],
          "pc": "48"
        },

        {
          "code": "Push ?turn",
          "explain": "push constant ?turn",
          "explain2": { "text": "push constant ?turn", "args": [] },
          "npc": "50",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" } ] } ],
          "pc": "49"
        },

        {
          "code": "Sequential",
          "explain": "sequential consistency for variable on top of stack",
          "explain2": { "text": "sequential consistency for variable on top of stack", "args": [] },
          "npc": "51",
          "pop": "1",
          "push": [ ],
          "pc": "50"
        },

        {
          "code": "Push ?lockTaken",
          "explain": "push constant ?lockTaken",
          "explain2": { "text": "push constant ?lockTaken", "args": [] },
          "npc": "52",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "lockTaken" } ] } ],
          "pc": "51"
        },

        {
          "code": "Sequential",
          "explain": "sequential consistency for variable on top of stack",
          "explain2": { "text": "sequential consistency for variable on top of stack", "args": [] },
          "npc": "53",
          "pop": "1",
          "push": [ ],
          "pc": "52"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "54",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "53"
        },

        {
          "code": "Sequential",
          "explain": "sequential consistency for variable on top of stack",
          "explain2": { "text": "sequential consistency for variable on top of stack", "args": [] },
          "npc": "55",
          "pop": "1",
          "push": [ ],
          "pc": "54"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "56",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "55"
        },

        {
          "code": "Store turn",
          "explain": "pop value (0) and store into variable turn",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" } ] } ] },
          "shared": { "in_cs": { "type": "int", "value": "0" }, "turn": { "type": "int", "value": "0" } },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "58",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "57"
        },

        {
          "code": "Store lockTaken",
          "explain": "pop value (False) and store into variable lockTaken",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "bool", "value": "False" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "lockTaken" } ] } ] },
          "shared": { "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
          "npc": "59",
          "pop": "1",
          "push": [ ],
          "pc": "58"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "60",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "59"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "61",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "60"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, []); insert first value into the second; push result ([False])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "61"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "63",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "62"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, [False]); insert first value into the second; push result ([False, False])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "list", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ] },
          "npc": "64",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ],
          "pc": "63"
        },

        {
          "code": "Store flags",
          "explain": "pop value ([False, False]) and store into variable flags",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ] },
          "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
          "npc": "65",
          "pop": "1",
          "push": [ ],
          "pc": "64"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "66",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "65"
        },

        {
          "code": "Store counter",
          "explain": "pop value (0) and store into variable counter",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "counter" } ] } ] },
          "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
          "npc": "67",
          "pop": "1",
          "push": [ ],
          "pc": "66"
        },

        {
          "code": "Jump 285",
          "explain": "jump over method definition: set program counter to 285",
          "explain2": { "text": "jump over method definition: set program counter to 285", "args": [] },
          "npc": "285",
          "push": [ ],
          "pc": "67"
        },

        {
          "code": "Push ?PC(125)",
          "explain": "push constant ?PC(125)",
          "explain2": { "text": "push constant ?PC(125)", "args": [] },
          "npc": "286",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [ ] } ],
          "pc": "285"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "287",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "286"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?PC(125)); push result (?PC(125)[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "288",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [{ "type": "int", "value": "0" } ] } ],
          "pc": "287"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "289",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "288"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (0), and pc (125: \"fail2\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (125: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "0" }, { "type": "atom", "value": "fail2" } ] },
          "npc": "290",
          "pop": "2",
          "push": [ ],
          "pc": "289"
        },

        {
          "code": "Push ?PC(125)",
          "explain": "push constant ?PC(125)",
          "explain2": { "text": "push constant ?PC(125)", "args": [] },
          "npc": "291",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [ ] } ],
          "pc": "290"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "292",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "291"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(125)); push result (?PC(125)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "293",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "292"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "294",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "293"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (125: \"fail2\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (125: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "fail2" } ] },
          "npc": "295",
          "pop": "2",
          "push": [ ],
          "pc": "294"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "295",
          "mode": "terminated",
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "295"
        }

      ],
      "ctxbag": {
          "7fa2ea3f725a": "1",
          "7fa2ea3f72aa": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fa2ea3f72da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "295",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "295","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7fa2ea3f725a",
          "fp": "1",
          "name": "fail2(0)",
          "entry": "125",
          "pc": "125",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "125","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail2", "args": "p_q", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7fa2ea3f72aa",
          "fp": "1",
          "name": "fail2(1)",
          "entry": "125",
          "pc": "125",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "125","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail2", "args": "p_q", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3",
      "tid": "2",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail2(1)",
      "context": {
        "tid": "2",
        "hvalue": "7fa2ea3f72aa",
        "fp": "1",
        "name": "fail2(1)",
        "entry": "125",
        "pc": "125",
        "sp": "1",
        "stack": [{ "type": "int", "value": "1" }],
        "trace": [
{"pc": "125","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "fail2", "args": "p_q", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame fail2(p_q)",
          "explain": "pop argument (1), assign to p_q, and run method \"fail2\"",
          "explain2": { "text": "pop argument (#+), assign to p_q, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "fail2" } ] },
          "npc": "126",
          "fp": "1",
          "trace": [
{"pc": "126","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "local": { "p_q": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "125"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "127",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "126"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "128",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "127"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (False, {}); insert first value into the second; push result ({ False })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "129",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "128"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "130",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "129"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "131",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "130"
        }

      ],
      "ctxbag": {
          "7fa2ea3f725a": "1",
          "7fa2f03fd0aa": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fa2ea3f72da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "295",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "295","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7fa2ea3f725a",
          "fp": "1",
          "name": "fail2(0)",
          "entry": "125",
          "pc": "125",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "125","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail2", "args": "p_q", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7fa2f03fd0aa",
          "fp": "1",
          "name": "fail2(1)",
          "entry": "125",
          "pc": "131",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }],
          "trace": [
{"pc": "131","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "6",
      "tid": "2",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail2(1)",
      "choice": { "type": "bool", "value": "False" },
      "context": {
        "tid": "2",
        "hvalue": "7fa2f03fd0aa",
        "fp": "1",
        "name": "fail2(1)",
        "entry": "125",
        "pc": "131",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }],
        "trace": [
{"pc": "131","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "1" } },"sp": 0}
        ],
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ False, True }) with choice (False)",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "False" } ] },
          "choose": { "type": "bool", "value": "False" },
          "npc": "132",
          "fp": "1",
          "trace": [
{"pc": "132","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "131"
        },

        {
          "code": "JumpCond False 156",
          "explain": "pop value (False), compare to False, and jump to 156 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 156 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "156",
          "pop": "1",
          "push": [ ],
          "pc": "132"
        },

        {
          "code": "DelVar p_q",
          "explain": "delete method variable p_q",
          "explain2": { "text": "delete method variable p_q", "args": [] },
          "npc": "157",
          "local": { },
          "push": [ ],
          "pc": "156"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "157",
          "mode": "terminated",
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "157"
        }

      ],
      "ctxbag": {
          "7fa2ea3f725a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fa2ea3f72da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "295",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "295","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7fa2ea3f725a",
          "fp": "1",
          "name": "fail2(0)",
          "entry": "125",
          "pc": "125",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "125","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "fail2", "args": "p_q", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7fa2f03fd40a",
          "fp": "1",
          "name": "fail2(1)",
          "entry": "125",
          "pc": "157",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "157","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "mode": "terminated"
        }
      ]
    },
    {
      "id": "11",
      "tid": "1",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail2(0)",
      "context": {
        "tid": "1",
        "hvalue": "7fa2ea3f725a",
        "fp": "1",
        "name": "fail2(0)",
        "entry": "125",
        "pc": "125",
        "sp": "1",
        "stack": [{ "type": "int", "value": "0" }],
        "trace": [
{"pc": "125","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "fail2", "args": "p_q", "value": { "type": "int", "value": "0" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame fail2(p_q)",
          "explain": "pop argument (0), assign to p_q, and run method \"fail2\"",
          "explain2": { "text": "pop argument (#+), assign to p_q, and run method #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "fail2" } ] },
          "npc": "126",
          "fp": "1",
          "trace": [
{"pc": "126","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "local": { "p_q": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "125"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "127",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "126"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "128",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "127"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (False, {}); insert first value into the second; push result ({ False })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "129",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "128"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "130",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "129"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "131",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "130"
        }

      ],
      "ctxbag": {
          "7fa2f03fd05a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fa2ea3f72da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "295",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "295","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7fa2f03fd05a",
          "fp": "1",
          "name": "fail2(0)",
          "entry": "125",
          "pc": "131",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }],
          "trace": [
{"pc": "131","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } },
          "mode": "choosing"
        },
        {
          "tid": "2",
          "hvalue": "7fa2f03fd40a",
          "fp": "1",
          "name": "fail2(1)",
          "entry": "125",
          "pc": "157",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "157","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "mode": "terminated"
        }
      ]
    },
    {
      "id": "16",
      "tid": "1",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail2(0)",
      "choice": { "type": "bool", "value": "True" },
      "context": {
        "tid": "1",
        "hvalue": "7fa2f03fd05a",
        "fp": "1",
        "name": "fail2(0)",
        "entry": "125",
        "pc": "131",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }],
        "trace": [
{"pc": "131","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
        ],
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ False, True }) with choice (True)",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "True" } ] },
          "choose": { "type": "bool", "value": "True" },
          "npc": "132",
          "fp": "1",
          "trace": [
{"pc": "132","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "131"
        },

        {
          "code": "JumpCond False 156",
          "explain": "pop value (True), compare to False, and jump to 156 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 156 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "133",
          "pop": "1",
          "push": [ ],
          "pc": "132"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "134",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "133"
        },

        {
          "code": "LoadVar p_q",
          "explain": "push value (0) of variable \"p_q\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "p_q" } ] },
          "npc": "135",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "134"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (0, 1); the second integer minus the first; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] },
          "npc": "136",
          "pop": "1",
          "push": [ ],
          "pc": "135"
        }

      ],
      "ctxbag": {
          "7fa2f03fd43a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fa2ea3f72da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "295",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "295","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7fa2f03fd43a",
          "fp": "1",
          "name": "fail2(0)",
          "entry": "125",
          "pc": "136",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "136","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "next": { "type": "Store", "var": "turn", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7fa2f03fd40a",
          "fp": "1",
          "name": "fail2(1)",
          "entry": "125",
          "pc": "157",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "157","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "mode": "terminated"
        }
      ]
    },
    {
      "id": "21",
      "tid": "1",
      "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "0" } },
      "name": "fail2(0)",
      "context": {
        "tid": "1",
        "hvalue": "7fa2f03fd43a",
        "fp": "1",
        "name": "fail2(0)",
        "entry": "125",
        "pc": "136",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "1" }],
        "trace": [
{"pc": "136","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
        ],
        "next": { "type": "Store", "var": "turn", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store turn",
          "explain": "pop value (1) and store into variable turn",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" } ] } ] },
          "shared": { "counter": { "type": "int", "value": "0" }, "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "lockTaken": { "type": "bool", "value": "False" }, "turn": { "type": "int", "value": "1" } },
          "npc": "137",
          "fp": "1",
          "trace": [
{"pc": "137","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ ],
          "pc": "136"
        }

      ],
      "ctxbag": {
          "7fa2ee3fb07a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fa2ea3f72da",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "295",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "295","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7fa2ee3fb07a",
          "fp": "1",
          "name": "fail2(0)",
          "entry": "125",
          "pc": "137",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "137","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "0" },
"method": "fail2(0)","calltype": "process","vars":{ "p_q": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "next": { "type": "Load", "var": "turn" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7fa2f03fd40a",
          "fp": "1",
          "name": "fail2(1)",
          "entry": "125",
          "pc": "157",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "157","xpc": "125","method_name": { "type": "atom", "value": "fail2" },
"method_arg": { "type": "int", "value": "1" },
"method": "fail2(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "mode": "terminated"
        }
      ]
    }

  ]
}
