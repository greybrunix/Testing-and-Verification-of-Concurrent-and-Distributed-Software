{
  "nstates": 93368,
  "issue": "Data race (?counter)",
  "hvm": {
    "modules": {
        "alloc": {
            "file": "/home/pereirics/venv3.7/lib/python3.7/site-packages/harmony_model_checker/modules/alloc.hny",
            "lines": [
                "pool = {:}",
                "next = 0",
                "",
                "# builtin malloc \"alloc$malloc\"",
                "# TODO.  builtin malloc temporarily disabled",
                "def malloc(v) returns copy:",
                "    atomically:",
                "        pool[next] = v",
                "        copy = ?pool[next]",
                "        next += 1",
                "",
                "# Commented out code tests for bad frees, but can lead to data races",
                "def free(r):",
                "    atomically:",
                "       # let poolcopy = pool:",
                "            del !r",
                "       #    assert poolcopy != pool, .bad_free",
                "",
                "def leak_check():",
                "    assert pool == {:}, .alloc_leak"
              ],
            "identifiers": {
                "free": "constant",
                "this": "local-var",
                "v": "local-const",
                "malloc": "constant",
                "next": "global",
                "leak_check": "constant",
                "r": "local-const",
                "pool": "global",
                "___": "___"
              }
          },
        "bag": {
            "file": "/home/pereirics/venv3.7/lib/python3.7/site-packages/harmony_model_checker/modules/bag.hny",
            "lines": [
                "def empty() returns bg:",
                "    bg = {:}",
                "",
                "def fromSet(s) returns bg:",
                "    bg = { elt:1 for elt in s }",
                "",
                "def fromList(a) returns bg:",
                "    bg = {:}",
                "    for v in a:",
                "        if v in bg:",
                "            bg[v] += 1",
                "        else:",
                "            bg[v] = 1",
                "",
                "builtin multiplicity \"bag$multiplicity\"",
                "def multiplicity(bg, elt) returns count:",
                "    if elt in bg:",
                "        count = bg[elt]",
                "    else:",
                "        count = 0",
                "",
                "builtin size \"bag$size\"",
                "def size(bg) returns count:",
                "    count = 0",
                "    for _:c in bg:",
                "        count += c",
                "",
                "builtin bmin \"bag$bmin\"",
                "def bmin(bg) returns count:",
                "    assert bg != {:}",
                "    count = min(keys(bg))",
                "",
                "builtin bmax \"bag$bmax\"",
                "def bmax(bg) returns count:",
                "    assert bg != {:}",
                "    count = max(keys(bg))",
                "",
                "def bchoose(bg) returns elt:",
                "    elt = choose(keys(bg))",
                "",
                "builtin add \"bag$add\"",
                "def add(bg, elt) returns result:",
                "    result = bg",
                "    if elt in result:",
                "        result[elt] += 1",
                "    else:",
                "        result[elt] = 1",
                "",
                "builtin remove \"bag$remove\"",
                "def remove(bg, elt) returns result:",
                "    result = bg",
                "    if elt in result:",
                "        assert result[elt] > 0",
                "        result[elt] -= 1",
                "        if result[elt] == 0:",
                "            del result[elt]",
                "",
                "# Return set of all subbags of bg of size k",
                "def combinations(bg, k) returns result:",
                "    if k == 0:",
                "        result = { {:} }",
                "    else:",
                "        let n = size(bg):",
                "            if k > n:",
                "                result = {}",
                "            elif k == n:",
                "                result = { bg }",
                "            else:",
                "                let hd = bmin(bg) let tl = remove(bg, hd):",
                "                    result = { add(x, hd) for x in combinations(tl, k - 1) }",
                "                                | combinations(tl, k)"
              ],
            "identifiers": {
                "tl": "local-const",
                "fromSet": "constant",
                "x": "local-const",
                "empty": "constant",
                "multiplicity": "constant",
                "size": "constant",
                "n": "local-const",
                "k": "local-const",
                "hd": "local-const",
                "a": "local-const",
                "bmax": "constant",
                "add": "constant",
                "c": "local-const",
                "combinations": "constant",
                "elt": "local-const",
                "this": "local-var",
                "remove": "constant",
                "v": "local-const",
                "s": "local-const",
                "___": "___",
                "fromList": "constant",
                "bchoose": "constant",
                "bmin": "constant",
                "bg": "local-const"
              }
          },
        "__main__": {
            "file": "trivial_fail.hny",
            "lines": [
                "import fork ",
                "import list",
                "I=10;",
                "counter = 0;",
                "def incrementer id:",
                "        for j in {0..I}: ",
                "                atomically:",
                "                        print(\"entrei\");",
                "                counter += 1;",
                "                atomically:",
                "                        print(\"sai\");",
                "",
                "def main():",
                "        let tids = {fork.fork(?incrementer(tid)) for tid in {0,1} }:",
                "                {fork.join(tid) for tid in tids}; ",
                "        print(counter);",
                "",
                "spawn main()"
              ],
            "identifiers": {
                "tids": "local-const",
                "tid": "local-const",
                "id": "local-const",
                "fork": "module",
                "this": "local-var",
                "main": "constant",
                "list": "module",
                "j": "local-const",
                "incrementer": "constant",
                "counter": "global",
                "___": "___",
                "I": "global"
              }
          },
        "synch": {
            "file": "/home/pereirics/venv3.7/lib/python3.7/site-packages/harmony_model_checker/modules/synch.hny",
            "lines": [
                "import list",
                "import bag",
                "",
                "def atomic_load(p) returns current:",
                "    atomically current = !p",
                "",
                "def atomic_store(p, v):",
                "    atomically !p = v",
                "",
                "def tas(lk) returns oldvalue:",
                "    atomically:",
                "        oldvalue = !lk",
                "        !lk = True",
                "",
                "def cas(p, old, new) returns success:",
                "    atomically:",
                "        success = !p == old",
                "        if success:",
                "            !p = new",
                "",
                "def BinSema(initial) returns sema:",
                "    assert initial in { False, True }",
                "    sema = initial",
                "",
                "def Lock() returns result:",
                "    result = BinSema(False)",
                "",
                "def acquired(binsema) returns result:",
                "    result = !binsema",
                "    ",
                "def held(binsema) returns result:",
                "    result = !binsema",
                "",
                "def acquire(binsema):",
                "    atomically when not !binsema:",
                "        !binsema = True",
                "",
                "def release(binsema):",
                "    atomically:",
                "        assert !binsema",
                "        !binsema = False",
                "",
                "def Condition() returns result:",
                "    result = bag.empty()",
                "",
                "def wait(c, lk):",
                "    var cnt = 0",
                "    let (), ctx = save():",
                "        atomically:",
                "            cnt = bag.multiplicity(!c, ctx)",
                "            !c = bag.add(!c, ctx)",
                "            !lk = False",
                "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):",
                "            !lk = True",
                "",
                "def notify(c):",
                "    atomically if !c != bag.empty():",
                "        !c = bag.remove(!c, bag.bchoose(!c))",
                "",
                "def notifyAll(c):",
                "    atomically !c = bag.empty()",
                "",
                "def Semaphore(cnt) returns result:",
                "    result = cnt",
                "",
                "def P(sema):",
                "    atomically when !sema > 0:",
                "        !sema -= 1",
                "",
                "def V(sema):",
                "    atomically !sema += 1",
                "    ",
                "def Queue() returns result:",
                "    result = []",
                "",
                "def get(q) returns result:",
                "    atomically when !q != []:",
                "        result = list.head(!q)",
                "        !q = list.tail(!q)",
                "",
                "def put(q, item):",
                "    atomically !q = list.append(!q, item)"
              ],
            "identifiers": {
                "held": "constant",
                "get": "constant",
                "initial": "local-const",
                "release": "constant",
                "bag": "module",
                "cnt": "local-const",
                "acquired": "constant",
                "tas": "constant",
                "atomic_load": "constant",
                "BinSema": "constant",
                "c": "local-const",
                "cas": "constant",
                "Semaphore": "constant",
                "this": "local-var",
                "v": "local-const",
                "Lock": "constant",
                "list": "module",
                "lk": "local-const",
                "wait": "constant",
                "binsema": "local-const",
                "p": "local-const",
                "q": "local-const",
                "atomic_store": "constant",
                "V": "constant",
                "new": "local-const",
                "P": "constant",
                "notifyAll": "constant",
                "put": "constant",
                "Queue": "constant",
                "___": "___",
                "old": "local-const",
                "Condition": "constant",
                "sema": "local-const",
                "item": "local-const",
                "notify": "constant",
                "ctx": "local-const",
                "acquire": "constant"
              }
          },
        "fork": {
            "file": "/home/pereirics/venv3.7/lib/python3.7/site-packages/harmony_model_checker/modules/fork.hny",
            "lines": [
                "import alloc, synch",
                "",
                "def _helper(closure, handle):",
                "    handle->result = !closure",
                "    synch.release(?handle->sema)",
                "",
                "def fork(closure) returns handle:",
                "    handle = alloc.malloc({ .sema: synch.BinSema(True), .result: None })",
                "    spawn _helper(closure, handle)",
                "",
                "def join(meta) returns result:",
                "    synch.acquire(?meta->sema)",
                "    result = meta->result",
                "    alloc.free(meta)"
              ],
            "identifiers": {
                "alloc": "module",
                "handle": "local-const",
                "join": "constant",
                "synch": "module",
                "fork": "constant",
                "this": "local-var",
                "closure": "local-const",
                "meta": "local-const",
                "_helper": "constant",
                "___": "___"
              }
          },
        "list": {
            "file": "/home/pereirics/venv3.7/lib/python3.7/site-packages/harmony_model_checker/modules/list.hny",
            "lines": [
                "# return s[b:e]",
                "def subseq(s, b, e) returns result:",
                "    result = [ s[x] for x in {b..e-1} ]",
                "",
                "def append(s, e) returns result:",
                "    result = s + [e,]",
                "",
                "def head(s) returns result:",
                "    result = s[0]",
                "",
                "builtin tail \"list$tail\"",
                "def tail(s) returns result:",
                "    result = subseq(s, 1, len(s))",
                "",
                "# sum of a list or set",
                "def sum(a) returns accu:",
                "    accu = 0",
                "    for v in a:",
                "        accu += v",
                "",
                "# convert list (or values of a dict) to a set",
                "def set(a) returns result:",
                "    result = { v for v in a }",
                "",
                "# convert set into a (sorted) list",
                "def list(a) returns result:",
                "    result = [ v for v in a ]",
                "",
                "# convert values of a dictionary into a list",
                "def values(d) returns result:",
                "    result = [ v for _:v in d ]",
                "",
                "# like Python .items()",
                "def items(d) returns result:",
                "    result = [ (k, v) for k:v in d ]",
                "",
                "# quicksort of a list",
                "def qsort(a) returns sorted:",
                "    if a == []:",
                "        sorted = []",
                "    else:",
                "        let (pivot, rest) = head(a), tail(a)",
                "        let lower = [ v for v in rest where v < pivot ]",
                "        let higher = [ v for v in rest where v >= pivot ]:",
                "            sorted = qsort(lower) + [pivot,] + qsort(higher)",
                "",
                "# like Python sorted()",
                "def sorted(d) returns result:",
                "    result = qsort(list(d))",
                "",
                "# like Python reversed()",
                "def reversed(d) returns result:",
                "    let n = len(d):",
                "        result = [ d[n-i] for i in { 1..n } ]",
                "",
                "# like Python index()",
                "def index(d, e) returns i:",
                "    i = 0",
                "    while d[i] != e:",
                "        i += 1",
                "",
                "# like Python startswith (only defined for strings)",
                "def startswith(d, prefix) returns result:",
                "    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })",
                "",
                "# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)",
                "def foldl(d, f, z) returns result:",
                "    result = z",
                "    for e in d:",
                "        result = f(result, e)",
                "",
                "# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))",
                "def foldr(d, f, z) returns result:",
                "    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))",
                "",
                "# Python functools reduce operator",
                "def reduce(f, d, z) returns result:",
                "    result = foldl(d, f, z)",
                "",
                "# Return a permutation of set s",
                "def permuted(s) returns perm:",
                "    perm = []",
                "    var c = s",
                "    while c != {}:",
                "        let e = choose c:",
                "            perm += [ e, ]",
                "            c -= { e }",
                "",
                "# Return a list of elements satisfying the condition",
                "def filter(cond, s) returns t:",
                "    t = [ e for e in s where cond(e) ]",
                "",
                "# Return a list of elements mapped by f",
                "def map(f, s) returns t:",
                "    t = [ f(e) for e in s ]"
              ],
            "identifiers": {
                "f": "local-const",
                "z": "local-const",
                "filter": "constant",
                "d": "local-const",
                "head": "constant",
                "x": "local-const",
                "set": "constant",
                "n": "local-const",
                "higher": "local-const",
                "i": "local-const",
                "startswith": "constant",
                "foldl": "constant",
                "values": "constant",
                "k": "local-const",
                "reversed": "constant",
                "e": "local-const",
                "map": "constant",
                "qsort": "constant",
                "pivot": "local-const",
                "a": "local-const",
                "c": "local-var",
                "rest": "local-const",
                "b": "local-const",
                "permuted": "constant",
                "this": "local-var",
                "v": "local-const",
                "list": "constant",
                "prefix": "local-const",
                "subseq": "constant",
                "cond": "local-const",
                "s": "local-const",
                "lower": "local-const",
                "reduce": "constant",
                "tail": "constant",
                "___": "___",
                "sum": "constant",
                "items": "constant",
                "foldr": "constant",
                "sorted": "constant",
                "index": "constant",
                "append": "constant"
              }
          }
      },
    "labels": {
        "__end__": 1404
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Store alloc$pool",
            "pop a value and store it in shared variable pool"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store alloc$next",
            "pop a value and store it in shared variable next"
          ],
        [
            "Jump 98",
            "jump over method definition: set program counter to 98"
          ],
        [
            "Frame malloc(v)",
            "start of method malloc"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push ?alloc$pool",
            "push constant ?alloc$pool"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push ?alloc$pool",
            "push constant ?alloc$pool"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "StoreVar copy",
            "pop a value and store in copy"
          ],
        [
            "Load alloc$next",
            "push value of shared variable next"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store alloc$next",
            "pop a value and store it in shared variable next"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(copy)",
            "restore caller method state and push copy"
          ],
        [
            "DelVar copy",
            "delete method variable copy"
          ],
        [
            "Jump 98",
            "jump over method definition: set program counter to 98"
          ],
        [
            "Frame free(r)",
            "start of method free"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar r",
            "push the value of r"
          ],
        [
            "DelVar r",
            "delete method variable r"
          ],
        [
            "Del",
            "pop an address and delete the shared variable at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 98",
            "jump over method definition: set program counter to 98"
          ],
        [
            "Frame leak_check()",
            "start of method leak_check"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Load alloc$pool",
            "push value of shared variable pool"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Push \"alloc_leak\"",
            "push constant \"alloc_leak\""
          ],
        [
            "Assert2",
            "pop a value and a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 98",
            "jump over method definition: set program counter to 98"
          ],
        [
            "Frame subseq(s, b, e)",
            "start of method subseq"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu44",
            "initialize accumulator for list comprehension: pop a value and store in $accu44"
          ],
        [
            "LoadVar b",
            "push the value of b"
          ],
        [
            "DelVar b",
            "delete method variable b"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 70",
            "check if loop is done: pop a value and jump to 70 if the value is False"
          ],
        [
            "LoadVar $accu44",
            "load accumulator: push the value of $accu44"
          ],
        [
            "DelVar $accu44",
            "delete method variable $accu44"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu44",
            "update accumulator: pop a value and store in $accu44"
          ],
        [
            "Jump 58",
            "set program counter to 58"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu44",
            "load final accumulator result: push the value of $accu44"
          ],
        [
            "DelVar $accu44",
            "delete method variable $accu44"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 98",
            "jump over method definition: set program counter to 98"
          ],
        [
            "Frame append(s, e)",
            "start of method append"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 98",
            "jump over method definition: set program counter to 98"
          ],
        [
            "Frame head(s)",
            "start of method head"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push PC(101)",
            "push constant PC(101)"
          ],
        [
            "Builtin(list$tail)",
            "top of stack is a built-in operation called list$tail"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame tail(s)",
            "start of method tail"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(46)",
            "call method PC(46)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame sum(a)",
            "start of method sum"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar accu",
            "pop a value and store in accu"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 131",
            "check if loop is done: pop a value and jump to 131 if the value is False"
          ],
        [
            "LoadVar accu",
            "push the value of accu"
          ],
        [
            "DelVar accu",
            "delete method variable accu"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar accu",
            "pop a value and store in accu"
          ],
        [
            "Jump 122",
            "set program counter to 122"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "ReturnOp(accu)",
            "restore caller method state and push accu"
          ],
        [
            "DelVar accu",
            "delete method variable accu"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame set(a)",
            "start of method set"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu113",
            "initialize accumulator for set comprehension: pop a value and store in $accu113"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 151",
            "check if loop is done: pop a value and jump to 151 if the value is False"
          ],
        [
            "LoadVar $accu113",
            "load accumulator: push the value of $accu113"
          ],
        [
            "DelVar $accu113",
            "delete method variable $accu113"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu113",
            "update accumulator: pop a value and store in $accu113"
          ],
        [
            "Jump 142",
            "set program counter to 142"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu113",
            "load final accumulator result: push the value of $accu113"
          ],
        [
            "DelVar $accu113",
            "delete method variable $accu113"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame list(a)",
            "start of method list"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu129",
            "initialize accumulator for list comprehension: pop a value and store in $accu129"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 173",
            "check if loop is done: pop a value and jump to 173 if the value is False"
          ],
        [
            "LoadVar $accu129",
            "load accumulator: push the value of $accu129"
          ],
        [
            "DelVar $accu129",
            "delete method variable $accu129"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu129",
            "update accumulator: pop a value and store in $accu129"
          ],
        [
            "Jump 164",
            "set program counter to 164"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu129",
            "load final accumulator result: push the value of $accu129"
          ],
        [
            "DelVar $accu129",
            "delete method variable $accu129"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame values(d)",
            "start of method values"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu145",
            "initialize accumulator for list comprehension: pop a value and store in $accu145"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, v)",
            "get next element and assign to _:v; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 196",
            "check if loop is done: pop a value and jump to 196 if the value is False"
          ],
        [
            "LoadVar $accu145",
            "load accumulator: push the value of $accu145"
          ],
        [
            "DelVar $accu145",
            "delete method variable $accu145"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu145",
            "update accumulator: pop a value and store in $accu145"
          ],
        [
            "Jump 186",
            "set program counter to 186"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu145",
            "load final accumulator result: push the value of $accu145"
          ],
        [
            "DelVar $accu145",
            "delete method variable $accu145"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame items(d)",
            "start of method items"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu161",
            "initialize accumulator for list comprehension: pop a value and store in $accu161"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(k, v)",
            "get next element and assign to k:v; push False or True depending on success"
          ],
        [
            "JumpCond False 223",
            "check if loop is done: pop a value and jump to 223 if the value is False"
          ],
        [
            "LoadVar $accu161",
            "load accumulator: push the value of $accu161"
          ],
        [
            "DelVar $accu161",
            "delete method variable $accu161"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu161",
            "update accumulator: pop a value and store in $accu161"
          ],
        [
            "Jump 209",
            "set program counter to 209"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu161",
            "load final accumulator result: push the value of $accu161"
          ],
        [
            "DelVar $accu161",
            "delete method variable $accu161"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame qsort(a)",
            "start of method qsort"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 239",
            "pop a value and jump to 239 if the value is False"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar sorted",
            "pop a value and store in sorted"
          ],
        [
            "Jump 305",
            "set program counter to 305"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Apply PC(89)",
            "call method PC(89)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Apply PC(101)",
            "call method PC(101)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar (pivot, rest)",
            "pop a value and store in (pivot, rest)"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu196",
            "initialize accumulator for list comprehension: pop a value and store in $accu196"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 266",
            "check if loop is done: pop a value and jump to 266 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary <",
            "pop 2 values and push the result of applying <"
          ],
        [
            "JumpCond False 252",
            "pop a value and jump to 252 if the value is False"
          ],
        [
            "LoadVar $accu196",
            "load accumulator: push the value of $accu196"
          ],
        [
            "DelVar $accu196",
            "delete method variable $accu196"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu196",
            "update accumulator: pop a value and store in $accu196"
          ],
        [
            "Jump 252",
            "set program counter to 252"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu196",
            "load final accumulator result: push the value of $accu196"
          ],
        [
            "DelVar $accu196",
            "delete method variable $accu196"
          ],
        [
            "StoreVar lower",
            "pop a value and store in lower"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu213",
            "initialize accumulator for list comprehension: pop a value and store in $accu213"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "DelVar rest",
            "delete method variable rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 289",
            "check if loop is done: pop a value and jump to 289 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 275",
            "pop a value and jump to 275 if the value is False"
          ],
        [
            "LoadVar $accu213",
            "load accumulator: push the value of $accu213"
          ],
        [
            "DelVar $accu213",
            "delete method variable $accu213"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu213",
            "update accumulator: pop a value and store in $accu213"
          ],
        [
            "Jump 275",
            "set program counter to 275"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu213",
            "load final accumulator result: push the value of $accu213"
          ],
        [
            "DelVar $accu213",
            "delete method variable $accu213"
          ],
        [
            "StoreVar higher",
            "pop a value and store in higher"
          ],
        [
            "LoadVar lower",
            "push the value of lower"
          ],
        [
            "DelVar lower",
            "delete method variable lower"
          ],
        [
            "Apply PC(230)",
            "call method PC(230)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "DelVar pivot",
            "delete method variable pivot"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar higher",
            "push the value of higher"
          ],
        [
            "DelVar higher",
            "delete method variable higher"
          ],
        [
            "Apply PC(230)",
            "call method PC(230)"
          ],
        [
            "3-ary +",
            "pop 3 values and push the result of applying +"
          ],
        [
            "StoreVar sorted",
            "pop a value and store in sorted"
          ],
        [
            "ReturnOp(sorted)",
            "restore caller method state and push sorted"
          ],
        [
            "DelVar sorted",
            "delete method variable sorted"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame sorted(d)",
            "start of method sorted"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Apply PC(157)",
            "call method PC(157)"
          ],
        [
            "Apply PC(230)",
            "call method PC(230)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame reversed(d)",
            "start of method reversed"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "StoreVar n",
            "pop a value and store in n"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu252",
            "initialize accumulator for list comprehension: pop a value and store in $accu252"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 342",
            "check if loop is done: pop a value and jump to 342 if the value is False"
          ],
        [
            "LoadVar $accu252",
            "load accumulator: push the value of $accu252"
          ],
        [
            "DelVar $accu252",
            "delete method variable $accu252"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu252",
            "update accumulator: pop a value and store in $accu252"
          ],
        [
            "Jump 328",
            "set program counter to 328"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "LoadVar $accu252",
            "load final accumulator result: push the value of $accu252"
          ],
        [
            "DelVar $accu252",
            "delete method variable $accu252"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame index(d, e)",
            "start of method index"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 366",
            "pop a value and jump to 366 if the value is False"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Jump 353",
            "set program counter to 353"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "ReturnOp(i)",
            "restore caller method state and push i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame startswith(d, prefix)",
            "start of method startswith"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "JumpCond False 412",
            "pop a value and jump to 412 if the value is False"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu298",
            "initialize accumulator for list comprehension: pop a value and store in $accu298"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 405",
            "check if loop is done: pop a value and jump to 405 if the value is False"
          ],
        [
            "LoadVar $accu298",
            "load accumulator: push the value of $accu298"
          ],
        [
            "DelVar $accu298",
            "delete method variable $accu298"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu298",
            "update accumulator: pop a value and store in $accu298"
          ],
        [
            "Jump 388",
            "set program counter to 388"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "LoadVar $accu298",
            "load final accumulator result: push the value of $accu298"
          ],
        [
            "DelVar $accu298",
            "delete method variable $accu298"
          ],
        [
            "1-ary all",
            "pop 1 value and push the result of applying all"
          ],
        [
            "Jump 415",
            "set program counter to 415"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame foldl(d, f, z)",
            "start of method foldl"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 440",
            "check if loop is done: pop a value and jump to 440 if the value is False"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 426",
            "set program counter to 426"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame foldr(d, f, z)",
            "start of method foldr"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 456",
            "pop a value and jump to 456 if the value is False"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "Jump 478",
            "set program counter to 478"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Apply PC(101)",
            "call method PC(101)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(444)",
            "call method PC(444)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame reduce(f, d, z)",
            "start of method reduce"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(418)",
            "call method PC(418)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame permuted(s)",
            "start of method permuted"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 526",
            "pop a value and jump to 526 if the value is False"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar e",
            "pop a value and store in e"
          ],
        [
            "LoadVar perm",
            "push the value of perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "Jump 503",
            "set program counter to 503"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(perm)",
            "restore caller method state and push perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame filter(cond, s)",
            "start of method filter"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu418",
            "initialize accumulator for list comprehension: pop a value and store in $accu418"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 551",
            "check if loop is done: pop a value and jump to 551 if the value is False"
          ],
        [
            "LoadVar cond",
            "push the value of cond"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 536",
            "pop a value and jump to 536 if the value is False"
          ],
        [
            "LoadVar $accu418",
            "load accumulator: push the value of $accu418"
          ],
        [
            "DelVar $accu418",
            "delete method variable $accu418"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu418",
            "update accumulator: pop a value and store in $accu418"
          ],
        [
            "Jump 536",
            "set program counter to 536"
          ],
        [
            "DelVar cond",
            "delete method variable cond"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "LoadVar $accu418",
            "load final accumulator result: push the value of $accu418"
          ],
        [
            "DelVar $accu418",
            "delete method variable $accu418"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame map(f, s)",
            "start of method map"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu439",
            "initialize accumulator for list comprehension: pop a value and store in $accu439"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 577",
            "check if loop is done: pop a value and jump to 577 if the value is False"
          ],
        [
            "LoadVar $accu439",
            "load accumulator: push the value of $accu439"
          ],
        [
            "DelVar $accu439",
            "delete method variable $accu439"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu439",
            "update accumulator: pop a value and store in $accu439"
          ],
        [
            "Jump 565",
            "set program counter to 565"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar $accu439",
            "load final accumulator result: push the value of $accu439"
          ],
        [
            "DelVar $accu439",
            "delete method variable $accu439"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame empty()",
            "start of method empty"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame fromSet(s)",
            "start of method fromSet"
          ],
        [
            "Push {:}",
            "initialize accumulator for dict comprehension: push constant {:}"
          ],
        [
            "StoreVar $accu463",
            "initialize accumulator for dict comprehension: pop a value and store in $accu463"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(elt)",
            "get next element and assign to elt; push False or True depending on success"
          ],
        [
            "JumpCond False 607",
            "check if loop is done: pop a value and jump to 607 if the value is False"
          ],
        [
            "LoadVar $accu463",
            "load accumulator: push the value of $accu463"
          ],
        [
            "DelVar $accu463",
            "delete method variable $accu463"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar $accu463",
            "update accumulator: pop a value and store in $accu463"
          ],
        [
            "Jump 597",
            "set program counter to 597"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "LoadVar $accu463",
            "load final accumulator result: push the value of $accu463"
          ],
        [
            "DelVar $accu463",
            "delete method variable $accu463"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Jump 646",
            "jump over method definition: set program counter to 646"
          ],
        [
            "Frame fromList(a)",
            "start of method fromList"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 643",
            "check if loop is done: pop a value and jump to 643 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 636",
            "pop a value and jump to 636 if the value is False"
          ],
        [
            "Push ?bg",
            "push constant ?bg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar [bg]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 620",
            "set program counter to 620"
          ],
        [
            "Push ?bg",
            "push constant ?bg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "StoreVar [bg]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 620",
            "set program counter to 620"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Push PC(649)",
            "push constant PC(649)"
          ],
        [
            "Builtin(bag$multiplicity)",
            "top of stack is a built-in operation called bag$multiplicity"
          ],
        [
            "Jump 668",
            "jump over method definition: set program counter to 668"
          ],
        [
            "Frame multiplicity(bg, elt)",
            "start of method multiplicity"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 662",
            "pop a value and jump to 662 if the value is False"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "Jump 666",
            "set program counter to 666"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(671)",
            "push constant PC(671)"
          ],
        [
            "Builtin(bag$size)",
            "top of stack is a built-in operation called bag$size"
          ],
        [
            "Jump 690",
            "jump over method definition: set program counter to 690"
          ],
        [
            "Frame size(bg)",
            "start of method size"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, c)",
            "get next element and assign to _:c; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 687",
            "check if loop is done: pop a value and jump to 687 if the value is False"
          ],
        [
            "LoadVar count",
            "push the value of count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "Jump 677",
            "set program counter to 677"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(693)",
            "push constant PC(693)"
          ],
        [
            "Builtin(bag$bmin)",
            "top of stack is a built-in operation called bag$bmin"
          ],
        [
            "Jump 709",
            "jump over method definition: set program counter to 709"
          ],
        [
            "Frame bmin(bg)",
            "start of method bmin"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "1-ary min",
            "pop 1 value and push the result of applying min"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(712)",
            "push constant PC(712)"
          ],
        [
            "Builtin(bag$bmax)",
            "top of stack is a built-in operation called bag$bmax"
          ],
        [
            "Jump 737",
            "jump over method definition: set program counter to 737"
          ],
        [
            "Frame bmax(bg)",
            "start of method bmax"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "1-ary max",
            "pop 1 value and push the result of applying max"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Jump 737",
            "jump over method definition: set program counter to 737"
          ],
        [
            "Frame bchoose(bg)",
            "start of method bchoose"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar elt",
            "pop a value and store in elt"
          ],
        [
            "ReturnOp(elt)",
            "restore caller method state and push elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push PC(740)",
            "push constant PC(740)"
          ],
        [
            "Builtin(bag$add)",
            "top of stack is a built-in operation called bag$add"
          ],
        [
            "Jump 766",
            "jump over method definition: set program counter to 766"
          ],
        [
            "Frame add(bg, elt)",
            "start of method add"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 759",
            "pop a value and jump to 759 if the value is False"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 765",
            "set program counter to 765"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push PC(769)",
            "push constant PC(769)"
          ],
        [
            "Builtin(bag$remove)",
            "top of stack is a built-in operation called bag$remove"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame remove(bg, elt)",
            "start of method remove"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 809",
            "pop a value and jump to 809 if the value is False"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 809",
            "pop a value and jump to 809 if the value is False"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "DelVar [result]",
            "pop an address of a method variable and delete that variable"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame combinations(bg, k)",
            "start of method combinations"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 825",
            "pop a value and jump to 825 if the value is False"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 900",
            "set program counter to 900"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Apply PC(671)",
            "call method PC(671)"
          ],
        [
            "StoreVar n",
            "pop a value and store in n"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 838",
            "pop a value and jump to 838 if the value is False"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 900",
            "set program counter to 900"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 850",
            "pop a value and jump to 850 if the value is False"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 900",
            "set program counter to 900"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Apply PC(693)",
            "call method PC(693)"
          ],
        [
            "StoreVar hd",
            "pop a value and store in hd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar hd",
            "push the value of hd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(769)",
            "call method PC(769)"
          ],
        [
            "StoreVar tl",
            "pop a value and store in tl"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu686",
            "initialize accumulator for set comprehension: pop a value and store in $accu686"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar tl",
            "push the value of tl"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(812)",
            "call method PC(812)"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 886",
            "check if loop is done: pop a value and jump to 886 if the value is False"
          ],
        [
            "LoadVar $accu686",
            "load accumulator: push the value of $accu686"
          ],
        [
            "DelVar $accu686",
            "delete method variable $accu686"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar hd",
            "push the value of hd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(740)",
            "call method PC(740)"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu686",
            "update accumulator: pop a value and store in $accu686"
          ],
        [
            "Jump 872",
            "set program counter to 872"
          ],
        [
            "DelVar hd",
            "delete method variable hd"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu686",
            "load final accumulator result: push the value of $accu686"
          ],
        [
            "DelVar $accu686",
            "delete method variable $accu686"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar tl",
            "push the value of tl"
          ],
        [
            "DelVar tl",
            "delete method variable tl"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(812)",
            "call method PC(812)"
          ],
        [
            "2-ary |",
            "pop 2 values and push the result of applying |"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame atomic_load(p)",
            "start of method atomic_load"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar current",
            "pop a value and store in current"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(current)",
            "restore caller method state and push current"
          ],
        [
            "DelVar current",
            "delete method variable current"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame atomic_store(p, v)",
            "start of method atomic_store"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame tas(lk)",
            "start of method tas"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar oldvalue",
            "pop a value and store in oldvalue"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "DelVar lk",
            "delete method variable lk"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(oldvalue)",
            "restore caller method state and push oldvalue"
          ],
        [
            "DelVar oldvalue",
            "delete method variable oldvalue"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame cas(p, old, new)",
            "start of method cas"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar old",
            "push the value of old"
          ],
        [
            "DelVar old",
            "delete method variable old"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "StoreVar success",
            "pop a value and store in success"
          ],
        [
            "LoadVar success",
            "push the value of success"
          ],
        [
            "JumpCond False 950",
            "pop a value and jump to 950 if the value is False"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "LoadVar new",
            "push the value of new"
          ],
        [
            "DelVar new",
            "delete method variable new"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar new",
            "delete method variable new"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(success)",
            "restore caller method state and push success"
          ],
        [
            "DelVar success",
            "delete method variable success"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame BinSema(initial)",
            "start of method BinSema"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar initial",
            "push the value of initial"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar initial",
            "push the value of initial"
          ],
        [
            "DelVar initial",
            "delete method variable initial"
          ],
        [
            "StoreVar sema",
            "pop a value and store in sema"
          ],
        [
            "ReturnOp(sema)",
            "restore caller method state and push sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame Lock()",
            "start of method Lock"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Apply PC(956)",
            "call method PC(956)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame acquired(binsema)",
            "start of method acquired"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame held(binsema)",
            "start of method held"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame acquire(binsema)",
            "start of method acquire"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 1006",
            "pop a value and jump to 1006 if the value is False"
          ],
        [
            "Jump 1009",
            "set program counter to 1009"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 999",
            "set program counter to 999"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame release(binsema)",
            "start of method release"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar binsema",
            "push the value of binsema"
          ],
        [
            "DelVar binsema",
            "delete method variable binsema"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame Condition()",
            "start of method Condition"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push PC(585)",
            "push constant PC(585)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame wait(c, lk)",
            "start of method wait"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar cnt",
            "pop a value and store in cnt"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Save",
            "pop a value and save context"
          ],
        [
            "Continue",
            "a no-op, must follow a Stop or Save operation"
          ],
        [
            "StoreVar ((), ctx)",
            "pop a value and store in ((), ctx)"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push PC(649)",
            "push constant PC(649)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar cnt",
            "pop a value and store in cnt"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push PC(740)",
            "push constant PC(740)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond False 1094",
            "pop a value and jump to 1094 if the value is False"
          ],
        [
            "Push PC(649)",
            "push constant PC(649)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar ctx",
            "push the value of ctx"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar cnt",
            "push the value of cnt"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "Jump 1095",
            "set program counter to 1095"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "JumpCond False 1100",
            "pop a value and jump to 1100 if the value is False"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "DelVar ctx",
            "delete method variable ctx"
          ],
        [
            "Jump 1103",
            "set program counter to 1103"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1076",
            "set program counter to 1076"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar lk",
            "push the value of lk"
          ],
        [
            "DelVar lk",
            "delete method variable lk"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame notify(c)",
            "start of method notify"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push PC(585)",
            "push constant PC(585)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 1137",
            "pop a value and jump to 1137 if the value is False"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push PC(769)",
            "push constant PC(769)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push PC(729)",
            "push constant PC(729)"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame notifyAll(c)",
            "start of method notifyAll"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Push PC(585)",
            "push constant PC(585)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame Semaphore(cnt)",
            "start of method Semaphore"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar cnt",
            "push the value of cnt"
          ],
        [
            "DelVar cnt",
            "delete method variable cnt"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame P(sema)",
            "start of method P"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 1169",
            "pop a value and jump to 1169 if the value is False"
          ],
        [
            "Jump 1172",
            "set program counter to 1172"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1161",
            "set program counter to 1161"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame V(sema)",
            "start of method V"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar sema",
            "push the value of sema"
          ],
        [
            "DelVar sema",
            "delete method variable sema"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame Queue()",
            "start of method Queue"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame get(q)",
            "start of method get"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 1211",
            "pop a value and jump to 1211 if the value is False"
          ],
        [
            "Jump 1214",
            "set program counter to 1214"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1202",
            "set program counter to 1202"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "Push PC(89)",
            "push constant PC(89)"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Push PC(101)",
            "push constant PC(101)"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "DelVar q",
            "delete method variable q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame put(q, item)",
            "start of method put"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "Push PC(77)",
            "push constant PC(77)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar q",
            "push the value of q"
          ],
        [
            "DelVar q",
            "delete method variable q"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar item",
            "push the value of item"
          ],
        [
            "DelVar item",
            "delete method variable item"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame _helper(closure, handle)",
            "start of method _helper"
          ],
        [
            "LoadVar handle",
            "push the value of handle"
          ],
        [
            "Push \"result\"",
            "push constant \"result\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar closure",
            "push the value of closure"
          ],
        [
            "DelVar closure",
            "delete method variable closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push PC(1017)",
            "push constant PC(1017)"
          ],
        [
            "LoadVar handle",
            "push the value of handle"
          ],
        [
            "DelVar handle",
            "delete method variable handle"
          ],
        [
            "Push \"sema\"",
            "push constant \"sema\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame fork(closure)",
            "start of method fork"
          ],
        [
            "Push PC(6)",
            "push constant PC(6)"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"sema\"",
            "push constant \"sema\""
          ],
        [
            "Push PC(956)",
            "push constant PC(956)"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"result\"",
            "push constant \"result\""
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar handle",
            "pop a value and store in handle"
          ],
        [
            "Push ?PC(1250)",
            "push constant ?PC(1250)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar closure",
            "push the value of closure"
          ],
        [
            "DelVar closure",
            "delete method variable closure"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar handle",
            "push the value of handle"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "ReturnOp(handle)",
            "restore caller method state and push handle"
          ],
        [
            "DelVar handle",
            "delete method variable handle"
          ],
        [
            "Jump 1317",
            "jump over method definition: set program counter to 1317"
          ],
        [
            "Frame join(meta)",
            "start of method join"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push PC(998)",
            "push constant PC(998)"
          ],
        [
            "LoadVar meta",
            "push the value of meta"
          ],
        [
            "Push \"sema\"",
            "push constant \"sema\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar meta",
            "push the value of meta"
          ],
        [
            "Push \"result\"",
            "push constant \"result\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Push PC(26)",
            "push constant PC(26)"
          ],
        [
            "LoadVar meta",
            "push the value of meta"
          ],
        [
            "DelVar meta",
            "delete method variable meta"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push 10",
            "push constant 10"
          ],
        [
            "Store I",
            "pop a value and store it in shared variable I"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store counter",
            "pop a value and store it in shared variable counter"
          ],
        [
            "Jump 1397",
            "jump over method definition: set program counter to 1397"
          ],
        [
            "Frame incrementer(id)",
            "start of method incrementer"
          ],
        [
            "DelVar id",
            "delete method variable id"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Load I",
            "push value of shared variable I"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(j)",
            "get next element and assign to j; push False or True depending on success"
          ],
        [
            "DelVar j",
            "delete method variable j"
          ],
        [
            "JumpCond False 1344",
            "check if loop is done: pop a value and jump to 1344 if the value is False"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push \"entrei\"",
            "push constant \"entrei\""
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Load counter",
            "push value of shared variable counter"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store counter",
            "pop a value and store it in shared variable counter"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push \"sai\"",
            "push constant \"sai\""
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 1328",
            "set program counter to 1328"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 1397",
            "jump over method definition: set program counter to 1397"
          ],
        [
            "Frame main()",
            "start of method main"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu1118",
            "initialize accumulator for set comprehension: pop a value and store in $accu1118"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(tid)",
            "get next element and assign to tid; push False or True depending on success"
          ],
        [
            "JumpCond False 1369",
            "check if loop is done: pop a value and jump to 1369 if the value is False"
          ],
        [
            "LoadVar $accu1118",
            "load accumulator: push the value of $accu1118"
          ],
        [
            "DelVar $accu1118",
            "delete method variable $accu1118"
          ],
        [
            "Push PC(1268)",
            "push constant PC(1268)"
          ],
        [
            "Push ?PC(1322)",
            "push constant ?PC(1322)"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu1118",
            "update accumulator: pop a value and store in $accu1118"
          ],
        [
            "Jump 1355",
            "set program counter to 1355"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "LoadVar $accu1118",
            "load final accumulator result: push the value of $accu1118"
          ],
        [
            "DelVar $accu1118",
            "delete method variable $accu1118"
          ],
        [
            "StoreVar tids",
            "pop a value and store in tids"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu1140",
            "initialize accumulator for set comprehension: pop a value and store in $accu1140"
          ],
        [
            "LoadVar tids",
            "push the value of tids"
          ],
        [
            "DelVar tids",
            "delete method variable tids"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(tid)",
            "get next element and assign to tid; push False or True depending on success"
          ],
        [
            "JumpCond False 1390",
            "check if loop is done: pop a value and jump to 1390 if the value is False"
          ],
        [
            "LoadVar $accu1140",
            "load accumulator: push the value of $accu1140"
          ],
        [
            "DelVar $accu1140",
            "delete method variable $accu1140"
          ],
        [
            "Push PC(1296)",
            "push constant PC(1296)"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu1140",
            "update accumulator: pop a value and store in $accu1140"
          ],
        [
            "Jump 1378",
            "set program counter to 1378"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "LoadVar $accu1140",
            "load final accumulator result: push the value of $accu1140"
          ],
        [
            "DelVar $accu1140",
            "delete method variable $accu1140"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Load counter",
            "push value of shared variable counter"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push ?PC(1346)",
            "push constant ?PC(1346)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                1,
                1,
                19,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                10
              ],
            "line": 1,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "alloc",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                10
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                8
              ],
            "line": 2,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "alloc",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                8
              ],
            "line": 2,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                15
              ],
            "line": 7,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                22
              ],
            "line": 8,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 26,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                26
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                17
              ],
            "line": 10,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "alloc",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                15
              ],
            "line": 7,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                27
              ],
            "line": 6,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                15
              ],
            "line": 14,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "alloc",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                18
              ],
            "line": 16,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "alloc",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                15
              ],
            "line": 14,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                12
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 15,
            "column": 12
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                35
              ],
            "line": 20,
            "endcolumn": 35,
            "column": 5
          },
        {
            "module": "alloc",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 34
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 31
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "list",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "list",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "list",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                24
              ],
            "line": 11,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "list",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                24
              ],
            "line": 11,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 27
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 33,
            "column": 14
          },
        {
            "module": "list",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                33
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                27
              ],
            "line": 12,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                12
              ],
            "line": 17,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "list",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                12
              ],
            "line": 17,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "list",
            "endline": 19,
            "stmt": [
                19,
                9,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "list",
            "endline": 18,
            "stmt": [
                18,
                5,
                18,
                14
              ],
            "line": 18,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                24
              ],
            "line": 16,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                29
              ],
            "line": 23,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                26
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "list",
            "endline": 27,
            "stmt": [
                27,
                5,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 26,
            "stmt": [
                26,
                1,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "list",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                31
              ],
            "line": 31,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 30,
            "stmt": [
                30,
                1,
                30,
                29
              ],
            "line": 30,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "list",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                36
              ],
            "line": 35,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                28
              ],
            "line": 34,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 14,
            "column": 8
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "list",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                19
              ],
            "line": 40,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 38
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "list",
            "endline": 42,
            "stmt": [
                42,
                9,
                42,
                53
              ],
            "line": 42,
            "endcolumn": 27,
            "column": 9
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 45
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "list",
            "endline": 43,
            "stmt": [
                43,
                9,
                43,
                64
              ],
            "line": 43,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 46
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "list",
            "endline": 44,
            "stmt": [
                44,
                9,
                44,
                57
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 33,
            "column": 22
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 43,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 42,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 42,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 43,
            "column": 38
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 60,
            "column": 48
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 60,
            "column": 22
          },
        {
            "module": "list",
            "endline": 45,
            "stmt": [
                45,
                13,
                45,
                60
              ],
            "line": 45,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "list",
            "endline": 49,
            "stmt": [
                49,
                5,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 48,
            "stmt": [
                48,
                1,
                48,
                29
              ],
            "line": 48,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "list",
            "endline": 53,
            "stmt": [
                53,
                5,
                53,
                18
              ],
            "line": 53,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 41,
            "column": 38
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 22
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 43,
            "column": 20
          },
        {
            "module": "list",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                45
              ],
            "line": 54,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 52,
            "stmt": [
                52,
                1,
                52,
                31
              ],
            "line": 52,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                9
              ],
            "line": 58,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "list",
            "endline": 58,
            "stmt": [
                58,
                5,
                58,
                9
              ],
            "line": 58,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "list",
            "endline": 60,
            "stmt": [
                60,
                9,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "list",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                20
              ],
            "line": 59,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 57,
            "stmt": [
                57,
                1,
                57,
                26
              ],
            "line": 57,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 35,
            "column": 30
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 35,
            "column": 15
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 75,
            "column": 75
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 89,
            "column": 84
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 90,
            "column": 80
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 94
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 80
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 94,
            "column": 75
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 62,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 96
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 42
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 40,
            "column": 38
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 97,
            "column": 14
          },
        {
            "module": "list",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                97
              ],
            "line": 64,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                41
              ],
            "line": 63,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                14
              ],
            "line": 68,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "list",
            "endline": 70,
            "stmt": [
                70,
                9,
                70,
                29
              ],
            "line": 70,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "list",
            "endline": 69,
            "stmt": [
                69,
                5,
                69,
                14
              ],
            "line": 69,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                34
              ],
            "line": 67,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 28,
            "column": 19
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 55,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 43
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "list",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                63
              ],
            "line": 74,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                34
              ],
            "line": 73,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "list",
            "endline": 78,
            "stmt": [
                78,
                5,
                78,
                27
              ],
            "line": 78,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "list",
            "endline": 77,
            "stmt": [
                77,
                1,
                77,
                35
              ],
            "line": 77,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 82,
            "stmt": [
                82,
                5,
                82,
                13
              ],
            "line": 82,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "list",
            "endline": 82,
            "stmt": [
                82,
                5,
                82,
                13
              ],
            "line": 82,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 83,
            "stmt": [
                83,
                5,
                83,
                13
              ],
            "line": 83,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 17,
            "column": 11
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "list",
            "endline": 85,
            "stmt": [
                85,
                9,
                85,
                24
              ],
            "line": 85,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "list",
            "endline": 86,
            "stmt": [
                86,
                13,
                86,
                26
              ],
            "line": 86,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "list",
            "endline": 87,
            "stmt": [
                87,
                13,
                87,
                22
              ],
            "line": 87,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "list",
            "endline": 84,
            "stmt": [
                84,
                5,
                84,
                18
              ],
            "line": 84,
            "endcolumn": 18,
            "column": 5
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                29
              ],
            "line": 81,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 33,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "list",
            "endline": 91,
            "stmt": [
                91,
                5,
                91,
                38
              ],
            "line": 91,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 90,
            "stmt": [
                90,
                1,
                90,
                30
              ],
            "line": 90,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "list",
            "endline": 95,
            "stmt": [
                95,
                5,
                95,
                27
              ],
            "line": 95,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "list",
            "endline": 94,
            "stmt": [
                94,
                1,
                94,
                24
              ],
            "line": 94,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                12
              ],
            "line": 2,
            "endcolumn": 12,
            "column": 10
          },
        {
            "module": "bag",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                12
              ],
            "line": 2,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 10
          },
        {
            "module": "bag",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                39
              ],
            "line": 15,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                39
              ],
            "line": 15,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                23
              ],
            "line": 22,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                23
              ],
            "line": 22,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                23
              ],
            "line": 33,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                23
              ],
            "line": 33,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 25,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                21
              ],
            "line": 41,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                21
              ],
            "line": 41,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 25,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 17,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 21,
            "column": 19
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 22,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 24,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 32,
            "column": 31
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 33,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 52,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 52,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 55
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 57,
            "column": 44
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 42,
            "column": 35
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 66,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 69,
            "column": 69
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 73
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 69
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 39
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 41,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 74
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 49,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 49,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 53,
            "column": 35
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 53,
            "column": 30
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 21
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 24,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 5,
            "stmt": [
                5,
                16,
                5,
                27
              ],
            "line": 5,
            "endcolumn": 27,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                35
              ],
            "line": 4,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 8,
            "stmt": [
                8,
                16,
                8,
                21
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                15
              ],
            "line": 11,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                22
              ],
            "line": 12,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 11,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 11,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                18
              ],
            "line": 13,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                15
              ],
            "line": 11,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                29
              ],
            "line": 10,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                27
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                19
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                19
              ],
            "line": 18,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 19,
            "stmt": [
                19,
                13,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                15
              ],
            "line": 16,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                37
              ],
            "line": 15,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 29,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                37
              ],
            "line": 22,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "synch",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                18
              ],
            "line": 23,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 21,
            "stmt": [
                21,
                1,
                21,
                34
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 26,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 26,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                27
              ],
            "line": 26,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                26
              ],
            "line": 25,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                21
              ],
            "line": 29,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                37
              ],
            "line": 28,
            "endcolumn": 37,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                21
              ],
            "line": 32,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                33
              ],
            "line": 31,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 37,
            "stmt": [
                35,
                16,
                37,
                6
              ],
            "line": 35,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                37,
                6
              ],
            "line": 35,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 36,
            "stmt": [
                36,
                9,
                36,
                23
              ],
            "line": 36,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 35,
            "stmt": [
                35,
                16,
                35,
                32
              ],
            "line": 35,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                21
              ],
            "line": 34,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                23
              ],
            "line": 40,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 24,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                24
              ],
            "line": 41,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                15
              ],
            "line": 39,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                21
              ],
            "line": 38,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 24,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                24
              ],
            "line": 44,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 43,
            "stmt": [
                43,
                1,
                43,
                31
              ],
            "line": 43,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                15
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "synch",
            "endline": 47,
            "stmt": [
                47,
                5,
                47,
                15
              ],
            "line": 47,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 48,
            "stmt": [
                48,
                5,
                48,
                24
              ],
            "line": 48,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 49,
            "stmt": [
                49,
                9,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 34,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 37,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 43,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 43,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 50,
            "stmt": [
                50,
                13,
                50,
                43
              ],
            "line": 50,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 24,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 33,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 33,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 51,
            "stmt": [
                51,
                13,
                51,
                33
              ],
            "line": 51,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 52,
            "stmt": [
                52,
                13,
                52,
                23
              ],
            "line": 52,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 49,
            "stmt": [
                49,
                9,
                49,
                19
              ],
            "line": 49,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 55,
            "stmt": [
                53,
                20,
                55,
                6
              ],
            "line": 53,
            "endcolumn": 6,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                55,
                6
              ],
            "line": 53,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 31
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 55,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 58,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 61
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 64,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 64,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 71,
            "column": 69
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 71,
            "column": 40
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 37,
            "column": 35
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 72
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 54,
            "stmt": [
                54,
                13,
                54,
                22
              ],
            "line": 54,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "synch",
            "endline": 53,
            "stmt": [
                53,
                20,
                53,
                72
              ],
            "line": 53,
            "endcolumn": 72,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 46,
            "stmt": [
                46,
                1,
                46,
                16
              ],
            "line": 46,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 59,
            "stmt": [
                57,
                16,
                59,
                6
              ],
            "line": 57,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 33,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 35,
            "column": 19
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 23,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 26,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 39,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 42
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 42
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 42,
            "column": 41
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 43,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 44,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 44,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 58,
            "stmt": [
                58,
                9,
                58,
                44
              ],
            "line": 58,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 57,
            "stmt": [
                57,
                16,
                57,
                36
              ],
            "line": 57,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 56,
            "stmt": [
                56,
                1,
                56,
                14
              ],
            "line": 56,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 29,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 30
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 61,
            "stmt": [
                61,
                16,
                61,
                31
              ],
            "line": 61,
            "endcolumn": 31,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 60,
            "stmt": [
                60,
                1,
                60,
                17
              ],
            "line": 60,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 64,
            "stmt": [
                64,
                5,
                64,
                16
              ],
            "line": 64,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 63,
            "stmt": [
                63,
                1,
                63,
                34
              ],
            "line": 63,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 69,
            "stmt": [
                67,
                16,
                69,
                6
              ],
            "line": 67,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                69,
                6
              ],
            "line": 67,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 25,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 13,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 13,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 68,
            "stmt": [
                68,
                9,
                68,
                18
              ],
            "line": 68,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 67,
            "stmt": [
                67,
                16,
                67,
                29
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 66,
            "stmt": [
                66,
                1,
                66,
                12
              ],
            "line": 66,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 71,
            "stmt": [
                71,
                16,
                71,
                25
              ],
            "line": 71,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 70,
            "stmt": [
                70,
                1,
                70,
                12
              ],
            "line": 70,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 74,
            "stmt": [
                74,
                5,
                74,
                15
              ],
            "line": 74,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "synch",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                27
              ],
            "line": 73,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 80,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 80,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                80,
                6
              ],
            "line": 77,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 27
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 30,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 30,
            "column": 18
          },
        {
            "module": "synch",
            "endline": 78,
            "stmt": [
                78,
                9,
                78,
                30
              ],
            "line": 78,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 25,
            "column": 24
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 26,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 26,
            "column": 14
          },
        {
            "module": "synch",
            "endline": 79,
            "stmt": [
                79,
                9,
                79,
                26
              ],
            "line": 79,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "synch",
            "endline": 77,
            "stmt": [
                77,
                16,
                77,
                28
              ],
            "line": 77,
            "endcolumn": 28,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 76,
            "stmt": [
                76,
                1,
                76,
                26
              ],
            "line": 76,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 31,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 34,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 40,
            "column": 33
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 82,
            "stmt": [
                82,
                16,
                82,
                41
              ],
            "line": 82,
            "endcolumn": 41,
            "column": 16
          },
        {
            "module": "synch",
            "endline": 81,
            "stmt": [
                81,
                1,
                81,
                17
              ],
            "line": 81,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                29
              ],
            "line": 3,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                29
              ],
            "line": 3,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                29
              ],
            "line": 4,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                29
              ],
            "line": 4,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "fork",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                29
              ],
            "line": 4,
            "endcolumn": 18,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                29
              ],
            "line": 4,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "fork",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                29
              ],
            "line": 4,
            "endcolumn": 29,
            "column": 23
          },
        {
            "module": "fork",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                29
              ],
            "line": 4,
            "endcolumn": 29,
            "column": 22
          },
        {
            "module": "fork",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                29
              ],
            "line": 4,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "fork",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "fork",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "fork",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 31,
            "column": 20
          },
        {
            "module": "fork",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                29
              ],
            "line": 3,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                33
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                33
              ],
            "line": 7,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 25,
            "column": 14
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 69,
            "column": 29
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 33,
            "column": 29
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 48,
            "column": 36
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 53,
            "column": 50
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 54,
            "column": 36
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 54,
            "column": 36
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 69,
            "column": 29
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 63,
            "column": 57
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 69,
            "column": 66
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 69,
            "column": 29
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 72,
            "column": 14
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 72,
            "column": 14
          },
        {
            "module": "fork",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                72
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 11
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 33,
            "column": 19
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 19
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 19
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 33,
            "column": 19
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 33,
            "column": 28
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 33,
            "column": 19
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 34,
            "column": 11
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 34,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                34
              ],
            "line": 9,
            "endcolumn": 34,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                33
              ],
            "line": 7,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                33
              ],
            "line": 7,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                30
              ],
            "line": 11,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                30
              ],
            "line": 11,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "fork",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                30
              ],
            "line": 12,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                30
              ],
            "line": 12,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                30
              ],
            "line": 12,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "fork",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                30
              ],
            "line": 12,
            "endcolumn": 29,
            "column": 26
          },
        {
            "module": "fork",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                30
              ],
            "line": 12,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "fork",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                30
              ],
            "line": 12,
            "endcolumn": 30,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                30
              ],
            "line": 12,
            "endcolumn": 30,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                30
              ],
            "line": 12,
            "endcolumn": 30,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                25
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "fork",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                25
              ],
            "line": 13,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "fork",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                25
              ],
            "line": 13,
            "endcolumn": 25,
            "column": 14
          },
        {
            "module": "fork",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                25
              ],
            "line": 13,
            "endcolumn": 25,
            "column": 14
          },
        {
            "module": "fork",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                25
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                20
              ],
            "line": 14,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                20
              ],
            "line": 14,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "fork",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                20
              ],
            "line": 14,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "fork",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                20
              ],
            "line": 14,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                20
              ],
            "line": 14,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                20
              ],
            "line": 14,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "fork",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                30
              ],
            "line": 11,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                4
              ],
            "line": 3,
            "endcolumn": 4,
            "column": 3
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                4
              ],
            "line": 3,
            "endcolumn": 2,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                11
              ],
            "line": 4,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                11
              ],
            "line": 4,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                17,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                39
              ],
            "line": 8,
            "endcolumn": 38,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                39
              ],
            "line": 8,
            "endcolumn": 39,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                17,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                17,
                9,
                28
              ],
            "line": 9,
            "endcolumn": 28,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                17,
                9,
                28
              ],
            "line": 9,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                17,
                9,
                28
              ],
            "line": 9,
            "endcolumn": 28,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                17,
                9,
                28
              ],
            "line": 9,
            "endcolumn": 26,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                17,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                25,
                11,
                36
              ],
            "line": 11,
            "endcolumn": 35,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                25,
                11,
                36
              ],
            "line": 11,
            "endcolumn": 36,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                17,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                23
              ],
            "line": 6,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                11
              ],
            "line": 13,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                11
              ],
            "line": 13,
            "endcolumn": 11,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 64,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 62,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 64,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 64,
            "column": 64
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 64,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 24,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 24,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 24,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 29,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 42,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 46,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 46,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 47,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 48,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 48,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 65
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 65,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                9,
                14,
                67
              ],
            "line": 14,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 21,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 21,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 21,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 26,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 30,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 30,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 47,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                17,
                15,
                48
              ],
            "line": 15,
            "endcolumn": 48,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                9,
                16,
                22
              ],
            "line": 16,
            "endcolumn": 21,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                9,
                16,
                22
              ],
            "line": 16,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                11
              ],
            "line": 13,
            "endcolumn": 11,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                1,
                18,
                12
              ],
            "line": 18,
            "endcolumn": 10,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                1,
                18,
                12
              ],
            "line": 18,
            "endcolumn": 12,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                1,
                18,
                12
              ],
            "line": 18,
            "endcolumn": 12,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                1,
                18,
                12
              ],
            "line": 18,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                1,
                18,
                12
              ],
            "line": 18,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                1,
                1,
                19,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                1,
                1,
                19,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$pool"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "98",
            "op": "Jump"
          },
        {
            "args": "v",
            "name": "malloc",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "alloc$pool"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "alloc$pool"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "copy",
            "op": "StoreVar"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$next"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "copy",
            "op": "Return"
          },
        {
            "value": "copy",
            "op": "DelVar"
          },
        {
            "pc": "98",
            "op": "Jump"
          },
        {
            "args": "r",
            "name": "free",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "r",
            "op": "LoadVar"
          },
        {
            "value": "r",
            "op": "DelVar"
          },
        {
            "op": "Del"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "98",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "leak_check",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "alloc$pool"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "alloc_leak"
              },
            "op": "Push"
          },
        {
            "op": "Assert2"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "98",
            "op": "Jump"
          },
        {
            "args": "(s, b, e)",
            "name": "subseq",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu44",
            "op": "StoreVar"
          },
        {
            "value": "b",
            "op": "LoadVar"
          },
        {
            "value": "b",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "70",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu44",
            "op": "LoadVar"
          },
        {
            "value": "$accu44",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu44",
            "op": "StoreVar"
          },
        {
            "pc": "58",
            "op": "Jump"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu44",
            "op": "LoadVar"
          },
        {
            "value": "$accu44",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "98",
            "op": "Jump"
          },
        {
            "args": "(s, e)",
            "name": "append",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "98",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "head",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "pc",
                "value": "101"
              },
            "op": "Push"
          },
        {
            "value": "list$tail",
            "op": "Builtin"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "tail",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "46"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "sum",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "accu",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "131",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "accu",
            "op": "LoadVar"
          },
        {
            "value": "accu",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "accu",
            "op": "StoreVar"
          },
        {
            "pc": "122",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "result": "accu",
            "op": "Return"
          },
        {
            "value": "accu",
            "op": "DelVar"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "set",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu113",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "151",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu113",
            "op": "LoadVar"
          },
        {
            "value": "$accu113",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu113",
            "op": "StoreVar"
          },
        {
            "pc": "142",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu113",
            "op": "LoadVar"
          },
        {
            "value": "$accu113",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "list",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu129",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "173",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu129",
            "op": "LoadVar"
          },
        {
            "value": "$accu129",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu129",
            "op": "StoreVar"
          },
        {
            "pc": "164",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu129",
            "op": "LoadVar"
          },
        {
            "value": "$accu129",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "values",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu145",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "196",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu145",
            "op": "LoadVar"
          },
        {
            "value": "$accu145",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu145",
            "op": "StoreVar"
          },
        {
            "pc": "186",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu145",
            "op": "LoadVar"
          },
        {
            "value": "$accu145",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "items",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu161",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "k",
            "op": "Cut"
          },
        {
            "pc": "223",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu161",
            "op": "LoadVar"
          },
        {
            "value": "$accu161",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu161",
            "op": "StoreVar"
          },
        {
            "pc": "209",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu161",
            "op": "LoadVar"
          },
        {
            "value": "$accu161",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "qsort",
            "op": "Frame"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "239",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "sorted",
            "op": "StoreVar"
          },
        {
            "pc": "305",
            "op": "Jump"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "89"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "101"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "(pivot, rest)",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu196",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "266",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "<",
            "op": "Nary"
          },
        {
            "pc": "252",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu196",
            "op": "LoadVar"
          },
        {
            "value": "$accu196",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu196",
            "op": "StoreVar"
          },
        {
            "pc": "252",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu196",
            "op": "LoadVar"
          },
        {
            "value": "$accu196",
            "op": "DelVar"
          },
        {
            "value": "lower",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu213",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": "rest",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "289",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "275",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu213",
            "op": "LoadVar"
          },
        {
            "value": "$accu213",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu213",
            "op": "StoreVar"
          },
        {
            "pc": "275",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu213",
            "op": "LoadVar"
          },
        {
            "value": "$accu213",
            "op": "DelVar"
          },
        {
            "value": "higher",
            "op": "StoreVar"
          },
        {
            "value": "lower",
            "op": "LoadVar"
          },
        {
            "value": "lower",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "230"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "higher",
            "op": "LoadVar"
          },
        {
            "value": "higher",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "230"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "sorted",
            "op": "StoreVar"
          },
        {
            "result": "sorted",
            "op": "Return"
          },
        {
            "value": "sorted",
            "op": "DelVar"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "sorted",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "157"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "pc",
                "value": "230"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "reversed",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": "n",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu252",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "342",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu252",
            "op": "LoadVar"
          },
        {
            "value": "$accu252",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu252",
            "op": "StoreVar"
          },
        {
            "pc": "328",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "value": "$accu252",
            "op": "LoadVar"
          },
        {
            "value": "$accu252",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "(d, e)",
            "name": "index",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "366",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "pc": "353",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "result": "i",
            "op": "Return"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "(d, prefix)",
            "name": "startswith",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "pc": "412",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu298",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "405",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu298",
            "op": "LoadVar"
          },
        {
            "value": "$accu298",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu298",
            "op": "StoreVar"
          },
        {
            "pc": "388",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": "$accu298",
            "op": "LoadVar"
          },
        {
            "value": "$accu298",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "all",
            "op": "Nary"
          },
        {
            "pc": "415",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldl",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "440",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "426",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldr",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "456",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "pc": "478",
            "op": "Jump"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "101"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "444"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "(f, d, z)",
            "name": "reduce",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "418"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "permuted",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "526",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Choose"
          },
        {
            "value": "e",
            "op": "StoreVar"
          },
        {
            "value": "perm",
            "op": "LoadVar"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "pc": "503",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "perm",
            "op": "Return"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "(cond, s)",
            "name": "filter",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu418",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "551",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "cond",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "536",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu418",
            "op": "LoadVar"
          },
        {
            "value": "$accu418",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu418",
            "op": "StoreVar"
          },
        {
            "pc": "536",
            "op": "Jump"
          },
        {
            "value": "cond",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "$accu418",
            "op": "LoadVar"
          },
        {
            "value": "$accu418",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "(f, s)",
            "name": "map",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu439",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "577",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu439",
            "op": "LoadVar"
          },
        {
            "value": "$accu439",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu439",
            "op": "StoreVar"
          },
        {
            "pc": "565",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "$accu439",
            "op": "LoadVar"
          },
        {
            "value": "$accu439",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "empty",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "fromSet",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu463",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "Cut"
          },
        {
            "pc": "607",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu463",
            "op": "LoadVar"
          },
        {
            "value": "$accu463",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "$accu463",
            "op": "StoreVar"
          },
        {
            "pc": "597",
            "op": "Jump"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": "$accu463",
            "op": "LoadVar"
          },
        {
            "value": "$accu463",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "pc": "646",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "fromList",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "643",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "636",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "bg"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "620",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "bg"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "620",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "649"
              },
            "op": "Push"
          },
        {
            "value": "bag$multiplicity",
            "op": "Builtin"
          },
        {
            "pc": "668",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "multiplicity",
            "op": "Frame"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "662",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "pc": "666",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "671"
              },
            "op": "Push"
          },
        {
            "value": "bag$size",
            "op": "Builtin"
          },
        {
            "pc": "690",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "size",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "c",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "687",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "count",
            "op": "LoadVar"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "pc": "677",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "693"
              },
            "op": "Push"
          },
        {
            "value": "bag$bmin",
            "op": "Builtin"
          },
        {
            "pc": "709",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bmin",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "arity": 1,
            "value": "min",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "712"
              },
            "op": "Push"
          },
        {
            "value": "bag$bmax",
            "op": "Builtin"
          },
        {
            "pc": "737",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bmax",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "arity": 1,
            "value": "max",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "pc": "737",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bchoose",
            "op": "Frame"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "value": "elt",
            "op": "StoreVar"
          },
        {
            "result": "elt",
            "op": "Return"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "740"
              },
            "op": "Push"
          },
        {
            "value": "bag$add",
            "op": "Builtin"
          },
        {
            "pc": "766",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "add",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "759",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "765",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "pc",
                "value": "769"
              },
            "op": "Push"
          },
        {
            "value": "bag$remove",
            "op": "Builtin"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "remove",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "809",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "809",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "(bg, k)",
            "name": "combinations",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "825",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "900",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "671"
              },
            "op": "Apply"
          },
        {
            "value": "n",
            "op": "StoreVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "838",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "900",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "850",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "900",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "693"
              },
            "op": "Apply"
          },
        {
            "value": "hd",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "hd",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "769"
              },
            "op": "Apply"
          },
        {
            "value": "tl",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu686",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "tl",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "812"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "886",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu686",
            "op": "LoadVar"
          },
        {
            "value": "$accu686",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "hd",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "740"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu686",
            "op": "StoreVar"
          },
        {
            "pc": "872",
            "op": "Jump"
          },
        {
            "value": "hd",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu686",
            "op": "LoadVar"
          },
        {
            "value": "$accu686",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "tl",
            "op": "LoadVar"
          },
        {
            "value": "tl",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "812"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "|",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "p",
            "name": "atomic_load",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "current",
            "op": "StoreVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "current",
            "op": "Return"
          },
        {
            "value": "current",
            "op": "DelVar"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "(p, v)",
            "name": "atomic_store",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "lk",
            "name": "tas",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "oldvalue",
            "op": "StoreVar"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": "lk",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "oldvalue",
            "op": "Return"
          },
        {
            "value": "oldvalue",
            "op": "DelVar"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "(p, old, new)",
            "name": "cas",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "old",
            "op": "LoadVar"
          },
        {
            "value": "old",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "value": "success",
            "op": "StoreVar"
          },
        {
            "value": "success",
            "op": "LoadVar"
          },
        {
            "pc": "950",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "value": "new",
            "op": "LoadVar"
          },
        {
            "value": "new",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "value": "new",
            "op": "DelVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "success",
            "op": "Return"
          },
        {
            "value": "success",
            "op": "DelVar"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "initial",
            "name": "BinSema",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "initial",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "initial",
            "op": "LoadVar"
          },
        {
            "value": "initial",
            "op": "DelVar"
          },
        {
            "value": "sema",
            "op": "StoreVar"
          },
        {
            "result": "sema",
            "op": "Return"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Lock",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "956"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "acquired",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "held",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "acquire",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "1006",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "1009",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "999",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "binsema",
            "name": "release",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "binsema",
            "op": "LoadVar"
          },
        {
            "value": "binsema",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Condition",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "585"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "(c, lk)",
            "name": "wait",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "cnt",
            "op": "StoreVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "op": "Save"
          },
        {
            "op": "Continue"
          },
        {
            "value": "((), ctx)",
            "op": "StoreVar"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "pc",
                "value": "649"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "cnt",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "740"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "1094",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "pc",
                "value": "649"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "ctx",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "cnt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "pc": "1095",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "pc": "1100",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": "ctx",
            "op": "DelVar"
          },
        {
            "pc": "1103",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1076",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "lk",
            "op": "LoadVar"
          },
        {
            "value": "lk",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "c",
            "name": "notify",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "pc",
                "value": "585"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "1137",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "769"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "729"
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "c",
            "name": "notifyAll",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "585"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "cnt",
            "name": "Semaphore",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "cnt",
            "op": "LoadVar"
          },
        {
            "value": "cnt",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "sema",
            "name": "P",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "1169",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "1172",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1161",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "sema",
            "name": "V",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "sema",
            "op": "LoadVar"
          },
        {
            "value": "sema",
            "op": "DelVar"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Queue",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "q",
            "name": "get",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "1211",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "1214",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1202",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": {
                "type": "pc",
                "value": "89"
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "101"
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": "q",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "(q, item)",
            "name": "put",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "77"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "q",
            "op": "LoadVar"
          },
        {
            "value": "q",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "item",
            "op": "LoadVar"
          },
        {
            "value": "item",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "(closure, handle)",
            "name": "_helper",
            "op": "Frame"
          },
        {
            "value": "handle",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "result"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "closure",
            "op": "LoadVar"
          },
        {
            "value": "closure",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "pc",
                "value": "1017"
              },
            "op": "Push"
          },
        {
            "value": "handle",
            "op": "LoadVar"
          },
        {
            "value": "handle",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "sema"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "closure",
            "name": "fork",
            "op": "Frame"
          },
        {
            "value": {
                "type": "pc",
                "value": "6"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "sema"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "956"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "result"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "handle",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1250"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "closure",
            "op": "LoadVar"
          },
        {
            "value": "closure",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "handle",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "result": "handle",
            "op": "Return"
          },
        {
            "value": "handle",
            "op": "DelVar"
          },
        {
            "pc": "1317",
            "op": "Jump"
          },
        {
            "args": "meta",
            "name": "join",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "998"
              },
            "op": "Push"
          },
        {
            "value": "meta",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "sema"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "value": "meta",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "result"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "26"
              },
            "op": "Push"
          },
        {
            "value": "meta",
            "op": "LoadVar"
          },
        {
            "value": "meta",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "int",
                "value": 10
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "I"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "counter"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "1397",
            "op": "Jump"
          },
        {
            "args": "id",
            "name": "incrementer",
            "op": "Frame"
          },
        {
            "value": "id",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "I"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "j",
            "op": "Cut"
          },
        {
            "value": "j",
            "op": "DelVar"
          },
        {
            "pc": "1344",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "atom",
                "value": "entrei"
              },
            "op": "Push"
          },
        {
            "op": "Print"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "counter"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "counter"
                  }
              ],
            "op": "Store"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "atom",
                "value": "sai"
              },
            "op": "Push"
          },
        {
            "op": "Print"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "1328",
            "op": "Jump"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "1397",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "main",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu1118",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "tid",
            "op": "Cut"
          },
        {
            "pc": "1369",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu1118",
            "op": "LoadVar"
          },
        {
            "value": "$accu1118",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "1268"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1322"
                  }
              },
            "op": "Push"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu1118",
            "op": "StoreVar"
          },
        {
            "pc": "1355",
            "op": "Jump"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "value": "$accu1118",
            "op": "LoadVar"
          },
        {
            "value": "$accu1118",
            "op": "DelVar"
          },
        {
            "value": "tids",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu1140",
            "op": "StoreVar"
          },
        {
            "value": "tids",
            "op": "LoadVar"
          },
        {
            "value": "tids",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "tid",
            "op": "Cut"
          },
        {
            "pc": "1390",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu1140",
            "op": "LoadVar"
          },
        {
            "value": "$accu1140",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "1296"
              },
            "op": "Push"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu1140",
            "op": "StoreVar"
          },
        {
            "pc": "1378",
            "op": "Jump"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "value": "$accu1140",
            "op": "LoadVar"
          },
        {
            "value": "$accu1140",
            "op": "DelVar"
          },
        {
            "op": "Pop"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "counter"
                  }
              ],
            "op": "Load"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "1346"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "569cca55226a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1"
        },

        {
          "code": "Store alloc$pool",
          "explain": "pop value ({:}) and store into variable alloc$pool",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] } ] },
          "shared": { "alloc$pool": { "type": "dict", "value": [] } },
          "npc": "3",
          "pop": "1",
          "push": [ ],
          "pc": "2"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "4",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "3"
        },

        {
          "code": "Store alloc$next",
          "explain": "pop value (0) and store into variable alloc$next",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$next" } ] } ] },
          "shared": { "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] } },
          "npc": "5",
          "pop": "1",
          "push": [ ],
          "pc": "4"
        },

        {
          "code": "Jump 98",
          "explain": "jump over method definition: set program counter to 98",
          "explain2": { "text": "jump over method definition: set program counter to 98", "args": [] },
          "npc": "98",
          "push": [ ],
          "pc": "5"
        },

        {
          "code": "Push PC(101)",
          "explain": "push constant PC(101)",
          "explain2": { "text": "push constant PC(101)", "args": [] },
          "npc": "99",
          "push": [ { "type": "pc", "value": "101" } ],
          "pc": "98"
        },

        {
          "code": "Builtin(list$tail)",
          "explain": "pop pc (%+) and bind to built-in method list$tail",
          "explain2": { "text": "pop pc (%+) and bind to built-in method list$tail", "args": [ { "type": "pc", "value": "101" } ] },
          "npc": "100",
          "pop": "1",
          "push": [ ],
          "pc": "99"
        },

        {
          "code": "Jump 646",
          "explain": "jump over method definition: set program counter to 646",
          "explain2": { "text": "jump over method definition: set program counter to 646", "args": [] },
          "npc": "646",
          "push": [ ],
          "pc": "100"
        },

        {
          "code": "Push PC(649)",
          "explain": "push constant PC(649)",
          "explain2": { "text": "push constant PC(649)", "args": [] },
          "npc": "647",
          "push": [ { "type": "pc", "value": "649" } ],
          "pc": "646"
        },

        {
          "code": "Builtin(bag$multiplicity)",
          "explain": "pop pc (%+) and bind to built-in method bag$multiplicity",
          "explain2": { "text": "pop pc (%+) and bind to built-in method bag$multiplicity", "args": [ { "type": "pc", "value": "649" } ] },
          "npc": "648",
          "pop": "1",
          "push": [ ],
          "pc": "647"
        },

        {
          "code": "Jump 668",
          "explain": "jump over method definition: set program counter to 668",
          "explain2": { "text": "jump over method definition: set program counter to 668", "args": [] },
          "npc": "668",
          "push": [ ],
          "pc": "648"
        },

        {
          "code": "Push PC(671)",
          "explain": "push constant PC(671)",
          "explain2": { "text": "push constant PC(671)", "args": [] },
          "npc": "669",
          "push": [ { "type": "pc", "value": "671" } ],
          "pc": "668"
        },

        {
          "code": "Builtin(bag$size)",
          "explain": "pop pc (%+) and bind to built-in method bag$size",
          "explain2": { "text": "pop pc (%+) and bind to built-in method bag$size", "args": [ { "type": "pc", "value": "671" } ] },
          "npc": "670",
          "pop": "1",
          "push": [ ],
          "pc": "669"
        },

        {
          "code": "Jump 690",
          "explain": "jump over method definition: set program counter to 690",
          "explain2": { "text": "jump over method definition: set program counter to 690", "args": [] },
          "npc": "690",
          "push": [ ],
          "pc": "670"
        },

        {
          "code": "Push PC(693)",
          "explain": "push constant PC(693)",
          "explain2": { "text": "push constant PC(693)", "args": [] },
          "npc": "691",
          "push": [ { "type": "pc", "value": "693" } ],
          "pc": "690"
        },

        {
          "code": "Builtin(bag$bmin)",
          "explain": "pop pc (%+) and bind to built-in method bag$bmin",
          "explain2": { "text": "pop pc (%+) and bind to built-in method bag$bmin", "args": [ { "type": "pc", "value": "693" } ] },
          "npc": "692",
          "pop": "1",
          "push": [ ],
          "pc": "691"
        },

        {
          "code": "Jump 709",
          "explain": "jump over method definition: set program counter to 709",
          "explain2": { "text": "jump over method definition: set program counter to 709", "args": [] },
          "npc": "709",
          "push": [ ],
          "pc": "692"
        },

        {
          "code": "Push PC(712)",
          "explain": "push constant PC(712)",
          "explain2": { "text": "push constant PC(712)", "args": [] },
          "npc": "710",
          "push": [ { "type": "pc", "value": "712" } ],
          "pc": "709"
        },

        {
          "code": "Builtin(bag$bmax)",
          "explain": "pop pc (%+) and bind to built-in method bag$bmax",
          "explain2": { "text": "pop pc (%+) and bind to built-in method bag$bmax", "args": [ { "type": "pc", "value": "712" } ] },
          "npc": "711",
          "pop": "1",
          "push": [ ],
          "pc": "710"
        },

        {
          "code": "Jump 737",
          "explain": "jump over method definition: set program counter to 737",
          "explain2": { "text": "jump over method definition: set program counter to 737", "args": [] },
          "npc": "737",
          "push": [ ],
          "pc": "711"
        },

        {
          "code": "Push PC(740)",
          "explain": "push constant PC(740)",
          "explain2": { "text": "push constant PC(740)", "args": [] },
          "npc": "738",
          "push": [ { "type": "pc", "value": "740" } ],
          "pc": "737"
        },

        {
          "code": "Builtin(bag$add)",
          "explain": "pop pc (%+) and bind to built-in method bag$add",
          "explain2": { "text": "pop pc (%+) and bind to built-in method bag$add", "args": [ { "type": "pc", "value": "740" } ] },
          "npc": "739",
          "pop": "1",
          "push": [ ],
          "pc": "738"
        },

        {
          "code": "Jump 766",
          "explain": "jump over method definition: set program counter to 766",
          "explain2": { "text": "jump over method definition: set program counter to 766", "args": [] },
          "npc": "766",
          "push": [ ],
          "pc": "739"
        },

        {
          "code": "Push PC(769)",
          "explain": "push constant PC(769)",
          "explain2": { "text": "push constant PC(769)", "args": [] },
          "npc": "767",
          "push": [ { "type": "pc", "value": "769" } ],
          "pc": "766"
        },

        {
          "code": "Builtin(bag$remove)",
          "explain": "pop pc (%+) and bind to built-in method bag$remove",
          "explain2": { "text": "pop pc (%+) and bind to built-in method bag$remove", "args": [ { "type": "pc", "value": "769" } ] },
          "npc": "768",
          "pop": "1",
          "push": [ ],
          "pc": "767"
        },

        {
          "code": "Jump 1317",
          "explain": "jump over method definition: set program counter to 1317",
          "explain2": { "text": "jump over method definition: set program counter to 1317", "args": [] },
          "npc": "1317",
          "push": [ ],
          "pc": "768"
        },

        {
          "code": "Push 10",
          "explain": "push constant 10",
          "explain2": { "text": "push constant 10", "args": [] },
          "npc": "1318",
          "push": [ { "type": "int", "value": "10" } ],
          "pc": "1317"
        },

        {
          "code": "Store I",
          "explain": "pop value (10) and store into variable I",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "10" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "I" } ] } ] },
          "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] } },
          "npc": "1319",
          "pop": "1",
          "push": [ ],
          "pc": "1318"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1320",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1319"
        },

        {
          "code": "Store counter",
          "explain": "pop value (0) and store into variable counter",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "counter" } ] } ] },
          "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "counter": { "type": "int", "value": "0" } },
          "npc": "1321",
          "pop": "1",
          "push": [ ],
          "pc": "1320"
        },

        {
          "code": "Jump 1397",
          "explain": "jump over method definition: set program counter to 1397",
          "explain2": { "text": "jump over method definition: set program counter to 1397", "args": [] },
          "npc": "1397",
          "push": [ ],
          "pc": "1321"
        },

        {
          "code": "Push ?PC(1346)",
          "explain": "push constant ?PC(1346)",
          "explain2": { "text": "push constant ?PC(1346)", "args": [] },
          "npc": "1398",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1346" }, "args": [ ] } ],
          "pc": "1397"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "1399",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1398"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values ([], ?PC(1346)); push result (?PC(1346)[[]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "1346" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1346" }, "args": [{ "type": "list", "value": [] } ] } ] },
          "npc": "1400",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1346" }, "args": [{ "type": "list", "value": [] } ] } ],
          "pc": "1399"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1401",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1400"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg ([]), and pc (1346: \"main\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1346: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "atom", "value": "main" } ] },
          "npc": "1402",
          "pop": "2",
          "push": [ ],
          "pc": "1401"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "1402",
          "mode": "terminated",
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "1402"
        }

      ],
      "ctxbag": {
          "7e8131e0011a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e0011a",
          "fp": "1",
          "name": "main()",
          "entry": "1346",
          "pc": "1346",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
{"pc": "1346","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "main", "args": "()", "value": { "type": "list", "value": [] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "2",
      "tid": "1",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "counter": { "type": "int", "value": "0" } },
      "name": "main()",
      "context": {
        "tid": "1",
        "hvalue": "7e8131e0011a",
        "fp": "1",
        "name": "main()",
        "entry": "1346",
        "pc": "1346",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "1346","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "main", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame main()",
          "explain": "pop argument () and run method \"main\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "main" } ] },
          "npc": "1347",
          "fp": "1",
          "trace": [
{"pc": "1347","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1346"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "1348",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1347"
        },

        {
          "code": "StoreVar $accu1118",
          "explain": "pop value ({}) and store locally in variable \\\"$accu1118\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu1118\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "1349",
          "local": { "$accu1118": { "type": "set", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "1348"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "1350",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1349"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1351",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1350"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (0, {}); insert first value into the second; push result ({ 0 })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "1352",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "1351"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1353",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1352"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (1, { 0 }); insert first value into the second; push result ({ 0, 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1354",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1353"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1355",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1354"
        },

        {
          "code": "Cut(tid)",
          "explain": "pop index (0) and value ({ 0, 1 }); assign value (0) to tid; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to tid; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1356",
          "local": { "$accu1118": { "type": "set", "value": [] }, "tid": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1355"
        },

        {
          "code": "JumpCond False 1369",
          "explain": "pop value (True), compare to False, and jump to 1369 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1369 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1357",
          "pop": "1",
          "push": [ ],
          "pc": "1356"
        },

        {
          "code": "LoadVar $accu1118",
          "explain": "push value ({}) of variable \"$accu1118\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu1118" } ] },
          "npc": "1358",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1357"
        },

        {
          "code": "DelVar $accu1118",
          "explain": "delete method variable $accu1118",
          "explain2": { "text": "delete method variable $accu1118", "args": [] },
          "npc": "1359",
          "local": { "tid": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "1358"
        },

        {
          "code": "Push PC(1268)",
          "explain": "push program counter constant 1268 (%+)",
          "explain2": { "text": "push program counter constant 1268 (%+)", "args": [ { "type": "atom", "value": "fork" } ] },
          "npc": "1360",
          "push": [ { "type": "pc", "value": "1268" } ],
          "pc": "1359"
        },

        {
          "code": "Push ?PC(1322)",
          "explain": "push constant ?PC(1322)",
          "explain2": { "text": "push constant ?PC(1322)", "args": [] },
          "npc": "1361",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [ ] } ],
          "pc": "1360"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (0) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "tid" } ] },
          "npc": "1362",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1361"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "1363",
          "local": { },
          "push": [ ],
          "pc": "1362"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?PC(1322)); push result (?PC(1322)[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "1364",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ],
          "pc": "1363"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (?PC(1322)[0], PC(1268)); push result (?PC(1268)[?PC(1322)[0]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "pc", "value": "1268" }, { "type": "address", "func": { "type": "pc", "value": "1268" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ] } ] },
          "npc": "1365",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1268" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ] } ],
          "pc": "1364"
        },

        {
          "code": "Load",
          "explain": "pop an argument (?PC(1322)[0]) and call method (1268: \"fork\")",
          "explain2": { "text": "pop an argument (#+) and call method (1268: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "atom", "value": "fork" } ] },
          "npc": "1268",
          "fp": "7",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1268","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] },
"method": "fork(?PC(1322)[0])","calltype": "normal","vars":{ },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "21842" }, { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ],
          "pc": "1365"
        },

        {
          "code": "Frame fork(closure)",
          "explain": "pop argument (?PC(1322)[0]), assign to closure, and run method \"fork\"",
          "explain2": { "text": "pop argument (#+), assign to closure, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "atom", "value": "fork" } ] },
          "npc": "1269",
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1268"
        },

        {
          "code": "Push PC(6)",
          "explain": "push program counter constant 6 (%+)",
          "explain2": { "text": "push program counter constant 6 (%+)", "args": [ { "type": "atom", "value": "malloc" } ] },
          "npc": "1270",
          "push": [ { "type": "pc", "value": "6" } ],
          "pc": "1269"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1271",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1270"
        },

        {
          "code": "Push \"sema\"",
          "explain": "push constant \"sema\"",
          "explain2": { "text": "push constant \"sema\"", "args": [] },
          "npc": "1272",
          "push": [ { "type": "atom", "value": "sema" } ],
          "pc": "1271"
        },

        {
          "code": "Push PC(956)",
          "explain": "push program counter constant 956 (%+)",
          "explain2": { "text": "push program counter constant 956 (%+)", "args": [ { "type": "atom", "value": "BinSema" } ] },
          "npc": "1273",
          "push": [ { "type": "pc", "value": "956" } ],
          "pc": "1272"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "1274",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1273"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (True, PC(956)); push result (?PC(956)[True])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "pc", "value": "956" }, { "type": "address", "func": { "type": "pc", "value": "956" }, "args": [{ "type": "bool", "value": "True" } ] } ] },
          "npc": "1275",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "956" }, "args": [{ "type": "bool", "value": "True" } ] } ],
          "pc": "1274"
        },

        {
          "code": "Load",
          "explain": "pop an argument (True) and call method (956: \"BinSema\")",
          "explain2": { "text": "pop an argument (#+) and call method (956: #+)", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "BinSema" } ] },
          "npc": "956",
          "fp": "13",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1276","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] },
"method": "fork(?PC(1322)[0])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "956","xpc": "956","method_name": { "type": "atom", "value": "BinSema" },
"method_arg": { "type": "bool", "value": "True" },
"method": "BinSema(True)","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 12}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "20402" }, { "type": "bool", "value": "True" } ],
          "pc": "1275"
        },

        {
          "code": "Frame BinSema(initial)",
          "explain": "pop argument (True), assign to initial, and run method \"BinSema\"",
          "explain2": { "text": "pop argument (#+), assign to initial, and run method #+", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "BinSema" } ] },
          "npc": "957",
          "local": { "initial": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "closure" }, "value": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } } ] } ],
          "pc": "956"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "958",
          "atomic": "1",
          "push": [ ],
          "pc": "957"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "959",
          "readonly": "1",
          "push": [ ],
          "pc": "958"
        },

        {
          "code": "LoadVar initial",
          "explain": "push value (True) of variable \"initial\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "initial" } ] },
          "npc": "960",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "959"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "961",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "960"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "962",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "961"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (False, {}); insert first value into the second; push result ({ False })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "963",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "962"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "964",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "963"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "965",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "964"
        },

        {
          "code": "2-ary in",
          "explain": "pop 2 values ({ False, True }, True); check if the second value is a member of the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the second value is a member of the first; push result (#+)", "args": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "966",
          "pop": "1",
          "push": [ ],
          "pc": "965"
        },

        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "explain2": { "text": "pop a value (True); do not raise exception", "args": [ ] },
          "npc": "967",
          "pop": "1",
          "push": [ ],
          "pc": "966"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "968",
          "readonly": "0",
          "push": [ ],
          "pc": "967"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "969",
          "atomic": "0",
          "push": [ ],
          "pc": "968"
        },

        {
          "code": "LoadVar initial",
          "explain": "push value (True) of variable \"initial\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "initial" } ] },
          "npc": "970",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "969"
        },

        {
          "code": "DelVar initial",
          "explain": "delete method variable initial",
          "explain2": { "text": "delete method variable initial", "args": [] },
          "npc": "971",
          "local": { },
          "push": [ ],
          "pc": "970"
        },

        {
          "code": "StoreVar sema",
          "explain": "pop value (True) and store locally in variable \\\"sema\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"sema\"", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "972",
          "local": { "sema": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "971"
        },

        {
          "code": "ReturnOp(sema)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "1276",
          "fp": "7",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1276","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] },
"method": "fork(?PC(1322)[0])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 6}
          ],
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },
          "pop": "3",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "972"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (True, \"sema\", {:}); add key/value pair to dictionary; push result ({ \"sema\": True })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "sema" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ] },
          "npc": "1277",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ],
          "pc": "1276"
        },

        {
          "code": "Push \"result\"",
          "explain": "push constant \"result\"",
          "explain2": { "text": "push constant \"result\"", "args": [] },
          "npc": "1278",
          "push": [ { "type": "atom", "value": "result" } ],
          "pc": "1277"
        },

        {
          "code": "Push None",
          "explain": "push constant None",
          "explain2": { "text": "push constant None", "args": [] },
          "npc": "1279",
          "push": [ { "type": "address" } ],
          "pc": "1278"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (None, \"result\", { \"sema\": True }); add key/value pair to dictionary; push result ({ \"result\": None, \"sema\": True })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "address" }, { "type": "atom", "value": "result" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ] },
          "npc": "1280",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ],
          "pc": "1279"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ({ \"result\": None, \"sema\": True }, PC(6)); push result (?PC(6)[{ \"result\": None, \"sema\": True }])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "pc", "value": "6" }, { "type": "address", "func": { "type": "pc", "value": "6" }, "args": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ] } ] },
          "npc": "1281",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "6" }, "args": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ] } ],
          "pc": "1280"
        },

        {
          "code": "Load",
          "explain": "pop an argument ({ \"result\": None, \"sema\": True }) and call method (6: \"malloc\")",
          "explain2": { "text": "pop an argument (#+) and call method (6: #+)", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "atom", "value": "malloc" } ] },
          "npc": "6",
          "fp": "10",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] },
"method": "fork(?PC(1322)[0])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "6","xpc": "6","method_name": { "type": "atom", "value": "malloc" },
"method_arg": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] },
"method": "malloc({ \"result\": None, \"sema\": True })","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 9}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "20498" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ],
          "pc": "1281"
        },

        {
          "code": "Frame malloc(v)",
          "explain": "pop argument ({ \"result\": None, \"sema\": True }), assign to v, and run method \"malloc\"",
          "explain2": { "text": "pop argument (#+), assign to v, and run method #+", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "atom", "value": "malloc" } ] },
          "npc": "7",
          "local": { "v": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "closure" }, "value": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } } ] } ],
          "pc": "6"
        }

      ],
      "ctxbag": {
          "7e812b20023a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e812b20023a",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "7",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20498" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "closure" }, "value": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] },
"method": "fork(?PC(1322)[0])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "7","xpc": "6","method_name": { "type": "atom", "value": "malloc" },
"method_arg": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] },
"method": "malloc({ \"result\": None, \"sema\": True })","calltype": "normal","vars":{ "v": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3",
      "tid": "1",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [] }, "counter": { "type": "int", "value": "0" } },
      "name": "main()",
      "context": {
        "tid": "1",
        "hvalue": "7e812b20023a",
        "fp": "10",
        "name": "main()",
        "entry": "1346",
        "pc": "7",
        "sp": "10",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20498" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "closure" }, "value": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } } ] }],
        "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] },
"method": "fork(?PC(1322)[0])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "7","xpc": "6","method_name": { "type": "atom", "value": "malloc" },
"method_arg": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] },
"method": "malloc({ \"result\": None, \"sema\": True })","calltype": "normal","vars":{ "v": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } },"sp": 9}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "8",
          "fp": "10",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] },
"method": "fork(?PC(1322)[0])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "8","xpc": "6","method_name": { "type": "atom", "value": "malloc" },
"method_arg": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] },
"method": "malloc({ \"result\": None, \"sema\": True })","calltype": "normal","vars":{ "v": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } },"sp": 9}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "7"
        },

        {
          "code": "Push ?alloc$pool",
          "explain": "push constant ?alloc$pool",
          "explain2": { "text": "push constant ?alloc$pool", "args": [] },
          "npc": "9",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] } ],
          "pc": "8"
        },

        {
          "code": "Load alloc$next",
          "explain": "push value (0) of variable alloc$next",
          "explain2": { "text": "push value (#+) of variable alloc$next", "args": [ { "type": "int", "value": "0" } ] },
          "npc": "10",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "9"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?alloc$pool); push result (?alloc$pool[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "11",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "10"
        },

        {
          "code": "LoadVar v",
          "explain": "push value ({ \"result\": None, \"sema\": True }) of variable \"v\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "atom", "value": "v" } ] },
          "npc": "12",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ],
          "pc": "11"
        },

        {
          "code": "DelVar v",
          "explain": "delete method variable v",
          "explain2": { "text": "delete method variable v", "args": [] },
          "npc": "13",
          "local": { },
          "push": [ ],
          "pc": "12"
        },

        {
          "code": "Store",
          "explain": "pop value ({ \"result\": None, \"sema\": True }) and address (?alloc$pool[0]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
          "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "0" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
          "npc": "14",
          "pop": "2",
          "push": [ ],
          "pc": "13"
        },

        {
          "code": "Push ?alloc$pool",
          "explain": "push constant ?alloc$pool",
          "explain2": { "text": "push constant ?alloc$pool", "args": [] },
          "npc": "15",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] } ],
          "pc": "14"
        },

        {
          "code": "Load alloc$next",
          "explain": "push value (0) of variable alloc$next",
          "explain2": { "text": "push value (#+) of variable alloc$next", "args": [ { "type": "int", "value": "0" } ] },
          "npc": "16",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "15"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?alloc$pool); push result (?alloc$pool[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "17",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "16"
        },

        {
          "code": "StoreVar copy",
          "explain": "pop value (?alloc$pool[0]) and store locally in variable \\\"copy\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"copy\"", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "18",
          "local": { "copy": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "17"
        },

        {
          "code": "Load alloc$next",
          "explain": "push value (0) of variable alloc$next",
          "explain2": { "text": "push value (#+) of variable alloc$next", "args": [ { "type": "int", "value": "0" } ] },
          "npc": "19",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "18"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "20",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "19"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "21",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "Store alloc$next",
          "explain": "pop value (1) and store into variable alloc$next",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$next" } ] } ] },
          "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "1" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
          "npc": "22",
          "pop": "1",
          "push": [ ],
          "pc": "21"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "23",
          "atomic": "0",
          "push": [ ],
          "pc": "22"
        },

        {
          "code": "ReturnOp(copy)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "1282",
          "fp": "7",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] },
"method": "fork(?PC(1322)[0])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },"sp": 6}
          ],
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } },
          "pop": "3",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "23"
        },

        {
          "code": "StoreVar handle",
          "explain": "pop value (?alloc$pool[0]) and store locally in variable \\\"handle\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"handle\"", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "1283",
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1282"
        },

        {
          "code": "Push ?PC(1250)",
          "explain": "push constant ?PC(1250)",
          "explain2": { "text": "push constant ?PC(1250)", "args": [] },
          "npc": "1284",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [ ] } ],
          "pc": "1283"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1285",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1284"
        },

        {
          "code": "LoadVar closure",
          "explain": "push value (?PC(1322)[0]) of variable \"closure\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "atom", "value": "closure" } ] },
          "npc": "1286",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ],
          "pc": "1285"
        },

        {
          "code": "DelVar closure",
          "explain": "delete method variable closure",
          "explain2": { "text": "delete method variable closure", "args": [] },
          "npc": "1287",
          "local": { "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },
          "push": [ ],
          "pc": "1286"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?PC(1322)[0], []); insert first value into the second; push result ([?PC(1322)[0]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ] } ] },
          "npc": "1288",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ] } ],
          "pc": "1287"
        },

        {
          "code": "LoadVar handle",
          "explain": "push value (?alloc$pool[0]) of variable \"handle\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "handle" } ] },
          "npc": "1289",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1288"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?alloc$pool[0], [?PC(1322)[0]]); insert first value into the second; push result ([?PC(1322)[0], ?alloc$pool[0]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "1290",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "1289"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values ([?PC(1322)[0], ?alloc$pool[0]], ?PC(1250)); push result (?PC(1250)[[?PC(1322)[0], ?alloc$pool[0]]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }, { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ] } ] },
          "npc": "1291",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ] } ],
          "pc": "1290"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1292",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1291"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg ([?PC(1322)[0], ?alloc$pool[0]]), and pc (1250: \"_helper\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1250: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "_helper" } ] },
          "npc": "1293",
          "pop": "2",
          "push": [ ],
          "pc": "1292"
        },

        {
          "code": "ReturnOp(handle)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "1366",
          "fp": "1",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1293"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (?alloc$pool[0], {}); insert first value into the second; push result ({ ?alloc$pool[0] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "1367",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "1366"
        },

        {
          "code": "StoreVar $accu1118",
          "explain": "pop value ({ ?alloc$pool[0] }) and store locally in variable \\\"$accu1118\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu1118\"", "args": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "1368",
          "local": { "$accu1118": { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1367"
        },

        {
          "code": "Jump 1355",
          "explain": "set program counter to 1355",
          "explain2": { "text": "set program counter to 1355", "args": [] },
          "npc": "1355",
          "push": [ ],
          "pc": "1368"
        },

        {
          "code": "Cut(tid)",
          "explain": "pop index (1) and value ({ 0, 1 }); assign value (1) to tid; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to tid; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "1356",
          "local": { "$accu1118": { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }, "tid": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "1355"
        },

        {
          "code": "JumpCond False 1369",
          "explain": "pop value (True), compare to False, and jump to 1369 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1369 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1357",
          "pop": "1",
          "push": [ ],
          "pc": "1356"
        },

        {
          "code": "LoadVar $accu1118",
          "explain": "push value ({ ?alloc$pool[0] }) of variable \"$accu1118\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "$accu1118" } ] },
          "npc": "1358",
          "push": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "1357"
        },

        {
          "code": "DelVar $accu1118",
          "explain": "delete method variable $accu1118",
          "explain2": { "text": "delete method variable $accu1118", "args": [] },
          "npc": "1359",
          "local": { "tid": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "1358"
        },

        {
          "code": "Push PC(1268)",
          "explain": "push program counter constant 1268 (%+)",
          "explain2": { "text": "push program counter constant 1268 (%+)", "args": [ { "type": "atom", "value": "fork" } ] },
          "npc": "1360",
          "push": [ { "type": "pc", "value": "1268" } ],
          "pc": "1359"
        },

        {
          "code": "Push ?PC(1322)",
          "explain": "push constant ?PC(1322)",
          "explain2": { "text": "push constant ?PC(1322)", "args": [] },
          "npc": "1361",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [ ] } ],
          "pc": "1360"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (1) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "tid" } ] },
          "npc": "1362",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1361"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "1363",
          "local": { },
          "push": [ ],
          "pc": "1362"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(1322)); push result (?PC(1322)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "1364",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1363"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (?PC(1322)[1], PC(1268)); push result (?PC(1268)[?PC(1322)[1]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "pc", "value": "1268" }, { "type": "address", "func": { "type": "pc", "value": "1268" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ] } ] },
          "npc": "1365",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1268" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ] } ],
          "pc": "1364"
        },

        {
          "code": "Load",
          "explain": "pop an argument (?PC(1322)[1]) and call method (1268: \"fork\")",
          "explain2": { "text": "pop an argument (#+) and call method (1268: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "atom", "value": "fork" } ] },
          "npc": "1268",
          "fp": "7",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1268","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] },
"method": "fork(?PC(1322)[1])","calltype": "normal","vars":{ },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "21842" }, { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1365"
        },

        {
          "code": "Frame fork(closure)",
          "explain": "pop argument (?PC(1322)[1]), assign to closure, and run method \"fork\"",
          "explain2": { "text": "pop argument (#+), assign to closure, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "atom", "value": "fork" } ] },
          "npc": "1269",
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1268"
        },

        {
          "code": "Push PC(6)",
          "explain": "push program counter constant 6 (%+)",
          "explain2": { "text": "push program counter constant 6 (%+)", "args": [ { "type": "atom", "value": "malloc" } ] },
          "npc": "1270",
          "push": [ { "type": "pc", "value": "6" } ],
          "pc": "1269"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1271",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1270"
        },

        {
          "code": "Push \"sema\"",
          "explain": "push constant \"sema\"",
          "explain2": { "text": "push constant \"sema\"", "args": [] },
          "npc": "1272",
          "push": [ { "type": "atom", "value": "sema" } ],
          "pc": "1271"
        },

        {
          "code": "Push PC(956)",
          "explain": "push program counter constant 956 (%+)",
          "explain2": { "text": "push program counter constant 956 (%+)", "args": [ { "type": "atom", "value": "BinSema" } ] },
          "npc": "1273",
          "push": [ { "type": "pc", "value": "956" } ],
          "pc": "1272"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "1274",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1273"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (True, PC(956)); push result (?PC(956)[True])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "pc", "value": "956" }, { "type": "address", "func": { "type": "pc", "value": "956" }, "args": [{ "type": "bool", "value": "True" } ] } ] },
          "npc": "1275",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "956" }, "args": [{ "type": "bool", "value": "True" } ] } ],
          "pc": "1274"
        },

        {
          "code": "Load",
          "explain": "pop an argument (True) and call method (956: \"BinSema\")",
          "explain2": { "text": "pop an argument (#+) and call method (956: #+)", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "BinSema" } ] },
          "npc": "956",
          "fp": "13",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1276","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] },
"method": "fork(?PC(1322)[1])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 6},{"pc": "956","xpc": "956","method_name": { "type": "atom", "value": "BinSema" },
"method_arg": { "type": "bool", "value": "True" },
"method": "BinSema(True)","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 12}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "20402" }, { "type": "bool", "value": "True" } ],
          "pc": "1275"
        },

        {
          "code": "Frame BinSema(initial)",
          "explain": "pop argument (True), assign to initial, and run method \"BinSema\"",
          "explain2": { "text": "pop argument (#+), assign to initial, and run method #+", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "BinSema" } ] },
          "npc": "957",
          "local": { "initial": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "closure" }, "value": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } } ] } ],
          "pc": "956"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "958",
          "atomic": "1",
          "push": [ ],
          "pc": "957"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "959",
          "readonly": "1",
          "push": [ ],
          "pc": "958"
        },

        {
          "code": "LoadVar initial",
          "explain": "push value (True) of variable \"initial\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "initial" } ] },
          "npc": "960",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "959"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "961",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "960"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "962",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "961"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (False, {}); insert first value into the second; push result ({ False })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "963",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "962"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "964",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "963"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "set", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "965",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "964"
        },

        {
          "code": "2-ary in",
          "explain": "pop 2 values ({ False, True }, True); check if the second value is a member of the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the second value is a member of the first; push result (#+)", "args": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "966",
          "pop": "1",
          "push": [ ],
          "pc": "965"
        },

        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "explain2": { "text": "pop a value (True); do not raise exception", "args": [ ] },
          "npc": "967",
          "pop": "1",
          "push": [ ],
          "pc": "966"
        },

        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "explain2": { "text": "decrement readonly counter from 1 to 0: no longer readonly", "args": [ ] },
          "npc": "968",
          "readonly": "0",
          "push": [ ],
          "pc": "967"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "969",
          "atomic": "0",
          "push": [ ],
          "pc": "968"
        },

        {
          "code": "LoadVar initial",
          "explain": "push value (True) of variable \"initial\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "initial" } ] },
          "npc": "970",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "969"
        },

        {
          "code": "DelVar initial",
          "explain": "delete method variable initial",
          "explain2": { "text": "delete method variable initial", "args": [] },
          "npc": "971",
          "local": { },
          "push": [ ],
          "pc": "970"
        },

        {
          "code": "StoreVar sema",
          "explain": "pop value (True) and store locally in variable \\\"sema\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"sema\"", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "972",
          "local": { "sema": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "971"
        },

        {
          "code": "ReturnOp(sema)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "1276",
          "fp": "7",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1276","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] },
"method": "fork(?PC(1322)[1])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 6}
          ],
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },
          "pop": "3",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "972"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (True, \"sema\", {:}); add key/value pair to dictionary; push result ({ \"sema\": True })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "atom", "value": "sema" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ] },
          "npc": "1277",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ],
          "pc": "1276"
        },

        {
          "code": "Push \"result\"",
          "explain": "push constant \"result\"",
          "explain2": { "text": "push constant \"result\"", "args": [] },
          "npc": "1278",
          "push": [ { "type": "atom", "value": "result" } ],
          "pc": "1277"
        },

        {
          "code": "Push None",
          "explain": "push constant None",
          "explain2": { "text": "push constant None", "args": [] },
          "npc": "1279",
          "push": [ { "type": "address" } ],
          "pc": "1278"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (None, \"result\", { \"sema\": True }); add key/value pair to dictionary; push result ({ \"result\": None, \"sema\": True })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "address" }, { "type": "atom", "value": "result" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ] },
          "npc": "1280",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ],
          "pc": "1279"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ({ \"result\": None, \"sema\": True }, PC(6)); push result (?PC(6)[{ \"result\": None, \"sema\": True }])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "pc", "value": "6" }, { "type": "address", "func": { "type": "pc", "value": "6" }, "args": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ] } ] },
          "npc": "1281",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "6" }, "args": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ] } ],
          "pc": "1280"
        },

        {
          "code": "Load",
          "explain": "pop an argument ({ \"result\": None, \"sema\": True }) and call method (6: \"malloc\")",
          "explain2": { "text": "pop an argument (#+) and call method (6: #+)", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "atom", "value": "malloc" } ] },
          "npc": "6",
          "fp": "10",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] },
"method": "fork(?PC(1322)[1])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 6},{"pc": "6","xpc": "6","method_name": { "type": "atom", "value": "malloc" },
"method_arg": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] },
"method": "malloc({ \"result\": None, \"sema\": True })","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 9}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "20498" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ],
          "pc": "1281"
        },

        {
          "code": "Frame malloc(v)",
          "explain": "pop argument ({ \"result\": None, \"sema\": True }), assign to v, and run method \"malloc\"",
          "explain2": { "text": "pop argument (#+), assign to v, and run method #+", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "atom", "value": "malloc" } ] },
          "npc": "7",
          "local": { "v": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "closure" }, "value": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } } ] } ],
          "pc": "6"
        }

      ],
      "ctxbag": {
          "7e812b20046a": "1",
          "7e812b20058a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e812b20058a",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "7",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20498" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "closure" }, "value": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } } ] }],
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] },
"method": "fork(?PC(1322)[1])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 6},{"pc": "7","xpc": "6","method_name": { "type": "atom", "value": "malloc" },
"method_arg": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] },
"method": "malloc({ \"result\": None, \"sema\": True })","calltype": "normal","vars":{ "v": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7e812b20046a",
          "fp": "1",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1250",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }],
          "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "5",
      "tid": "1",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "1" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
      "name": "main()",
      "context": {
        "tid": "1",
        "hvalue": "7e812b20058a",
        "fp": "10",
        "name": "main()",
        "entry": "1346",
        "pc": "7",
        "sp": "10",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20498" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "closure" }, "value": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } } ] }],
        "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] },
"method": "fork(?PC(1322)[1])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 6},{"pc": "7","xpc": "6","method_name": { "type": "atom", "value": "malloc" },
"method_arg": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] },
"method": "malloc({ \"result\": None, \"sema\": True })","calltype": "normal","vars":{ "v": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } },"sp": 9}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "8",
          "fp": "10",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] },
"method": "fork(?PC(1322)[1])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 6},{"pc": "8","xpc": "6","method_name": { "type": "atom", "value": "malloc" },
"method_arg": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] },
"method": "malloc({ \"result\": None, \"sema\": True })","calltype": "normal","vars":{ "v": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } },"sp": 9}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "7"
        },

        {
          "code": "Push ?alloc$pool",
          "explain": "push constant ?alloc$pool",
          "explain2": { "text": "push constant ?alloc$pool", "args": [] },
          "npc": "9",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] } ],
          "pc": "8"
        },

        {
          "code": "Load alloc$next",
          "explain": "push value (1) of variable alloc$next",
          "explain2": { "text": "push value (#+) of variable alloc$next", "args": [ { "type": "int", "value": "1" } ] },
          "npc": "10",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "9"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?alloc$pool); push result (?alloc$pool[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "11",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ],
          "pc": "10"
        },

        {
          "code": "LoadVar v",
          "explain": "push value ({ \"result\": None, \"sema\": True }) of variable \"v\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "atom", "value": "v" } ] },
          "npc": "12",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } ],
          "pc": "11"
        },

        {
          "code": "DelVar v",
          "explain": "delete method variable v",
          "explain2": { "text": "delete method variable v", "args": [] },
          "npc": "13",
          "local": { },
          "push": [ ],
          "pc": "12"
        },

        {
          "code": "Store",
          "explain": "pop value ({ \"result\": None, \"sema\": True }) and address (?alloc$pool[1]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
          "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "1" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
          "npc": "14",
          "pop": "2",
          "push": [ ],
          "pc": "13"
        },

        {
          "code": "Push ?alloc$pool",
          "explain": "push constant ?alloc$pool",
          "explain2": { "text": "push constant ?alloc$pool", "args": [] },
          "npc": "15",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] } ],
          "pc": "14"
        },

        {
          "code": "Load alloc$next",
          "explain": "push value (1) of variable alloc$next",
          "explain2": { "text": "push value (#+) of variable alloc$next", "args": [ { "type": "int", "value": "1" } ] },
          "npc": "16",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "15"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?alloc$pool); push result (?alloc$pool[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "17",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ],
          "pc": "16"
        },

        {
          "code": "StoreVar copy",
          "explain": "pop value (?alloc$pool[1]) and store locally in variable \\\"copy\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"copy\"", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "18",
          "local": { "copy": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "17"
        },

        {
          "code": "Load alloc$next",
          "explain": "push value (1) of variable alloc$next",
          "explain2": { "text": "push value (#+) of variable alloc$next", "args": [ { "type": "int", "value": "1" } ] },
          "npc": "19",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "18"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "20",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "19"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 1); add the integers; push result (2)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] },
          "npc": "21",
          "pop": "2",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "20"
        },

        {
          "code": "Store alloc$next",
          "explain": "pop value (2) and store into variable alloc$next",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$next" } ] } ] },
          "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "2" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
          "npc": "22",
          "pop": "1",
          "push": [ ],
          "pc": "21"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "23",
          "atomic": "0",
          "push": [ ],
          "pc": "22"
        },

        {
          "code": "ReturnOp(copy)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1282",
          "fp": "7",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1282","xpc": "1268","method_name": { "type": "atom", "value": "fork" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] },
"method": "fork(?PC(1322)[1])","calltype": "normal","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },"sp": 6}
          ],
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } },
          "pop": "3",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ],
          "pc": "23"
        },

        {
          "code": "StoreVar handle",
          "explain": "pop value (?alloc$pool[1]) and store locally in variable \\\"handle\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"handle\"", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1283",
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1282"
        },

        {
          "code": "Push ?PC(1250)",
          "explain": "push constant ?PC(1250)",
          "explain2": { "text": "push constant ?PC(1250)", "args": [] },
          "npc": "1284",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [ ] } ],
          "pc": "1283"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "1285",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1284"
        },

        {
          "code": "LoadVar closure",
          "explain": "push value (?PC(1322)[1]) of variable \"closure\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "atom", "value": "closure" } ] },
          "npc": "1286",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1285"
        },

        {
          "code": "DelVar closure",
          "explain": "delete method variable closure",
          "explain2": { "text": "delete method variable closure", "args": [] },
          "npc": "1287",
          "local": { "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },
          "push": [ ],
          "pc": "1286"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?PC(1322)[1], []); insert first value into the second; push result ([?PC(1322)[1]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ] } ] },
          "npc": "1288",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ] } ],
          "pc": "1287"
        },

        {
          "code": "LoadVar handle",
          "explain": "push value (?alloc$pool[1]) of variable \"handle\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] }, { "type": "atom", "value": "handle" } ] },
          "npc": "1289",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1288"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?alloc$pool[1], [?PC(1322)[1]]); insert first value into the second; push result ([?PC(1322)[1], ?alloc$pool[1]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "1290",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "1289"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values ([?PC(1322)[1], ?alloc$pool[1]], ?PC(1250)); push result (?PC(1250)[[?PC(1322)[1], ?alloc$pool[1]]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ] } ] },
          "npc": "1291",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1250" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ] } ],
          "pc": "1290"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "1292",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1291"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg ([?PC(1322)[1], ?alloc$pool[1]]), and pc (1250: \"_helper\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (1250: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "_helper" } ] },
          "npc": "1293",
          "pop": "2",
          "push": [ ],
          "pc": "1292"
        },

        {
          "code": "ReturnOp(handle)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1366",
          "fp": "1",
          "trace": [
{"pc": "1366","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1293"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (?alloc$pool[1], { ?alloc$pool[0] }); insert first value into the second; push result ({ ?alloc$pool[0], ?alloc$pool[1] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "1367",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "1366"
        },

        {
          "code": "StoreVar $accu1118",
          "explain": "pop value ({ ?alloc$pool[0], ?alloc$pool[1] }) and store locally in variable \\\"$accu1118\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu1118\"", "args": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "1368",
          "local": { "$accu1118": { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1367"
        },

        {
          "code": "Jump 1355",
          "explain": "set program counter to 1355",
          "explain2": { "text": "set program counter to 1355", "args": [] },
          "npc": "1355",
          "push": [ ],
          "pc": "1368"
        },

        {
          "code": "Cut(tid)",
          "explain": "pop index (2) and value ({ 0, 1 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "1356",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1355"
        },

        {
          "code": "JumpCond False 1369",
          "explain": "pop value (False), compare to False, and jump to 1369 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1369 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "1369",
          "pop": "1",
          "push": [ ],
          "pc": "1356"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "1370",
          "push": [ ],
          "pc": "1369"
        },

        {
          "code": "LoadVar $accu1118",
          "explain": "push value ({ ?alloc$pool[0], ?alloc$pool[1] }) of variable \"$accu1118\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "$accu1118" } ] },
          "npc": "1371",
          "push": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "1370"
        },

        {
          "code": "DelVar $accu1118",
          "explain": "delete method variable $accu1118",
          "explain2": { "text": "delete method variable $accu1118", "args": [] },
          "npc": "1372",
          "local": { },
          "push": [ ],
          "pc": "1371"
        },

        {
          "code": "StoreVar tids",
          "explain": "pop value ({ ?alloc$pool[0], ?alloc$pool[1] }) and store locally in variable \\\"tids\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"tids\"", "args": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "1373",
          "local": { "tids": { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1372"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "1374",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1373"
        },

        {
          "code": "StoreVar $accu1140",
          "explain": "pop value ({}) and store locally in variable \\\"$accu1140\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu1140\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "1375",
          "local": { "$accu1140": { "type": "set", "value": [] }, "tids": { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1374"
        },

        {
          "code": "LoadVar tids",
          "explain": "push value ({ ?alloc$pool[0], ?alloc$pool[1] }) of variable \"tids\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "tids" } ] },
          "npc": "1376",
          "push": [ { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "1375"
        },

        {
          "code": "DelVar tids",
          "explain": "delete method variable tids",
          "explain2": { "text": "delete method variable tids", "args": [] },
          "npc": "1377",
          "local": { "$accu1140": { "type": "set", "value": [] } },
          "push": [ ],
          "pc": "1376"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1378",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1377"
        },

        {
          "code": "Cut(tid)",
          "explain": "pop index (0) and value ({ ?alloc$pool[0], ?alloc$pool[1] }); assign value (?alloc$pool[0]) to tid; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to tid; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "1379",
          "local": { "$accu1140": { "type": "set", "value": [] }, "tid": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1378"
        },

        {
          "code": "JumpCond False 1390",
          "explain": "pop value (True), compare to False, and jump to 1390 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1390 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1380",
          "pop": "1",
          "push": [ ],
          "pc": "1379"
        },

        {
          "code": "LoadVar $accu1140",
          "explain": "push value ({}) of variable \"$accu1140\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu1140" } ] },
          "npc": "1381",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1380"
        },

        {
          "code": "DelVar $accu1140",
          "explain": "delete method variable $accu1140",
          "explain2": { "text": "delete method variable $accu1140", "args": [] },
          "npc": "1382",
          "local": { "tid": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },
          "push": [ ],
          "pc": "1381"
        },

        {
          "code": "Push PC(1296)",
          "explain": "push program counter constant 1296 (%+)",
          "explain2": { "text": "push program counter constant 1296 (%+)", "args": [ { "type": "atom", "value": "join" } ] },
          "npc": "1383",
          "push": [ { "type": "pc", "value": "1296" } ],
          "pc": "1382"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (?alloc$pool[0]) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "tid" } ] },
          "npc": "1384",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1383"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "1385",
          "local": { },
          "push": [ ],
          "pc": "1384"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (?alloc$pool[0], PC(1296)); push result (?PC(1296)[?alloc$pool[0]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "pc", "value": "1296" }, { "type": "address", "func": { "type": "pc", "value": "1296" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "1386",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1296" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "1385"
        },

        {
          "code": "Load",
          "explain": "pop an argument (?alloc$pool[0]) and call method (1296: \"join\")",
          "explain2": { "text": "pop an argument (#+) and call method (1296: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "join" } ] },
          "npc": "1296",
          "fp": "7",
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1296","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1386"
        },

        {
          "code": "Frame join(meta)",
          "explain": "pop argument (?alloc$pool[0]), assign to meta, and run method \"join\"",
          "explain2": { "text": "pop argument (#+), assign to meta, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "join" } ] },
          "npc": "1297",
          "local": { "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1296"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "1298",
          "push": [ ],
          "pc": "1297"
        },

        {
          "code": "Push PC(998)",
          "explain": "push program counter constant 998 (%+)",
          "explain2": { "text": "push program counter constant 998 (%+)", "args": [ { "type": "atom", "value": "acquire" } ] },
          "npc": "1299",
          "push": [ { "type": "pc", "value": "998" } ],
          "pc": "1298"
        },

        {
          "code": "LoadVar meta",
          "explain": "push value (?alloc$pool[0]) of variable \"meta\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "meta" } ] },
          "npc": "1300",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1299"
        },

        {
          "code": "Push \"sema\"",
          "explain": "push constant \"sema\"",
          "explain2": { "text": "push constant \"sema\"", "args": [] },
          "npc": "1301",
          "push": [ { "type": "atom", "value": "sema" } ],
          "pc": "1300"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"sema\", ?alloc$pool[0]); push result (?alloc$pool[0][\"sema\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "sema" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } ] },
          "npc": "1302",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } ],
          "pc": "1301"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (?alloc$pool[0][\"sema\"], PC(998)); push result (?PC(998)[?alloc$pool[0][\"sema\"]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] }, { "type": "pc", "value": "998" }, { "type": "address", "func": { "type": "pc", "value": "998" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } ] } ] },
          "npc": "1303",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "998" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } ] } ],
          "pc": "1302"
        },

        {
          "code": "Load",
          "explain": "pop an argument (?alloc$pool[0][\"sema\"]) and call method (998: \"acquire\")",
          "explain2": { "text": "pop an argument (#+) and call method (998: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "998",
          "fp": "10",
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "998","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 9}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } ],
          "pc": "1303"
        },

        {
          "code": "Frame acquire(binsema)",
          "explain": "pop argument (?alloc$pool[0][\"sema\"]), assign to binsema, and run method \"acquire\"",
          "explain2": { "text": "pop argument (#+), assign to binsema, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] }, { "type": "atom", "value": "acquire" } ] },
          "npc": "999",
          "local": { "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] } ],
          "pc": "998"
        }

      ],
      "ctxbag": {
          "7e812b20046a": "1",
          "7e8131e003ea": "1",
          "7e8131e005ca": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e005ca",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "999",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "999","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7e812b20046a",
          "fp": "1",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1250",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }],
          "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7e8131e003ea",
          "fp": "1",
          "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
          "entry": "1250",
          "pc": "1250",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }],
          "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "6",
      "tid": "2",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "2" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
      "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
      "context": {
        "tid": "2",
        "hvalue": "7e812b20046a",
        "fp": "1",
        "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
        "entry": "1250",
        "pc": "1250",
        "sp": "1",
        "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }],
        "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame _helper(closure, handle)",
          "explain": "pop argument ([?PC(1322)[0], ?alloc$pool[0]]), assign to (closure, handle), and run method \"_helper\"",
          "explain2": { "text": "pop argument (#+), assign to (closure, handle), and run method #+", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "_helper" } ] },
          "npc": "1251",
          "fp": "1",
          "trace": [
{"pc": "1251","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0}
          ],
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1250"
        },

        {
          "code": "LoadVar handle",
          "explain": "push value (?alloc$pool[0]) of variable \"handle\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "handle" } ] },
          "npc": "1252",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1251"
        },

        {
          "code": "Push \"result\"",
          "explain": "push constant \"result\"",
          "explain2": { "text": "push constant \"result\"", "args": [] },
          "npc": "1253",
          "push": [ { "type": "atom", "value": "result" } ],
          "pc": "1252"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"result\", ?alloc$pool[0]); push result (?alloc$pool[0][\"result\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "result" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] } ] },
          "npc": "1254",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] } ],
          "pc": "1253"
        },

        {
          "code": "LoadVar closure",
          "explain": "push value (?PC(1322)[0]) of variable \"closure\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "atom", "value": "closure" } ] },
          "npc": "1255",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] } ],
          "pc": "1254"
        },

        {
          "code": "DelVar closure",
          "explain": "delete method variable closure",
          "explain2": { "text": "delete method variable closure", "args": [] },
          "npc": "1256",
          "local": { "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },
          "push": [ ],
          "pc": "1255"
        },

        {
          "code": "Load",
          "explain": "pop an argument (0) and call method (1322: \"incrementer\")",
          "explain2": { "text": "pop an argument (#+) and call method (1322: #+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "incrementer" } ] },
          "npc": "1322",
          "fp": "5",
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1322","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 4}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "int", "value": "0" } ],
          "pc": "1256"
        },

        {
          "code": "Frame incrementer(id)",
          "explain": "pop argument (0), assign to id, and run method \"incrementer\"",
          "explain2": { "text": "pop argument (#+), assign to id, and run method #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "incrementer" } ] },
          "npc": "1323",
          "local": { "id": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] } ],
          "pc": "1322"
        },

        {
          "code": "DelVar id",
          "explain": "delete method variable id",
          "explain2": { "text": "delete method variable id", "args": [] },
          "npc": "1324",
          "local": { },
          "push": [ ],
          "pc": "1323"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1325",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1324"
        }

      ],
      "ctxbag": {
          "7e8131e001ca": "1",
          "7e8131e003ea": "1",
          "7e8131e005ca": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e005ca",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "999",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "999","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7e8131e001ca",
          "fp": "5",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1325",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "int", "value": "0" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1325","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "Load", "var": "I" },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7e8131e003ea",
          "fp": "1",
          "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
          "entry": "1250",
          "pc": "1250",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }],
          "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "9",
      "tid": "2",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "2" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
      "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
      "context": {
        "tid": "2",
        "hvalue": "7e8131e001ca",
        "fp": "5",
        "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
        "entry": "1250",
        "pc": "1325",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "int", "value": "0" }],
        "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1325","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
        ],
        "next": { "type": "Load", "var": "I" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load I",
          "explain": "push value (10) of variable I",
          "explain2": { "text": "push value (#+) of variable I", "args": [ { "type": "int", "value": "10" } ] },
          "npc": "1326",
          "fp": "5",
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1326","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "push": [ { "type": "int", "value": "10" } ],
          "pc": "1325"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (10, 0); range of integers; push result ({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "10" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] } ] },
          "npc": "1327",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] } ],
          "pc": "1326"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1328",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1327"
        },

        {
          "code": "Cut(j)",
          "explain": "pop index (0) and value ({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }); assign value (0) to j; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to j; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1329",
          "local": { "j": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1328"
        },

        {
          "code": "DelVar j",
          "explain": "delete method variable j",
          "explain2": { "text": "delete method variable j", "args": [] },
          "npc": "1330",
          "local": { },
          "push": [ ],
          "pc": "1329"
        },

        {
          "code": "JumpCond False 1344",
          "explain": "pop value (True), compare to False, and jump to 1344 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1344 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1331",
          "pop": "1",
          "push": [ ],
          "pc": "1330"
        }

      ],
      "ctxbag": {
          "7e812fa000aa": "1",
          "7e8131e003ea": "1",
          "7e8131e005ca": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e005ca",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "999",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "999","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7e812fa000aa",
          "fp": "5",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1331",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1331","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7e8131e003ea",
          "fp": "1",
          "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
          "entry": "1250",
          "pc": "1250",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }],
          "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13",
      "tid": "2",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "2" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
      "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
      "context": {
        "tid": "2",
        "hvalue": "7e812fa000aa",
        "fp": "5",
        "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
        "entry": "1250",
        "pc": "1331",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }],
        "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1331","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "1332",
          "fp": "5",
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1332","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "1331"
        },

        {
          "code": "Push \"entrei\"",
          "explain": "push constant \"entrei\"",
          "explain2": { "text": "push constant \"entrei\"", "args": [] },
          "npc": "1333",
          "push": [ { "type": "atom", "value": "entrei" } ],
          "pc": "1332"
        },

        {
          "code": "Print",
          "explain": "pop value (\"entrei\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "entrei" } ] },
          "print": { "type": "atom", "value": "entrei" },
          "npc": "1334",
          "pop": "1",
          "push": [ ],
          "pc": "1333"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "1335",
          "atomic": "0",
          "push": [ ],
          "pc": "1334"
        }

      ],
      "ctxbag": {
          "7e812d60001a": "1",
          "7e8131e003ea": "1",
          "7e8131e005ca": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e005ca",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "999",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "999","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7e812d60001a",
          "fp": "5",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1335",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1335","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "Load", "var": "counter" },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7e8131e003ea",
          "fp": "1",
          "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
          "entry": "1250",
          "pc": "1250",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }],
          "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "18",
      "tid": "2",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "2" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
      "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
      "context": {
        "tid": "2",
        "hvalue": "7e812d60001a",
        "fp": "5",
        "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
        "entry": "1250",
        "pc": "1335",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }],
        "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1335","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
        ],
        "next": { "type": "Load", "var": "counter" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load counter",
          "explain": "push value (0) of variable counter",
          "explain2": { "text": "push value (#+) of variable counter", "args": [ { "type": "int", "value": "0" } ] },
          "npc": "1336",
          "fp": "5",
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1336","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1335"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "1337",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1336"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "1338",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1337"
        }

      ],
      "ctxbag": {
          "7e8131e003ea": "1",
          "7e8131e005ca": "1",
          "7e8131e0063a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e005ca",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "999",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "999","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7e8131e0063a",
          "fp": "5",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1338",
          "sp": "8",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1338","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "Store", "var": "counter", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7e8131e003ea",
          "fp": "1",
          "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
          "entry": "1250",
          "pc": "1250",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }],
          "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "24",
      "tid": "3",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "2" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
      "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
      "context": {
        "tid": "3",
        "hvalue": "7e8131e003ea",
        "fp": "1",
        "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
        "entry": "1250",
        "pc": "1250",
        "sp": "1",
        "stack": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }],
        "trace": [
{"pc": "1250","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "_helper", "args": "(closure, handle)", "value": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame _helper(closure, handle)",
          "explain": "pop argument ([?PC(1322)[1], ?alloc$pool[1]]), assign to (closure, handle), and run method \"_helper\"",
          "explain2": { "text": "pop argument (#+), assign to (closure, handle), and run method #+", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "_helper" } ] },
          "npc": "1251",
          "fp": "1",
          "trace": [
{"pc": "1251","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0}
          ],
          "local": { "closure": { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1250"
        },

        {
          "code": "LoadVar handle",
          "explain": "push value (?alloc$pool[1]) of variable \"handle\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] }, { "type": "atom", "value": "handle" } ] },
          "npc": "1252",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1251"
        },

        {
          "code": "Push \"result\"",
          "explain": "push constant \"result\"",
          "explain2": { "text": "push constant \"result\"", "args": [] },
          "npc": "1253",
          "push": [ { "type": "atom", "value": "result" } ],
          "pc": "1252"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"result\", ?alloc$pool[1]); push result (?alloc$pool[1][\"result\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "result" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "result" } ] } ] },
          "npc": "1254",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "result" } ] } ],
          "pc": "1253"
        },

        {
          "code": "LoadVar closure",
          "explain": "push value (?PC(1322)[1]) of variable \"closure\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "atom", "value": "closure" } ] },
          "npc": "1255",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1254"
        },

        {
          "code": "DelVar closure",
          "explain": "delete method variable closure",
          "explain2": { "text": "delete method variable closure", "args": [] },
          "npc": "1256",
          "local": { "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },
          "push": [ ],
          "pc": "1255"
        },

        {
          "code": "Load",
          "explain": "pop an argument (1) and call method (1322: \"incrementer\")",
          "explain2": { "text": "pop an argument (#+) and call method (1322: #+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "incrementer" } ] },
          "npc": "1322",
          "fp": "5",
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0},{"pc": "1322","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "1" },
"method": "incrementer(1)","calltype": "normal","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 4}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "int", "value": "1" } ],
          "pc": "1256"
        },

        {
          "code": "Frame incrementer(id)",
          "explain": "pop argument (1), assign to id, and run method \"incrementer\"",
          "explain2": { "text": "pop argument (#+), assign to id, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "incrementer" } ] },
          "npc": "1323",
          "local": { "id": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } } ] } ],
          "pc": "1322"
        },

        {
          "code": "DelVar id",
          "explain": "delete method variable id",
          "explain2": { "text": "delete method variable id", "args": [] },
          "npc": "1324",
          "local": { },
          "push": [ ],
          "pc": "1323"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1325",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1324"
        }

      ],
      "ctxbag": {
          "7e812fa0015a": "1",
          "7e8131e005ca": "1",
          "7e8131e0063a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e005ca",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "999",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "999","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7e8131e0063a",
          "fp": "5",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1338",
          "sp": "8",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1338","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "Store", "var": "counter", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7e812fa0015a",
          "fp": "5",
          "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
          "entry": "1250",
          "pc": "1325",
          "sp": "6",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } } ] }, { "type": "int", "value": "0" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0},{"pc": "1325","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "1" },
"method": "incrementer(1)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "Load", "var": "I" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "31",
      "tid": "3",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "2" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
      "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
      "context": {
        "tid": "3",
        "hvalue": "7e812fa0015a",
        "fp": "5",
        "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
        "entry": "1250",
        "pc": "1325",
        "sp": "6",
        "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } } ] }, { "type": "int", "value": "0" }],
        "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0},{"pc": "1325","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "1" },
"method": "incrementer(1)","calltype": "normal","vars":{ },"sp": 4}
        ],
        "next": { "type": "Load", "var": "I" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load I",
          "explain": "push value (10) of variable I",
          "explain2": { "text": "push value (#+) of variable I", "args": [ { "type": "int", "value": "10" } ] },
          "npc": "1326",
          "fp": "5",
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0},{"pc": "1326","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "1" },
"method": "incrementer(1)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "push": [ { "type": "int", "value": "10" } ],
          "pc": "1325"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (10, 0); range of integers; push result ({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "10" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] } ] },
          "npc": "1327",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] } ],
          "pc": "1326"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "1328",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1327"
        },

        {
          "code": "Cut(j)",
          "explain": "pop index (0) and value ({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }); assign value (0) to j; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to j; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "1329",
          "local": { "j": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1328"
        },

        {
          "code": "DelVar j",
          "explain": "delete method variable j",
          "explain2": { "text": "delete method variable j", "args": [] },
          "npc": "1330",
          "local": { },
          "push": [ ],
          "pc": "1329"
        },

        {
          "code": "JumpCond False 1344",
          "explain": "pop value (True), compare to False, and jump to 1344 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 1344 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "1331",
          "pop": "1",
          "push": [ ],
          "pc": "1330"
        }

      ],
      "ctxbag": {
          "7e812d60007a": "1",
          "7e8131e005ca": "1",
          "7e8131e0063a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e005ca",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "999",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "999","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7e8131e0063a",
          "fp": "5",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1338",
          "sp": "8",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1338","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "Store", "var": "counter", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7e812d60007a",
          "fp": "5",
          "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
          "entry": "1250",
          "pc": "1331",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0},{"pc": "1331","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "1" },
"method": "incrementer(1)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "39",
      "tid": "3",
      "shared": { "I": { "type": "int", "value": "10" }, "alloc$next": { "type": "int", "value": "2" }, "alloc$pool": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address" } }, { "key": { "type": "atom", "value": "sema" }, "value": { "type": "bool", "value": "True" } } ] } } ] }, "counter": { "type": "int", "value": "0" } },
      "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
      "context": {
        "tid": "3",
        "hvalue": "7e812d60007a",
        "fp": "5",
        "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
        "entry": "1250",
        "pc": "1331",
        "sp": "7",
        "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }],
        "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0},{"pc": "1331","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "1" },
"method": "incrementer(1)","calltype": "normal","vars":{ },"sp": 4}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "1332",
          "fp": "5",
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0},{"pc": "1332","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "1" },
"method": "incrementer(1)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "1331"
        },

        {
          "code": "Push \"entrei\"",
          "explain": "push constant \"entrei\"",
          "explain2": { "text": "push constant \"entrei\"", "args": [] },
          "npc": "1333",
          "push": [ { "type": "atom", "value": "entrei" } ],
          "pc": "1332"
        },

        {
          "code": "Print",
          "explain": "pop value (\"entrei\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "entrei" } ] },
          "print": { "type": "atom", "value": "entrei" },
          "npc": "1334",
          "pop": "1",
          "push": [ ],
          "pc": "1333"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "1335",
          "atomic": "0",
          "push": [ ],
          "pc": "1334"
        }

      ],
      "ctxbag": {
          "7e8131e005ca": "1",
          "7e8131e0063a": "1",
          "7e8131e0069a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7e8131e0014a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "1402",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "1402","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7e8131e005ca",
          "fp": "10",
          "name": "main()",
          "entry": "1346",
          "pc": "999",
          "sp": "10",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] }, { "type": "int", "value": "1" }, { "type": "set", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "22178" }, { "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "20850" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "meta" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }],
          "trace": [
{"pc": "1387","xpc": "1346","method_name": { "type": "atom", "value": "main" },
"method_arg": { "type": "list", "value": [] },
"method": "main()","calltype": "process","vars":{ },"sp": 0},{"pc": "1304","xpc": "1296","method_name": { "type": "atom", "value": "join" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] },
"method": "join(?alloc$pool[0])","calltype": "normal","vars":{ "meta": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 6},{"pc": "999","xpc": "998","method_name": { "type": "atom", "value": "acquire" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] },
"method": "acquire(?alloc$pool[0][\"sema\"])","calltype": "normal","vars":{ "binsema": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "sema" } ] } },"sp": 9}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7e8131e0063a",
          "fp": "5",
          "name": "_helper(?PC(1322)[0], ?alloc$pool[0])",
          "entry": "1250",
          "pc": "1338",
          "sp": "8",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } ] },
"method": "_helper(?PC(1322)[0], ?alloc$pool[0])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "0" } ] } },"sp": 0},{"pc": "1338","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "0" },
"method": "incrementer(0)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "Store", "var": "counter", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7e8131e0069a",
          "fp": "5",
          "name": "_helper(?PC(1322)[1], ?alloc$pool[1])",
          "entry": "1250",
          "pc": "1335",
          "sp": "7",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "result" } ] }, { "type": "list", "value": [] }, { "type": "int", "value": "20098" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "handle" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" }, { "type": "int", "value": "5" }, { "type": "int", "value": "6" }, { "type": "int", "value": "7" }, { "type": "int", "value": "8" }, { "type": "int", "value": "9" }, { "type": "int", "value": "10" } ] }, { "type": "int", "value": "1" }],
          "trace": [
{"pc": "1257","xpc": "1250","method_name": { "type": "atom", "value": "_helper" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "1322" }, "args": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } ] },
"method": "_helper(?PC(1322)[1], ?alloc$pool[1])","calltype": "process","vars":{ "handle": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }, { "type": "int", "value": "1" } ] } },"sp": 0},{"pc": "1335","xpc": "1322","method_name": { "type": "atom", "value": "incrementer" },
"method_arg": { "type": "int", "value": "1" },
"method": "incrementer(1)","calltype": "normal","vars":{ },"sp": 4}
          ],
          "next": { "type": "Load", "var": "counter" },
          "mode": "runnable"
        }
      ]
    }

  ]
}
