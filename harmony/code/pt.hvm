{
  "labels": {
    "__end__": 207
  },
  "modules": {
    "__main__": {
      "file": "pt.hny",
      "lines": [
        "in_cs = 0",
        "invariant not (in_cs in { 0, 1 }) ",
        "invariant not (any [entering tid for tid in [0,1]] => one_entered [0,1])",
        "sequential flags, turn",
        "flags = ( False, False )",
        "turn  = choose { 0, 1 }",
        "def thread self:",
        "    while choose { False, True }:",
        "        flags self = True",
        "        turn = 1 - self",
        "        await (not flags (1 - self)) or (turn == self)",
        "        atomically in_cs += 1",
        "        # critical",
        "        pass",
        "        # lv critical",
        "        atomically in_cs -= 1",
        "        flags self = False",
        "",
        "def entering tid returns tst1:",
        "    tst1 = flags (1-tid) and (turn != tid)",
        "",
        "def one_entered tids returns tst2:",
        "    var i = 0",
        "    tst2 = False",
        "    while (i < len(tids)) and (not tst2):",
        "        if cs i:",
        "            tst2 = True",
        "        i += 1",
        "",
        "def cs tid returns tst3:",
        "    tst3 =  (not flags (1 - tid)) or (turn == tid)",
        "",
        "",
        "spawn thread 0",
        "spawn thread 1"
      ],
      "identifiers": {
        "tid": "local-const",
        "self": "local-const",
        "tids": "local-const",
        "i": "local-var",
        "this": "local-var",
        "thread": "constant",
        "entering": "constant",
        "one_entered": "constant",
        "cs": "constant",
        "in_cs": "global",
        "flags": "global",
        "turn": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Jump", "pc": "15" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "4" },
    { "op": "Jump", "pc": "52" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu18" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "tid" },
    { "op": "JumpCond", "pc": "36", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu18" },
    { "op": "DelVar", "value": "$accu18" },
    { "op": "LoadVar", "value": "tid" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Apply", "value": { "type": "pc", "value": "125" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu18" },
    { "op": "Jump", "pc": "26" },
    { "op": "DelVar", "value": "tid" },
    { "op": "LoadVar", "value": "$accu18" },
    { "op": "DelVar", "value": "$accu18" },
    { "op": "Nary", "arity": 1, "value": "any" },
    { "op": "JumpCond", "pc": "48", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "144" } },
    { "op": "Jump", "pc": "49" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "17" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "flags"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Jump", "pc": "195" },
    { "op": "Frame", "name": "thread", "args": "self" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "122", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "100", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "101" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "88", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "104" },
    { "op": "Jump", "pc": "88" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "72" },
    { "op": "DelVar", "value": "self" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "195" },
    { "op": "Frame", "name": "entering", "args": "tid" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "138", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "tid" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "Jump", "pc": "140" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "tst1" },
    { "op": "Return", "result": "tst1" },
    { "op": "DelVar", "value": "tst1" },
    { "op": "Jump", "pc": "195" },
    { "op": "Frame", "name": "one_entered", "args": "tids" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "i" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "tst2" },
    { "op": "LoadVar", "value": "i" },
    { "op": "LoadVar", "value": "tids" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "157", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "tst2" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Jump", "pc": "158" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "171", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "i" },
    { "op": "Apply", "value": { "type": "pc", "value": "176" } },
    { "op": "JumpCond", "pc": "165", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "tst2" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "tst2" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "i" },
    { "op": "Jump", "pc": "149" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "tids" },
    { "op": "Return", "result": "tst2" },
    { "op": "DelVar", "value": "tst2" },
    { "op": "Jump", "pc": "195" },
    { "op": "Frame", "name": "cs", "args": "tid" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "190", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "tid" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "192" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "tst3" },
    { "op": "Return", "result": "tst3" },
    { "op": "DelVar", "value": "tst3" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "71" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "71" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push 0","push constant 0"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["Jump 15","jump over invariant definition: set program counter to 15"],
    ["Frame invariant()","start of method invariant"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 4","test invariant"],
    ["Jump 52","jump over invariant definition: set program counter to 52"],
    ["Frame invariant()","start of method invariant"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu18","initialize accumulator for list comprehension: pop a value and store in $accu18"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 0","push constant 0"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 0","push constant 0"],
    ["Cut(tid)","get next element and assign to tid; push False or True depending on success"],
    ["JumpCond False 36","check if loop is done: pop a value and jump to 36 if the value is False"],
    ["LoadVar $accu18","load accumulator: push the value of $accu18"],
    ["DelVar $accu18","delete method variable $accu18"],
    ["LoadVar tid","push the value of tid"],
    ["DelVar tid","delete method variable tid"],
    ["Apply PC(125)","call method PC(125)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu18","update accumulator: pop a value and store in $accu18"],
    ["Jump 26","set program counter to 26"],
    ["DelVar tid","delete method variable tid"],
    ["LoadVar $accu18","load final accumulator result: push the value of $accu18"],
    ["DelVar $accu18","delete method variable $accu18"],
    ["1-ary any","pop 1 value and push the result of applying any"],
    ["JumpCond False 48","pop a value and jump to 48 if the value is False"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 0","push constant 0"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(144)","call method PC(144)"],
    ["Jump 49","set program counter to 49"],
    ["Push True","push constant True"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 17","test invariant"],
    ["Push ?flags","push constant ?flags"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store flags","pop a value and store it in shared variable flags"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Jump 195","jump over method definition: set program counter to 195"],
    ["Frame thread(self)","start of method thread"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 122","pop a value and jump to 122 if the value is False"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond True 100","pop a value and jump to 100 if the value is True"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar self","push the value of self"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 101","set program counter to 101"],
    ["Push True","push constant True"],
    ["JumpCond False 88","pop a value and jump to 88 if the value is False"],
    ["Jump 104","set program counter to 104"],
    ["Jump 88","set program counter to 88"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 72","set program counter to 72"],
    ["DelVar self","delete method variable self"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 195","jump over method definition: set program counter to 195"],
    ["Frame entering(tid)","start of method entering"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar tid","push the value of tid"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 138","pop a value and jump to 138 if the value is False"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar tid","push the value of tid"],
    ["DelVar tid","delete method variable tid"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["Jump 140","set program counter to 140"],
    ["DelVar tid","delete method variable tid"],
    ["Push False","push constant False"],
    ["StoreVar tst1","pop a value and store in tst1"],
    ["ReturnOp(tst1)","restore caller method state and push tst1"],
    ["DelVar tst1","delete method variable tst1"],
    ["Jump 195","jump over method definition: set program counter to 195"],
    ["Frame one_entered(tids)","start of method one_entered"],
    ["Push 0","push constant 0"],
    ["StoreVar i","pop a value and store in i"],
    ["Push False","push constant False"],
    ["StoreVar tst2","pop a value and store in tst2"],
    ["LoadVar i","push the value of i"],
    ["LoadVar tids","push the value of tids"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 157","pop a value and jump to 157 if the value is False"],
    ["LoadVar tst2","push the value of tst2"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Jump 158","set program counter to 158"],
    ["Push False","push constant False"],
    ["JumpCond False 171","pop a value and jump to 171 if the value is False"],
    ["LoadVar i","push the value of i"],
    ["Apply PC(176)","call method PC(176)"],
    ["JumpCond False 165","pop a value and jump to 165 if the value is False"],
    ["DelVar tst2","delete method variable tst2"],
    ["Push True","push constant True"],
    ["StoreVar tst2","pop a value and store in tst2"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar i","pop a value and store in i"],
    ["Jump 149","set program counter to 149"],
    ["DelVar i","delete method variable i"],
    ["DelVar tids","delete method variable tids"],
    ["ReturnOp(tst2)","restore caller method state and push tst2"],
    ["DelVar tst2","delete method variable tst2"],
    ["Jump 195","jump over method definition: set program counter to 195"],
    ["Frame cs(tid)","start of method cs"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar tid","push the value of tid"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond True 190","pop a value and jump to 190 if the value is True"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar tid","push the value of tid"],
    ["DelVar tid","delete method variable tid"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 192","set program counter to 192"],
    ["DelVar tid","delete method variable tid"],
    ["Push True","push constant True"],
    ["StoreVar tst3","pop a value and store in tst3"],
    ["ReturnOp(tst3)","restore caller method state and push tst3"],
    ["DelVar tst3","delete method variable tst3"],
    ["Push ?PC(71)","push constant ?PC(71)"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push ?PC(71)","push constant ?PC(71)"],
    ["Push 1","push constant 1"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 1, "column": 1, "endline": 36, "endcolumn": 7, "stmt": [1,1,36,7] },
    { "module": "__main__", "line": 1, "column": 9, "endline": 1, "endcolumn": 9, "stmt": [1,1,1,9] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 1, "endcolumn": 7, "stmt": [1,1,1,9] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 9, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 33, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 16, "endline": 2, "endcolumn": 20, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 27, "endline": 2, "endcolumn": 30, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 27, "endline": 2, "endcolumn": 27, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 27, "endline": 2, "endcolumn": 30, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 30, "endline": 2, "endcolumn": 30, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 27, "endline": 2, "endcolumn": 30, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 16, "endline": 2, "endcolumn": 32, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 11, "endline": 2, "endcolumn": 33, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 33, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 33, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 33, "stmt": [2,1,2,33] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 9, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 72, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 46, "endline": 3, "endcolumn": 48, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 46, "endline": 3, "endcolumn": 46, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 46, "endline": 3, "endcolumn": 48, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 48, "endline": 3, "endcolumn": 48, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 46, "endline": 3, "endcolumn": 48, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 28, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 28, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 28, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 30, "endline": 3, "endcolumn": 32, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 30, "endline": 3, "endcolumn": 32, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 32, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 49, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 49, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 16, "endline": 3, "endcolumn": 50, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 16, "endline": 3, "endcolumn": 71, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 68, "endline": 3, "endcolumn": 70, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 68, "endline": 3, "endcolumn": 68, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 68, "endline": 3, "endcolumn": 70, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 70, "endline": 3, "endcolumn": 70, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 68, "endline": 3, "endcolumn": 70, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 55, "endline": 3, "endcolumn": 71, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 52, "endline": 3, "endcolumn": 53, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 16, "endline": 3, "endcolumn": 71, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 11, "endline": 3, "endcolumn": 72, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 72, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 72, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 72, "stmt": [3,1,3,72] },
    { "module": "__main__", "line": 4, "column": 12, "endline": 4, "endcolumn": 16, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 22, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 19, "endline": 4, "endcolumn": 22, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 4, "column": 1, "endline": 4, "endcolumn": 22, "stmt": [4,1,4,22] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 15, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 18, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 11, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 7, "stmt": [5,1,5,24] },
    { "module": "__main__", "line": 6, "column": 18, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,23] },
    { "module": "__main__", "line": 6, "column": 18, "endline": 6, "endcolumn": 18, "stmt": [6,1,6,23] },
    { "module": "__main__", "line": 6, "column": 18, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,23] },
    { "module": "__main__", "line": 6, "column": 21, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,23] },
    { "module": "__main__", "line": 6, "column": 18, "endline": 6, "endcolumn": 21, "stmt": [6,1,6,23] },
    { "module": "__main__", "line": 6, "column": 9, "endline": 6, "endcolumn": 23, "stmt": [6,1,6,23] },
    { "module": "__main__", "line": 6, "column": 1, "endline": 6, "endcolumn": 7, "stmt": [6,1,6,23] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 3, "stmt": [7,1,7,16] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 16, "stmt": [7,1,7,16] },
    { "module": "__main__", "line": 8, "column": 20, "endline": 8, "endcolumn": 30, "stmt": [8,5,8,33] },
    { "module": "__main__", "line": 8, "column": 20, "endline": 8, "endcolumn": 24, "stmt": [8,5,8,33] },
    { "module": "__main__", "line": 8, "column": 20, "endline": 8, "endcolumn": 30, "stmt": [8,5,8,33] },
    { "module": "__main__", "line": 8, "column": 27, "endline": 8, "endcolumn": 30, "stmt": [8,5,8,33] },
    { "module": "__main__", "line": 8, "column": 20, "endline": 8, "endcolumn": 30, "stmt": [8,5,8,33] },
    { "module": "__main__", "line": 8, "column": 11, "endline": 8, "endcolumn": 32, "stmt": [8,5,8,33] },
    { "module": "__main__", "line": 8, "column": 5, "endline": 8, "endcolumn": 9, "stmt": [8,5,8,33] },
    { "module": "__main__", "line": 9, "column": 9, "endline": 9, "endcolumn": 13, "stmt": [9,9,9,25] },
    { "module": "__main__", "line": 9, "column": 15, "endline": 9, "endcolumn": 18, "stmt": [9,9,9,25] },
    { "module": "__main__", "line": 9, "column": 9, "endline": 9, "endcolumn": 18, "stmt": [9,9,9,25] },
    { "module": "__main__", "line": 9, "column": 22, "endline": 9, "endcolumn": 25, "stmt": [9,9,9,25] },
    { "module": "__main__", "line": 9, "column": 9, "endline": 9, "endcolumn": 20, "stmt": [9,9,9,25] },
    { "module": "__main__", "line": 10, "column": 16, "endline": 10, "endcolumn": 16, "stmt": [10,9,10,23] },
    { "module": "__main__", "line": 10, "column": 20, "endline": 10, "endcolumn": 23, "stmt": [10,9,10,23] },
    { "module": "__main__", "line": 10, "column": 16, "endline": 10, "endcolumn": 23, "stmt": [10,9,10,23] },
    { "module": "__main__", "line": 10, "column": 9, "endline": 10, "endcolumn": 14, "stmt": [10,9,10,23] },
    { "module": "__main__", "line": 11, "column": 20, "endline": 11, "endcolumn": 35, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 27, "endline": 11, "endcolumn": 27, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 31, "endline": 11, "endcolumn": 34, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 27, "endline": 11, "endcolumn": 34, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 20, "endline": 11, "endcolumn": 35, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 20, "endline": 11, "endcolumn": 35, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 16, "endline": 11, "endcolumn": 35, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 15, "endline": 11, "endcolumn": 54, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 42, "endline": 11, "endcolumn": 45, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 50, "endline": 11, "endcolumn": 53, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 42, "endline": 11, "endcolumn": 53, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 38, "endline": 11, "endcolumn": 39, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 15, "endline": 11, "endcolumn": 54, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 9, "endline": 11, "endcolumn": 54, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 54, "endline": 11, "endcolumn": 54, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 11, "column": 54, "endline": 11, "endcolumn": 54, "stmt": [11,9,11,54] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 29, "stmt": [12,20,12,29] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 29, "stmt": [12,20,12,29] },
    { "module": "__main__", "line": 12, "column": 29, "endline": 12, "endcolumn": 29, "stmt": [12,20,12,29] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 29, "stmt": [12,20,12,29] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 27, "stmt": [12,20,12,29] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 29, "stmt": [12,20,12,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 29, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 27, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 16, "column": 20, "endline": 16, "endcolumn": 29, "stmt": [16,20,16,29] },
    { "module": "__main__", "line": 17, "column": 9, "endline": 17, "endcolumn": 13, "stmt": [17,9,17,26] },
    { "module": "__main__", "line": 17, "column": 15, "endline": 17, "endcolumn": 18, "stmt": [17,9,17,26] },
    { "module": "__main__", "line": 17, "column": 9, "endline": 17, "endcolumn": 18, "stmt": [17,9,17,26] },
    { "module": "__main__", "line": 17, "column": 22, "endline": 17, "endcolumn": 26, "stmt": [17,9,17,26] },
    { "module": "__main__", "line": 17, "column": 9, "endline": 17, "endcolumn": 20, "stmt": [17,9,17,26] },
    { "module": "__main__", "line": 8, "column": 5, "endline": 8, "endcolumn": 33, "stmt": [8,5,8,33] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 16, "stmt": [7,1,7,16] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 16, "stmt": [7,1,7,16] },
    { "module": "__main__", "line": 19, "column": 1, "endline": 19, "endcolumn": 3, "stmt": [19,1,19,30] },
    { "module": "__main__", "line": 19, "column": 1, "endline": 19, "endcolumn": 30, "stmt": [19,1,19,30] },
    { "module": "__main__", "line": 20, "column": 12, "endline": 20, "endcolumn": 24, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 19, "endline": 20, "endcolumn": 19, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 21, "endline": 20, "endcolumn": 23, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 19, "endline": 20, "endcolumn": 23, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 12, "endline": 20, "endcolumn": 24, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 12, "endline": 20, "endcolumn": 24, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 12, "endline": 20, "endcolumn": 42, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 31, "endline": 20, "endcolumn": 34, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 39, "endline": 20, "endcolumn": 41, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 39, "endline": 20, "endcolumn": 41, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 31, "endline": 20, "endcolumn": 41, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 26, "endline": 20, "endcolumn": 28, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 12, "endline": 20, "endcolumn": 42, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 12, "endline": 20, "endcolumn": 42, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 20, "column": 5, "endline": 20, "endcolumn": 10, "stmt": [20,5,20,42] },
    { "module": "__main__", "line": 19, "column": 1, "endline": 19, "endcolumn": 30, "stmt": [19,1,19,30] },
    { "module": "__main__", "line": 19, "column": 1, "endline": 19, "endcolumn": 30, "stmt": [19,1,19,30] },
    { "module": "__main__", "line": 22, "column": 1, "endline": 22, "endcolumn": 3, "stmt": [22,1,22,34] },
    { "module": "__main__", "line": 22, "column": 1, "endline": 22, "endcolumn": 34, "stmt": [22,1,22,34] },
    { "module": "__main__", "line": 23, "column": 13, "endline": 23, "endcolumn": 13, "stmt": [23,5,23,13] },
    { "module": "__main__", "line": 23, "column": 5, "endline": 23, "endcolumn": 13, "stmt": [23,5,23,13] },
    { "module": "__main__", "line": 24, "column": 12, "endline": 24, "endcolumn": 16, "stmt": [24,5,24,16] },
    { "module": "__main__", "line": 24, "column": 5, "endline": 24, "endcolumn": 10, "stmt": [24,5,24,16] },
    { "module": "__main__", "line": 25, "column": 12, "endline": 25, "endcolumn": 12, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 20, "endline": 25, "endcolumn": 23, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 16, "endline": 25, "endcolumn": 24, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 12, "endline": 25, "endcolumn": 24, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 11, "endline": 25, "endcolumn": 40, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 36, "endline": 25, "endcolumn": 39, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 32, "endline": 25, "endcolumn": 39, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 27, "endline": 25, "endcolumn": 29, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 11, "endline": 25, "endcolumn": 40, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 9, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 26, "column": 15, "endline": 26, "endcolumn": 15, "stmt": [26,9,26,16] },
    { "module": "__main__", "line": 26, "column": 12, "endline": 26, "endcolumn": 15, "stmt": [26,9,26,16] },
    { "module": "__main__", "line": 26, "column": 9, "endline": 26, "endcolumn": 10, "stmt": [26,9,26,16] },
    { "module": "__main__", "line": 27, "column": 20, "endline": 27, "endcolumn": 23, "stmt": [27,13,27,23] },
    { "module": "__main__", "line": 27, "column": 20, "endline": 27, "endcolumn": 23, "stmt": [27,13,27,23] },
    { "module": "__main__", "line": 27, "column": 13, "endline": 27, "endcolumn": 18, "stmt": [27,13,27,23] },
    { "module": "__main__", "line": 28, "column": 9, "endline": 28, "endcolumn": 14, "stmt": [28,9,28,14] },
    { "module": "__main__", "line": 28, "column": 9, "endline": 28, "endcolumn": 14, "stmt": [28,9,28,14] },
    { "module": "__main__", "line": 28, "column": 14, "endline": 28, "endcolumn": 14, "stmt": [28,9,28,14] },
    { "module": "__main__", "line": 28, "column": 9, "endline": 28, "endcolumn": 14, "stmt": [28,9,28,14] },
    { "module": "__main__", "line": 28, "column": 9, "endline": 28, "endcolumn": 12, "stmt": [28,9,28,14] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 41, "stmt": [25,5,25,41] },
    { "module": "__main__", "line": 22, "column": 1, "endline": 22, "endcolumn": 34, "stmt": [22,1,22,34] },
    { "module": "__main__", "line": 22, "column": 1, "endline": 22, "endcolumn": 34, "stmt": [22,1,22,34] },
    { "module": "__main__", "line": 22, "column": 1, "endline": 22, "endcolumn": 34, "stmt": [22,1,22,34] },
    { "module": "__main__", "line": 22, "column": 1, "endline": 22, "endcolumn": 34, "stmt": [22,1,22,34] },
    { "module": "__main__", "line": 30, "column": 1, "endline": 30, "endcolumn": 3, "stmt": [30,1,30,24] },
    { "module": "__main__", "line": 30, "column": 1, "endline": 30, "endcolumn": 24, "stmt": [30,1,30,24] },
    { "module": "__main__", "line": 31, "column": 18, "endline": 31, "endcolumn": 32, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 25, "endline": 31, "endcolumn": 25, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 29, "endline": 31, "endcolumn": 31, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 25, "endline": 31, "endcolumn": 31, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 18, "endline": 31, "endcolumn": 32, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 18, "endline": 31, "endcolumn": 32, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 14, "endline": 31, "endcolumn": 32, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 13, "endline": 31, "endcolumn": 50, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 39, "endline": 31, "endcolumn": 42, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 47, "endline": 31, "endcolumn": 49, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 47, "endline": 31, "endcolumn": 49, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 39, "endline": 31, "endcolumn": 49, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 35, "endline": 31, "endcolumn": 36, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 13, "endline": 31, "endcolumn": 50, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 13, "endline": 31, "endcolumn": 50, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 31, "column": 5, "endline": 31, "endcolumn": 10, "stmt": [31,5,31,50] },
    { "module": "__main__", "line": 30, "column": 1, "endline": 30, "endcolumn": 24, "stmt": [30,1,30,24] },
    { "module": "__main__", "line": 30, "column": 1, "endline": 30, "endcolumn": 24, "stmt": [30,1,30,24] },
    { "module": "__main__", "line": 34, "column": 7, "endline": 34, "endcolumn": 12, "stmt": [34,1,34,14] },
    { "module": "__main__", "line": 34, "column": 14, "endline": 34, "endcolumn": 14, "stmt": [34,1,34,14] },
    { "module": "__main__", "line": 34, "column": 7, "endline": 34, "endcolumn": 14, "stmt": [34,1,34,14] },
    { "module": "__main__", "line": 34, "column": 1, "endline": 34, "endcolumn": 14, "stmt": [34,1,34,14] },
    { "module": "__main__", "line": 34, "column": 1, "endline": 34, "endcolumn": 14, "stmt": [34,1,34,14] },
    { "module": "__main__", "line": 35, "column": 7, "endline": 35, "endcolumn": 12, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 35, "column": 14, "endline": 35, "endcolumn": 14, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 35, "column": 7, "endline": 35, "endcolumn": 14, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 35, "column": 1, "endline": 35, "endcolumn": 14, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 35, "column": 1, "endline": 35, "endcolumn": 14, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 36, "endcolumn": 7, "stmt": [1,1,36,7] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 36, "endcolumn": 7, "stmt": [1,1,36,7] }
  ]
}
