{
  "labels": {
    "__end__": 213
  },
  "modules": {
    "__main__": {
      "file": "pt.hny",
      "lines": [
        "in_cs = 0",
        "#invariant not (in_cs in { 0, 1 }) #forall (C1 C2: clients) , cs C1 /\\ cs C2 -> C1 = C2",
        "invariant not (any (cs (C_1) and cs (C_2) for (C_1,C_2) in [(0,0),(1,0),(1,1)]) => (C_1 == C_2))",
        "#invariant not (any [entering tid for tid in [0,1]] => one_entered [0,1])",
        "sequential flags, turn",
        "flags = ( False, False )",
        "turn  = choose { 0, 1 }",
        "def thread self:",
        "    while choose { False, True }:",
        "        flags self = True",
        "        turn = 1 - self",
        "        await (not flags (1 - self)) or (turn == self)",
        "        atomically in_cs += 1",
        "        # critical",
        "        pass",
        "        # lv critical",
        "        atomically in_cs -= 1",
        "        flags self = False",
        "",
        "def entering tid returns tst1:",
        "    tst1 = flags (1-tid) and (turn != tid)",
        "",
        "def one_entered tids returns tst2:",
        "    var i = 0",
        "    tst2 = False",
        "    while (i < len(tids)) and (not tst2):",
        "        if cs i:",
        "            tst2 = True",
        "        i += 1",
        "",
        "def cs tid returns tst3:",
        "    tst3 =  (not flags (1 - tid)) or (turn == tid)",
        "",
        "",
        "spawn thread 0",
        "spawn thread 1",
        ""
      ],
      "identifiers": {
        "C_1": "local-const",
        "C_2": "local-const",
        "self": "local-const",
        "tid": "local-const",
        "tids": "local-const",
        "i": "local-var",
        "this": "local-var",
        "thread": "constant",
        "entering": "constant",
        "one_entered": "constant",
        "cs": "constant",
        "in_cs": "global",
        "flags": "global",
        "turn": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Jump", "pc": "58" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu5" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "(C_1, C_2)" },
    { "op": "JumpCond", "pc": "44", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu5" },
    { "op": "DelVar", "value": "$accu5" },
    { "op": "LoadVar", "value": "C_1" },
    { "op": "DelVar", "value": "C_1" },
    { "op": "Apply", "value": { "type": "pc", "value": "182" } },
    { "op": "JumpCond", "pc": "39", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "C_2" },
    { "op": "DelVar", "value": "C_2" },
    { "op": "Apply", "value": { "type": "pc", "value": "182" } },
    { "op": "Jump", "pc": "41" },
    { "op": "DelVar", "value": "C_2" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu5" },
    { "op": "Jump", "pc": "27" },
    { "op": "DelVar", "value": "C_1" },
    { "op": "DelVar", "value": "C_2" },
    { "op": "LoadVar", "value": "$accu5" },
    { "op": "DelVar", "value": "$accu5" },
    { "op": "Nary", "arity": 1, "value": "any" },
    { "op": "JumpCond", "pc": "54", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "C_1"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "C_2"}] },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "55" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "4" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "flags"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Jump", "pc": "201" },
    { "op": "Frame", "name": "thread", "args": "self" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "128", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "106", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "107" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "94", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "110" },
    { "op": "Jump", "pc": "94" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "78" },
    { "op": "DelVar", "value": "self" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "201" },
    { "op": "Frame", "name": "entering", "args": "tid" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "144", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "tid" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "Jump", "pc": "146" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "tst1" },
    { "op": "Return", "result": "tst1" },
    { "op": "DelVar", "value": "tst1" },
    { "op": "Jump", "pc": "201" },
    { "op": "Frame", "name": "one_entered", "args": "tids" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "i" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "tst2" },
    { "op": "LoadVar", "value": "i" },
    { "op": "LoadVar", "value": "tids" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "163", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "tst2" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Jump", "pc": "164" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "177", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "i" },
    { "op": "Apply", "value": { "type": "pc", "value": "182" } },
    { "op": "JumpCond", "pc": "171", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "tst2" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "tst2" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "i" },
    { "op": "Jump", "pc": "155" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "tids" },
    { "op": "Return", "result": "tst2" },
    { "op": "DelVar", "value": "tst2" },
    { "op": "Jump", "pc": "201" },
    { "op": "Frame", "name": "cs", "args": "tid" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "196", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "tid" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "198" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "tst3" },
    { "op": "Return", "result": "tst3" },
    { "op": "DelVar", "value": "tst3" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push 0","push constant 0"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["Jump 58","jump over invariant definition: set program counter to 58"],
    ["Frame invariant()","start of method invariant"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu5","initialize accumulator for list comprehension: pop a value and store in $accu5"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 0","push constant 0"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 0","push constant 0"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 0","push constant 0"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 0","push constant 0"],
    ["Cut((C_1, C_2))","get next element and assign to (C_1, C_2); push False or True depending on success"],
    ["JumpCond False 44","check if loop is done: pop a value and jump to 44 if the value is False"],
    ["LoadVar $accu5","load accumulator: push the value of $accu5"],
    ["DelVar $accu5","delete method variable $accu5"],
    ["LoadVar C_1","push the value of C_1"],
    ["DelVar C_1","delete method variable C_1"],
    ["Apply PC(182)","call method PC(182)"],
    ["JumpCond False 39","pop a value and jump to 39 if the value is False"],
    ["LoadVar C_2","push the value of C_2"],
    ["DelVar C_2","delete method variable C_2"],
    ["Apply PC(182)","call method PC(182)"],
    ["Jump 41","set program counter to 41"],
    ["DelVar C_2","delete method variable C_2"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu5","update accumulator: pop a value and store in $accu5"],
    ["Jump 27","set program counter to 27"],
    ["DelVar C_1","delete method variable C_1"],
    ["DelVar C_2","delete method variable C_2"],
    ["LoadVar $accu5","load final accumulator result: push the value of $accu5"],
    ["DelVar $accu5","delete method variable $accu5"],
    ["1-ary any","pop 1 value and push the result of applying any"],
    ["JumpCond False 54","pop a value and jump to 54 if the value is False"],
    ["Load C_1","push value of shared variable C_1"],
    ["Load C_2","push value of shared variable C_2"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 55","set program counter to 55"],
    ["Push True","push constant True"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 4","test invariant"],
    ["Push ?flags","push constant ?flags"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store flags","pop a value and store it in shared variable flags"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Jump 201","jump over method definition: set program counter to 201"],
    ["Frame thread(self)","start of method thread"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 128","pop a value and jump to 128 if the value is False"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond True 106","pop a value and jump to 106 if the value is True"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar self","push the value of self"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 107","set program counter to 107"],
    ["Push True","push constant True"],
    ["JumpCond False 94","pop a value and jump to 94 if the value is False"],
    ["Jump 110","set program counter to 110"],
    ["Jump 94","set program counter to 94"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 78","set program counter to 78"],
    ["DelVar self","delete method variable self"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 201","jump over method definition: set program counter to 201"],
    ["Frame entering(tid)","start of method entering"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar tid","push the value of tid"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 144","pop a value and jump to 144 if the value is False"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar tid","push the value of tid"],
    ["DelVar tid","delete method variable tid"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["Jump 146","set program counter to 146"],
    ["DelVar tid","delete method variable tid"],
    ["Push False","push constant False"],
    ["StoreVar tst1","pop a value and store in tst1"],
    ["ReturnOp(tst1)","restore caller method state and push tst1"],
    ["DelVar tst1","delete method variable tst1"],
    ["Jump 201","jump over method definition: set program counter to 201"],
    ["Frame one_entered(tids)","start of method one_entered"],
    ["Push 0","push constant 0"],
    ["StoreVar i","pop a value and store in i"],
    ["Push False","push constant False"],
    ["StoreVar tst2","pop a value and store in tst2"],
    ["LoadVar i","push the value of i"],
    ["LoadVar tids","push the value of tids"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 163","pop a value and jump to 163 if the value is False"],
    ["LoadVar tst2","push the value of tst2"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Jump 164","set program counter to 164"],
    ["Push False","push constant False"],
    ["JumpCond False 177","pop a value and jump to 177 if the value is False"],
    ["LoadVar i","push the value of i"],
    ["Apply PC(182)","call method PC(182)"],
    ["JumpCond False 171","pop a value and jump to 171 if the value is False"],
    ["DelVar tst2","delete method variable tst2"],
    ["Push True","push constant True"],
    ["StoreVar tst2","pop a value and store in tst2"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar i","pop a value and store in i"],
    ["Jump 155","set program counter to 155"],
    ["DelVar i","delete method variable i"],
    ["DelVar tids","delete method variable tids"],
    ["ReturnOp(tst2)","restore caller method state and push tst2"],
    ["DelVar tst2","delete method variable tst2"],
    ["Jump 201","jump over method definition: set program counter to 201"],
    ["Frame cs(tid)","start of method cs"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar tid","push the value of tid"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond True 196","pop a value and jump to 196 if the value is True"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar tid","push the value of tid"],
    ["DelVar tid","delete method variable tid"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 198","set program counter to 198"],
    ["DelVar tid","delete method variable tid"],
    ["Push True","push constant True"],
    ["StoreVar tst3","pop a value and store in tst3"],
    ["ReturnOp(tst3)","restore caller method state and push tst3"],
    ["DelVar tst3","delete method variable tst3"],
    ["Push ?PC(77)","push constant ?PC(77)"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push ?PC(77)","push constant ?PC(77)"],
    ["Push 1","push constant 1"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 1, "column": 1, "endline": 38, "endcolumn": 7, "stmt": [1,1,38,7] },
    { "module": "__main__", "line": 1, "column": 9, "endline": 1, "endcolumn": 9, "stmt": [1,1,1,9] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 1, "endcolumn": 7, "stmt": [1,1,1,9] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 9, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 96, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 61, "endline": 3, "endcolumn": 77, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 62, "endline": 3, "endcolumn": 64, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 62, "endline": 3, "endcolumn": 62, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 62, "endline": 3, "endcolumn": 64, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 64, "endline": 3, "endcolumn": 64, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 62, "endline": 3, "endcolumn": 64, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 61, "endline": 3, "endcolumn": 77, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 68, "endline": 3, "endcolumn": 70, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 68, "endline": 3, "endcolumn": 68, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 68, "endline": 3, "endcolumn": 70, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 70, "endline": 3, "endcolumn": 70, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 68, "endline": 3, "endcolumn": 70, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 61, "endline": 3, "endcolumn": 77, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 74, "endline": 3, "endcolumn": 76, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 74, "endline": 3, "endcolumn": 74, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 74, "endline": 3, "endcolumn": 76, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 76, "endline": 3, "endcolumn": 76, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 74, "endline": 3, "endcolumn": 76, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 61, "endline": 3, "endcolumn": 77, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 22, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 22, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 22, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 25, "endline": 3, "endcolumn": 27, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 25, "endline": 3, "endcolumn": 27, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 28, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 41, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 38, "endline": 3, "endcolumn": 40, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 38, "endline": 3, "endcolumn": 40, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 34, "endline": 3, "endcolumn": 41, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 30, "endline": 3, "endcolumn": 32, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 41, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 41, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 78, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 21, "endline": 3, "endcolumn": 78, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 16, "endline": 3, "endcolumn": 79, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 16, "endline": 3, "endcolumn": 95, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 85, "endline": 3, "endcolumn": 87, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 92, "endline": 3, "endcolumn": 94, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 85, "endline": 3, "endcolumn": 94, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 81, "endline": 3, "endcolumn": 82, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 16, "endline": 3, "endcolumn": 95, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 11, "endline": 3, "endcolumn": 96, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 96, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 96, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 96, "stmt": [3,1,3,96] },
    { "module": "__main__", "line": 5, "column": 12, "endline": 5, "endcolumn": 16, "stmt": [5,1,5,22] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,22] },
    { "module": "__main__", "line": 5, "column": 19, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,22] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 22, "stmt": [5,1,5,22] },
    { "module": "__main__", "line": 6, "column": 11, "endline": 6, "endcolumn": 22, "stmt": [6,1,6,24] },
    { "module": "__main__", "line": 6, "column": 11, "endline": 6, "endcolumn": 15, "stmt": [6,1,6,24] },
    { "module": "__main__", "line": 6, "column": 11, "endline": 6, "endcolumn": 22, "stmt": [6,1,6,24] },
    { "module": "__main__", "line": 6, "column": 18, "endline": 6, "endcolumn": 22, "stmt": [6,1,6,24] },
    { "module": "__main__", "line": 6, "column": 11, "endline": 6, "endcolumn": 22, "stmt": [6,1,6,24] },
    { "module": "__main__", "line": 6, "column": 1, "endline": 6, "endcolumn": 7, "stmt": [6,1,6,24] },
    { "module": "__main__", "line": 7, "column": 18, "endline": 7, "endcolumn": 21, "stmt": [7,1,7,23] },
    { "module": "__main__", "line": 7, "column": 18, "endline": 7, "endcolumn": 18, "stmt": [7,1,7,23] },
    { "module": "__main__", "line": 7, "column": 18, "endline": 7, "endcolumn": 21, "stmt": [7,1,7,23] },
    { "module": "__main__", "line": 7, "column": 21, "endline": 7, "endcolumn": 21, "stmt": [7,1,7,23] },
    { "module": "__main__", "line": 7, "column": 18, "endline": 7, "endcolumn": 21, "stmt": [7,1,7,23] },
    { "module": "__main__", "line": 7, "column": 9, "endline": 7, "endcolumn": 23, "stmt": [7,1,7,23] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 7, "stmt": [7,1,7,23] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 3, "stmt": [8,1,8,16] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 16, "stmt": [8,1,8,16] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,33] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 24, "stmt": [9,5,9,33] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,33] },
    { "module": "__main__", "line": 9, "column": 27, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,33] },
    { "module": "__main__", "line": 9, "column": 20, "endline": 9, "endcolumn": 30, "stmt": [9,5,9,33] },
    { "module": "__main__", "line": 9, "column": 11, "endline": 9, "endcolumn": 32, "stmt": [9,5,9,33] },
    { "module": "__main__", "line": 9, "column": 5, "endline": 9, "endcolumn": 9, "stmt": [9,5,9,33] },
    { "module": "__main__", "line": 10, "column": 9, "endline": 10, "endcolumn": 13, "stmt": [10,9,10,25] },
    { "module": "__main__", "line": 10, "column": 15, "endline": 10, "endcolumn": 18, "stmt": [10,9,10,25] },
    { "module": "__main__", "line": 10, "column": 9, "endline": 10, "endcolumn": 18, "stmt": [10,9,10,25] },
    { "module": "__main__", "line": 10, "column": 22, "endline": 10, "endcolumn": 25, "stmt": [10,9,10,25] },
    { "module": "__main__", "line": 10, "column": 9, "endline": 10, "endcolumn": 20, "stmt": [10,9,10,25] },
    { "module": "__main__", "line": 11, "column": 16, "endline": 11, "endcolumn": 16, "stmt": [11,9,11,23] },
    { "module": "__main__", "line": 11, "column": 20, "endline": 11, "endcolumn": 23, "stmt": [11,9,11,23] },
    { "module": "__main__", "line": 11, "column": 16, "endline": 11, "endcolumn": 23, "stmt": [11,9,11,23] },
    { "module": "__main__", "line": 11, "column": 9, "endline": 11, "endcolumn": 14, "stmt": [11,9,11,23] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 35, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 27, "endline": 12, "endcolumn": 27, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 31, "endline": 12, "endcolumn": 34, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 27, "endline": 12, "endcolumn": 34, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 35, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 20, "endline": 12, "endcolumn": 35, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 16, "endline": 12, "endcolumn": 35, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 15, "endline": 12, "endcolumn": 54, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 42, "endline": 12, "endcolumn": 45, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 50, "endline": 12, "endcolumn": 53, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 42, "endline": 12, "endcolumn": 53, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 38, "endline": 12, "endcolumn": 39, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 15, "endline": 12, "endcolumn": 54, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 9, "endline": 12, "endcolumn": 54, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 54, "endline": 12, "endcolumn": 54, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 12, "column": 54, "endline": 12, "endcolumn": 54, "stmt": [12,9,12,54] },
    { "module": "__main__", "line": 13, "column": 20, "endline": 13, "endcolumn": 29, "stmt": [13,20,13,29] },
    { "module": "__main__", "line": 13, "column": 20, "endline": 13, "endcolumn": 29, "stmt": [13,20,13,29] },
    { "module": "__main__", "line": 13, "column": 29, "endline": 13, "endcolumn": 29, "stmt": [13,20,13,29] },
    { "module": "__main__", "line": 13, "column": 20, "endline": 13, "endcolumn": 29, "stmt": [13,20,13,29] },
    { "module": "__main__", "line": 13, "column": 20, "endline": 13, "endcolumn": 27, "stmt": [13,20,13,29] },
    { "module": "__main__", "line": 13, "column": 20, "endline": 13, "endcolumn": 29, "stmt": [13,20,13,29] },
    { "module": "__main__", "line": 17, "column": 20, "endline": 17, "endcolumn": 29, "stmt": [17,20,17,29] },
    { "module": "__main__", "line": 17, "column": 20, "endline": 17, "endcolumn": 29, "stmt": [17,20,17,29] },
    { "module": "__main__", "line": 17, "column": 29, "endline": 17, "endcolumn": 29, "stmt": [17,20,17,29] },
    { "module": "__main__", "line": 17, "column": 20, "endline": 17, "endcolumn": 29, "stmt": [17,20,17,29] },
    { "module": "__main__", "line": 17, "column": 20, "endline": 17, "endcolumn": 27, "stmt": [17,20,17,29] },
    { "module": "__main__", "line": 17, "column": 20, "endline": 17, "endcolumn": 29, "stmt": [17,20,17,29] },
    { "module": "__main__", "line": 18, "column": 9, "endline": 18, "endcolumn": 13, "stmt": [18,9,18,26] },
    { "module": "__main__", "line": 18, "column": 15, "endline": 18, "endcolumn": 18, "stmt": [18,9,18,26] },
    { "module": "__main__", "line": 18, "column": 9, "endline": 18, "endcolumn": 18, "stmt": [18,9,18,26] },
    { "module": "__main__", "line": 18, "column": 22, "endline": 18, "endcolumn": 26, "stmt": [18,9,18,26] },
    { "module": "__main__", "line": 18, "column": 9, "endline": 18, "endcolumn": 20, "stmt": [18,9,18,26] },
    { "module": "__main__", "line": 9, "column": 5, "endline": 9, "endcolumn": 33, "stmt": [9,5,9,33] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 16, "stmt": [8,1,8,16] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 16, "stmt": [8,1,8,16] },
    { "module": "__main__", "line": 20, "column": 1, "endline": 20, "endcolumn": 3, "stmt": [20,1,20,30] },
    { "module": "__main__", "line": 20, "column": 1, "endline": 20, "endcolumn": 30, "stmt": [20,1,20,30] },
    { "module": "__main__", "line": 21, "column": 12, "endline": 21, "endcolumn": 24, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 19, "endline": 21, "endcolumn": 19, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 21, "endline": 21, "endcolumn": 23, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 19, "endline": 21, "endcolumn": 23, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 12, "endline": 21, "endcolumn": 24, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 12, "endline": 21, "endcolumn": 24, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 12, "endline": 21, "endcolumn": 42, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 31, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 39, "endline": 21, "endcolumn": 41, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 39, "endline": 21, "endcolumn": 41, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 31, "endline": 21, "endcolumn": 41, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 26, "endline": 21, "endcolumn": 28, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 12, "endline": 21, "endcolumn": 42, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 12, "endline": 21, "endcolumn": 42, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 21, "column": 5, "endline": 21, "endcolumn": 10, "stmt": [21,5,21,42] },
    { "module": "__main__", "line": 20, "column": 1, "endline": 20, "endcolumn": 30, "stmt": [20,1,20,30] },
    { "module": "__main__", "line": 20, "column": 1, "endline": 20, "endcolumn": 30, "stmt": [20,1,20,30] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 3, "stmt": [23,1,23,34] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 34, "stmt": [23,1,23,34] },
    { "module": "__main__", "line": 24, "column": 13, "endline": 24, "endcolumn": 13, "stmt": [24,5,24,13] },
    { "module": "__main__", "line": 24, "column": 5, "endline": 24, "endcolumn": 13, "stmt": [24,5,24,13] },
    { "module": "__main__", "line": 25, "column": 12, "endline": 25, "endcolumn": 16, "stmt": [25,5,25,16] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 10, "stmt": [25,5,25,16] },
    { "module": "__main__", "line": 26, "column": 12, "endline": 26, "endcolumn": 12, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 20, "endline": 26, "endcolumn": 23, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 16, "endline": 26, "endcolumn": 24, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 12, "endline": 26, "endcolumn": 24, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 11, "endline": 26, "endcolumn": 40, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 36, "endline": 26, "endcolumn": 39, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 32, "endline": 26, "endcolumn": 39, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 27, "endline": 26, "endcolumn": 29, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 11, "endline": 26, "endcolumn": 40, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 26, "column": 5, "endline": 26, "endcolumn": 9, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 27, "column": 15, "endline": 27, "endcolumn": 15, "stmt": [27,9,27,16] },
    { "module": "__main__", "line": 27, "column": 12, "endline": 27, "endcolumn": 15, "stmt": [27,9,27,16] },
    { "module": "__main__", "line": 27, "column": 9, "endline": 27, "endcolumn": 10, "stmt": [27,9,27,16] },
    { "module": "__main__", "line": 28, "column": 20, "endline": 28, "endcolumn": 23, "stmt": [28,13,28,23] },
    { "module": "__main__", "line": 28, "column": 20, "endline": 28, "endcolumn": 23, "stmt": [28,13,28,23] },
    { "module": "__main__", "line": 28, "column": 13, "endline": 28, "endcolumn": 18, "stmt": [28,13,28,23] },
    { "module": "__main__", "line": 29, "column": 9, "endline": 29, "endcolumn": 14, "stmt": [29,9,29,14] },
    { "module": "__main__", "line": 29, "column": 9, "endline": 29, "endcolumn": 14, "stmt": [29,9,29,14] },
    { "module": "__main__", "line": 29, "column": 14, "endline": 29, "endcolumn": 14, "stmt": [29,9,29,14] },
    { "module": "__main__", "line": 29, "column": 9, "endline": 29, "endcolumn": 14, "stmt": [29,9,29,14] },
    { "module": "__main__", "line": 29, "column": 9, "endline": 29, "endcolumn": 12, "stmt": [29,9,29,14] },
    { "module": "__main__", "line": 26, "column": 5, "endline": 26, "endcolumn": 41, "stmt": [26,5,26,41] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 34, "stmt": [23,1,23,34] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 34, "stmt": [23,1,23,34] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 34, "stmt": [23,1,23,34] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 34, "stmt": [23,1,23,34] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 3, "stmt": [31,1,31,24] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 24, "stmt": [31,1,31,24] },
    { "module": "__main__", "line": 32, "column": 18, "endline": 32, "endcolumn": 32, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 25, "endline": 32, "endcolumn": 25, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 29, "endline": 32, "endcolumn": 31, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 25, "endline": 32, "endcolumn": 31, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 18, "endline": 32, "endcolumn": 32, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 18, "endline": 32, "endcolumn": 32, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 14, "endline": 32, "endcolumn": 32, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 13, "endline": 32, "endcolumn": 50, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 39, "endline": 32, "endcolumn": 42, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 47, "endline": 32, "endcolumn": 49, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 47, "endline": 32, "endcolumn": 49, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 39, "endline": 32, "endcolumn": 49, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 35, "endline": 32, "endcolumn": 36, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 13, "endline": 32, "endcolumn": 50, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 13, "endline": 32, "endcolumn": 50, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 32, "column": 5, "endline": 32, "endcolumn": 10, "stmt": [32,5,32,50] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 24, "stmt": [31,1,31,24] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 24, "stmt": [31,1,31,24] },
    { "module": "__main__", "line": 35, "column": 7, "endline": 35, "endcolumn": 12, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 35, "column": 14, "endline": 35, "endcolumn": 14, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 35, "column": 7, "endline": 35, "endcolumn": 14, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 35, "column": 1, "endline": 35, "endcolumn": 14, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 35, "column": 1, "endline": 35, "endcolumn": 14, "stmt": [35,1,35,14] },
    { "module": "__main__", "line": 36, "column": 7, "endline": 36, "endcolumn": 12, "stmt": [36,1,36,14] },
    { "module": "__main__", "line": 36, "column": 14, "endline": 36, "endcolumn": 14, "stmt": [36,1,36,14] },
    { "module": "__main__", "line": 36, "column": 7, "endline": 36, "endcolumn": 14, "stmt": [36,1,36,14] },
    { "module": "__main__", "line": 36, "column": 1, "endline": 36, "endcolumn": 14, "stmt": [36,1,36,14] },
    { "module": "__main__", "line": 36, "column": 1, "endline": 36, "endcolumn": 14, "stmt": [36,1,36,14] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 38, "endcolumn": 7, "stmt": [1,1,38,7] },
    { "module": "__main__", "line": 1, "column": 1, "endline": 38, "endcolumn": 7, "stmt": [1,1,38,7] }
  ]
}
