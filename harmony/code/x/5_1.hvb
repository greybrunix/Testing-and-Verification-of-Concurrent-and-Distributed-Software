Issue: Non-terminating state

Modules:
  __main__: 5_1.hny

================================================
Running thread T0: __init__()
mode:  runnable atomic
stack: ['[]']
state id: 1
================================================

Step 1:
  program counter:   0
  hvm code:          Frame __init__()
  explanation:       pop argument () and run method "__init__"
  module:            __main__
  start statement:   line=1 column=1
  end statement:     line=15 column=7
  source code:       in_cs = 0
  call trace:        __init__()
  stack:             [{:}]

Step 2:
  program counter:   1
  hvm code:          Push 0
  explanation:       push constant 0
  start statement:   line=1 column=1
  end statement:     line=1 column=9
  source code:       in_cs = 0
                             ^
  stack:             [{:}, 0]

Step 3:
  program counter:   2
  hvm code:          Store in_cs
  explanation:       pop value (0) and store into variable in_cs
  source code:       in_cs = 0
                     ^^^^^^^
  shared variables:  { in_cs: 0 }
  stack:             [{:}]

Step 4:
  program counter:   3
  hvm code:          Jump 14
  explanation:       jump over invariant definition: set program counter to 14
  start statement:   line=2 column=1
  end statement:     line=2 column=26
  source code:       invariant in_cs in {0 , 1}
                     ^^^^^^^^^

Step 5:
  program counter:   14
  hvm code:          Invariant 4
  explanation:       test invariant
  source code:       invariant in_cs in {0 , 1}
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^

Step 6:
  program counter:   15
  hvm code:          Jump 42
  explanation:       jump over method definition: set program counter to 42
  start statement:   line=4 column=1
  end statement:     line=4 column=13
  source code:       def thread():
                     ^^^

Step 7:
  program counter:   42
  hvm code:          Push ?PC(16)
  explanation:       push constant ?PC(16)
  start statement:   line=13 column=1
  end statement:     line=13 column=14
  source code:       spawn thread();
                           ^^^^^^
  stack:             [{:}, ?PC(16)]

Step 8:
  program counter:   43
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       spawn thread();
                                 ^^
  stack:             [{:}, ?PC(16), []]

Step 9:
  program counter:   44
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ([], ?PC(16)); push result (?PC(16)[[]])
  source code:       spawn thread();
                           ^^^^^^^^
  stack:             [{:}, ?PC(16)[[]]]

Step 10:
  program counter:   45
  hvm code:          Push {:}
  explanation:       push constant {:}
  source code:       spawn thread();
                     ^^^^^^^^^^^^^^
  stack:             [{:}, ?PC(16)[[]], {:}]

Step 11:
  program counter:   46
  hvm code:          Spawn
  explanation:       pop local state ({:}), arg ([]), and pc (16: "thread"), and spawn thread
  start expression:  line=13 column=1
  end expression:    line=13 column=14
  stack:             [{:}]

Step 12:
  program counter:   47
  hvm code:          Push ?PC(16)
  explanation:       push constant ?PC(16)
  start statement:   line=14 column=1
  end statement:     line=14 column=14
  source code:       spawn thread();
                           ^^^^^^
  stack:             [{:}, ?PC(16)]

Step 13:
  program counter:   48
  hvm code:          Push ()
  explanation:       push constant ()
  source code:       spawn thread();
                                 ^^
  stack:             [{:}, ?PC(16), []]

Step 14:
  program counter:   49
  hvm code:          2-ary AddArg
  explanation:       pop 2 values ([], ?PC(16)); push result (?PC(16)[[]])
  source code:       spawn thread();
                           ^^^^^^^^
  stack:             [{:}, ?PC(16)[[]]]

Step 15:
  program counter:   50
  hvm code:          Push {:}
  explanation:       push constant {:}
  source code:       spawn thread();
                     ^^^^^^^^^^^^^^
  stack:             [{:}, ?PC(16)[[]], {:}]

Step 16:
  program counter:   51
  hvm code:          Spawn
  explanation:       pop local state ({:}), arg ([]), and pc (16: "thread"), and spawn thread
  start expression:  line=14 column=1
  end expression:    line=14 column=14
  stack:             [{:}]

Step 17:
  program counter:   52
  hvm code:          ReturnOp(result. None)
  explanation:       pop caller's method variables and pc and push result (%+), or terminate if no caller
  start statement:   line=1 column=1
  end statement:     line=15 column=7
  source code:       in_cs = 0
  new mode:          terminated
  stack:             [None]

================================================
Running thread T1: thread()
mode:  runnable
stack: ['[]']
other threads:
  T0: pc=52 terminated atomic __init__()
  T2: pc=16 runnable thread()
    about to run method thread with argument []
shared variables:
  in_cs: 0
state id: 2
================================================

Step 18:
  program counter:   16
  hvm code:          Frame thread()
  explanation:       pop argument () and run method "thread"
  start statement:   line=4 column=1
  end statement:     line=4 column=13
  source code:       def thread():
                     ^^^^^^^^^^^^^
  call trace:        thread()
  stack:             [{:}]

Step 19:
  program counter:   17
  hvm code:          Push {}
  explanation:       push constant {}
  start statement:   line=5 column=2
  end statement:     line=5 column=29
  source code:       	while choose { False,True }:
                                     ^^^^^^^^^^
  stack:             [{:}, {}]

Step 20:
  program counter:   18
  hvm code:          Push False
  explanation:       push constant False
  source code:       	while choose { False,True }:
                                     ^^^^^
  stack:             [{:}, {}, False]

Step 21:
  program counter:   19
  hvm code:          2-ary SetAdd
  explanation:       pop 2 values (False, {}); insert first value into the second; push result ({ False })
  source code:       	while choose { False,True }:
                                     ^^^^^^^^^^
  stack:             [{:}, { False }]

Step 22:
  program counter:   20
  hvm code:          Push True
  explanation:       push constant True
  source code:       	while choose { False,True }:
                                           ^^^^
  stack:             [{:}, { False }, True]

Step 23:
  program counter:   21
  hvm code:          2-ary SetAdd
  explanation:       pop 2 values (True, { False }); insert first value into the second; push result ({ False, True })
  source code:       	while choose { False,True }:
                                     ^^^^^^^^^^
  stack:             [{:}, { False, True }]

Step 24:
  program counter:   22
  hvm code:          Choose
  explanation:       replace top of stack ({ False, True }) with choice (True)
  source code:       	while choose { False,True }:
                            ^^^^^^^^^^^^^^^^^^^^^
  call trace:        thread()
  stack:             [{:}, True]

Step 25:
  program counter:   23
  hvm code:          JumpCond False 41
  explanation:       pop value (True), compare to False, and jump to 41 if the same
  source code:       	while choose { False,True }:
                      ^^^^^
  stack:             [{:}]

Step 26:
  program counter:   24
  hvm code:          Push False
  explanation:       push constant False
  start statement:   line=6 column=3
  end statement:     line=6 column=13
  source code:       		await False;
                             ^^^^^
  stack:             [{:}, False]

Step 27:
  program counter:   25
  hvm code:          JumpCond False 24
  explanation:       pop value (False), compare to False, and jump to 24 if the same
  source code:       		await False;
                       ^^^^^^^^^^^
  new mode:          failed
  stack:             [{:}]
  operation failed:  infinite loop

================================================
Final state
================================================
Threads:
  T0: pc=52 terminated atomic __init__()
  T1: pc=24 failed thread()
  T2: pc=16 runnable thread()
    about to run method thread with argument []
Variables:
  in_cs: 0
