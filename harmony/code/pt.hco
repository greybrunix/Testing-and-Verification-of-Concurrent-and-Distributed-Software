{
  "nstates": 8,
  "issue": "Safety violation",
  "hvm": {
    "modules": {
        "__main__": {
            "file": "pt.hny",
            "lines": [
                "in_cs = 0",
                "#invariant not (in_cs in { 0, 1 }) #forall (C1 C2: clients) , cs C1 /\\ cs C2 -> C1 = C2",
                "invariant not (any (cs (C_1) and cs (C_2) for (C_1,C_2) in [(0,0),(1,0),(1,1)]) => (C_1 == C_2))",
                "#invariant not (any [entering tid for tid in [0,1]] => one_entered [0,1])",
                "sequential flags, turn",
                "flags = ( False, False )",
                "turn  = choose { 0, 1 }",
                "def thread self:",
                "    while choose { False, True }:",
                "        flags self = True",
                "        turn = 1 - self",
                "        await (not flags (1 - self)) or (turn == self)",
                "        atomically in_cs += 1",
                "        # critical",
                "        pass",
                "        # lv critical",
                "        atomically in_cs -= 1",
                "        flags self = False",
                "",
                "def entering tid returns tst1:",
                "    tst1 = flags (1-tid) and (turn != tid)",
                "",
                "def one_entered tids returns tst2:",
                "    var i = 0",
                "    tst2 = False",
                "    while (i < len(tids)) and (not tst2):",
                "        if cs i:",
                "            tst2 = True",
                "        i += 1",
                "",
                "def cs tid returns tst3:",
                "    tst3 =  (not flags (1 - tid)) or (turn == tid)",
                "",
                "",
                "spawn thread 0",
                "spawn thread 1",
                ""
              ],
            "identifiers": {
                "thread": "constant",
                "one_entered": "constant",
                "tids": "local-const",
                "tid": "local-const",
                "self": "local-const",
                "i": "local-var",
                "C_1": "local-const",
                "flags": "global",
                "C_2": "local-const",
                "cs": "constant",
                "in_cs": "global",
                "this": "local-var",
                "turn": "global",
                "___": "___",
                "entering": "constant"
              }
          }
      },
    "labels": {
        "__end__": 213
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "Jump 58",
            "jump over invariant definition: set program counter to 58"
          ],
        [
            "Frame invariant()",
            "start of method invariant"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu5",
            "initialize accumulator for list comprehension: pop a value and store in $accu5"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut((C_1, C_2))",
            "get next element and assign to (C_1, C_2); push False or True depending on success"
          ],
        [
            "JumpCond False 44",
            "check if loop is done: pop a value and jump to 44 if the value is False"
          ],
        [
            "LoadVar $accu5",
            "load accumulator: push the value of $accu5"
          ],
        [
            "DelVar $accu5",
            "delete method variable $accu5"
          ],
        [
            "LoadVar C_1",
            "push the value of C_1"
          ],
        [
            "DelVar C_1",
            "delete method variable C_1"
          ],
        [
            "Apply PC(182)",
            "call method PC(182)"
          ],
        [
            "JumpCond False 39",
            "pop a value and jump to 39 if the value is False"
          ],
        [
            "LoadVar C_2",
            "push the value of C_2"
          ],
        [
            "DelVar C_2",
            "delete method variable C_2"
          ],
        [
            "Apply PC(182)",
            "call method PC(182)"
          ],
        [
            "Jump 41",
            "set program counter to 41"
          ],
        [
            "DelVar C_2",
            "delete method variable C_2"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu5",
            "update accumulator: pop a value and store in $accu5"
          ],
        [
            "Jump 27",
            "set program counter to 27"
          ],
        [
            "DelVar C_1",
            "delete method variable C_1"
          ],
        [
            "DelVar C_2",
            "delete method variable C_2"
          ],
        [
            "LoadVar $accu5",
            "load final accumulator result: push the value of $accu5"
          ],
        [
            "DelVar $accu5",
            "delete method variable $accu5"
          ],
        [
            "1-ary any",
            "pop 1 value and push the result of applying any"
          ],
        [
            "JumpCond False 54",
            "pop a value and jump to 54 if the value is False"
          ],
        [
            "Load C_1",
            "push value of shared variable C_1"
          ],
        [
            "Load C_2",
            "push value of shared variable C_2"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Jump 55",
            "set program counter to 55"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Invariant 4",
            "test invariant"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "Sequential",
            "sequential consistency for variable on top of stack"
          ],
        [
            "Push ?turn",
            "push constant ?turn"
          ],
        [
            "Sequential",
            "sequential consistency for variable on top of stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Store flags",
            "pop a value and store it in shared variable flags"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "Store turn",
            "pop a value and store it in shared variable turn"
          ],
        [
            "Jump 201",
            "jump over method definition: set program counter to 201"
          ],
        [
            "Frame thread(self)",
            "start of method thread"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 128",
            "pop a value and jump to 128 if the value is False"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store turn",
            "pop a value and store it in shared variable turn"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond True 106",
            "pop a value and jump to 106 if the value is True"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Jump 107",
            "set program counter to 107"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "JumpCond False 94",
            "pop a value and jump to 94 if the value is False"
          ],
        [
            "Jump 110",
            "set program counter to 110"
          ],
        [
            "Jump 94",
            "set program counter to 94"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Jump 78",
            "set program counter to 78"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 201",
            "jump over method definition: set program counter to 201"
          ],
        [
            "Frame entering(tid)",
            "start of method entering"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 144",
            "pop a value and jump to 144 if the value is False"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Jump 146",
            "set program counter to 146"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "StoreVar tst1",
            "pop a value and store in tst1"
          ],
        [
            "ReturnOp(tst1)",
            "restore caller method state and push tst1"
          ],
        [
            "DelVar tst1",
            "delete method variable tst1"
          ],
        [
            "Jump 201",
            "jump over method definition: set program counter to 201"
          ],
        [
            "Frame one_entered(tids)",
            "start of method one_entered"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "StoreVar tst2",
            "pop a value and store in tst2"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "LoadVar tids",
            "push the value of tids"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary <",
            "pop 2 values and push the result of applying <"
          ],
        [
            "JumpCond False 163",
            "pop a value and jump to 163 if the value is False"
          ],
        [
            "LoadVar tst2",
            "push the value of tst2"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "Jump 164",
            "set program counter to 164"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "JumpCond False 177",
            "pop a value and jump to 177 if the value is False"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "Apply PC(182)",
            "call method PC(182)"
          ],
        [
            "JumpCond False 171",
            "pop a value and jump to 171 if the value is False"
          ],
        [
            "DelVar tst2",
            "delete method variable tst2"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "StoreVar tst2",
            "pop a value and store in tst2"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Jump 155",
            "set program counter to 155"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar tids",
            "delete method variable tids"
          ],
        [
            "ReturnOp(tst2)",
            "restore caller method state and push tst2"
          ],
        [
            "DelVar tst2",
            "delete method variable tst2"
          ],
        [
            "Jump 201",
            "jump over method definition: set program counter to 201"
          ],
        [
            "Frame cs(tid)",
            "start of method cs"
          ],
        [
            "Push ?flags",
            "push constant ?flags"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "JumpCond True 196",
            "pop a value and jump to 196 if the value is True"
          ],
        [
            "Load turn",
            "push value of shared variable turn"
          ],
        [
            "LoadVar tid",
            "push the value of tid"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Jump 198",
            "set program counter to 198"
          ],
        [
            "DelVar tid",
            "delete method variable tid"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "StoreVar tst3",
            "pop a value and store in tst3"
          ],
        [
            "ReturnOp(tst3)",
            "restore caller method state and push tst3"
          ],
        [
            "DelVar tst3",
            "delete method variable tst3"
          ],
        [
            "Push ?PC(77)",
            "push constant ?PC(77)"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Push ?PC(77)",
            "push constant ?PC(77)"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                1,
                1,
                38,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                9
              ],
            "line": 1,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                9
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 96,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 77,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 64,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 62,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 64,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 64,
            "column": 64
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 64,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 77,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 70,
            "column": 68
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 68,
            "column": 68
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 70,
            "column": 68
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 70,
            "column": 70
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 70,
            "column": 68
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 77,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 76,
            "column": 74
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 74,
            "column": 74
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 76,
            "column": 74
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 76,
            "column": 76
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 76,
            "column": 74
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 77,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 22,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 27,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 27,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 28,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 40,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 40,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 41,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 32,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 41,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 78
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 78,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 79,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 95,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 87,
            "column": 85
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 94,
            "column": 92
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 94,
            "column": 85
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 82,
            "column": 81
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 95,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 96,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 96,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 96,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                96
              ],
            "line": 3,
            "endcolumn": 96,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                22
              ],
            "line": 5,
            "endcolumn": 16,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                22
              ],
            "line": 5,
            "endcolumn": 22,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                22
              ],
            "line": 5,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                22
              ],
            "line": 5,
            "endcolumn": 22,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                24
              ],
            "line": 6,
            "endcolumn": 22,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                24
              ],
            "line": 6,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                24
              ],
            "line": 6,
            "endcolumn": 22,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                24
              ],
            "line": 6,
            "endcolumn": 22,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                24
              ],
            "line": 6,
            "endcolumn": 22,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                24
              ],
            "line": 6,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 21,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 21,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 21,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                16
              ],
            "line": 8,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                16
              ],
            "line": 8,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                33
              ],
            "line": 9,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                33
              ],
            "line": 9,
            "endcolumn": 24,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                33
              ],
            "line": 9,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                33
              ],
            "line": 9,
            "endcolumn": 30,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                33
              ],
            "line": 9,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                33
              ],
            "line": 9,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                33
              ],
            "line": 9,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                25
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                25
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                25
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                25
              ],
            "line": 10,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                25
              ],
            "line": 10,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                9,
                11,
                23
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                9,
                11,
                23
              ],
            "line": 11,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                9,
                11,
                23
              ],
            "line": 11,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                9,
                11,
                23
              ],
            "line": 11,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 35,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 34,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 34,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 35,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 35,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 35,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 54,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 45,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 53,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 53,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 39,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 54,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 54,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                54
              ],
            "line": 12,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                13,
                29
              ],
            "line": 13,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                13,
                29
              ],
            "line": 13,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                13,
                29
              ],
            "line": 13,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                13,
                29
              ],
            "line": 13,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                13,
                29
              ],
            "line": 13,
            "endcolumn": 27,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                13,
                29
              ],
            "line": 13,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                20,
                17,
                29
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                20,
                17,
                29
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                20,
                17,
                29
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                20,
                17,
                29
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                20,
                17,
                29
              ],
            "line": 17,
            "endcolumn": 27,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                20,
                17,
                29
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                26
              ],
            "line": 18,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                26
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                26
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                26
              ],
            "line": 18,
            "endcolumn": 26,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                26
              ],
            "line": 18,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                33
              ],
            "line": 9,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                16
              ],
            "line": 8,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                16
              ],
            "line": 8,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                30
              ],
            "line": 20,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                30
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 24,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 24,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 24,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 42,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 41,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 41,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 41,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 28,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 42,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 42,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                42
              ],
            "line": 21,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                30
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                30
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                34
              ],
            "line": 23,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                34
              ],
            "line": 23,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                16
              ],
            "line": 25,
            "endcolumn": 16,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                16
              ],
            "line": 25,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 40,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 39,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 29,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 40,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                9,
                27,
                16
              ],
            "line": 27,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                9,
                27,
                16
              ],
            "line": 27,
            "endcolumn": 15,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                9,
                27,
                16
              ],
            "line": 27,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                13,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                13,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                13,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 18,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                14
              ],
            "line": 29,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                14
              ],
            "line": 29,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                14
              ],
            "line": 29,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                14
              ],
            "line": 29,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                14
              ],
            "line": 29,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                41
              ],
            "line": 26,
            "endcolumn": 41,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                34
              ],
            "line": 23,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                34
              ],
            "line": 23,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                34
              ],
            "line": 23,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                34
              ],
            "line": 23,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                24
              ],
            "line": 31,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                24
              ],
            "line": 31,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 32,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 31,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 31,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 32,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 32,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 32,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 50,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 42,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 49,
            "column": 47
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 49,
            "column": 47
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 49,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 36,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 50,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 50,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                5,
                32,
                50
              ],
            "line": 32,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                24
              ],
            "line": 31,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                1,
                31,
                24
              ],
            "line": 31,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                1,
                35,
                14
              ],
            "line": 35,
            "endcolumn": 12,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                1,
                35,
                14
              ],
            "line": 35,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                1,
                35,
                14
              ],
            "line": 35,
            "endcolumn": 14,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                1,
                35,
                14
              ],
            "line": 35,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                35,
                1,
                35,
                14
              ],
            "line": 35,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                1,
                36,
                14
              ],
            "line": 36,
            "endcolumn": 12,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                1,
                36,
                14
              ],
            "line": 36,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                1,
                36,
                14
              ],
            "line": 36,
            "endcolumn": 14,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                1,
                36,
                14
              ],
            "line": 36,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                36,
                1,
                36,
                14
              ],
            "line": 36,
            "endcolumn": 14,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                1,
                1,
                38,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                1,
                1,
                38,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "58",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "invariant",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu5",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "(C_1, C_2)",
            "op": "Cut"
          },
        {
            "pc": "44",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu5",
            "op": "LoadVar"
          },
        {
            "value": "$accu5",
            "op": "DelVar"
          },
        {
            "value": "C_1",
            "op": "LoadVar"
          },
        {
            "value": "C_1",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "182"
              },
            "op": "Apply"
          },
        {
            "pc": "39",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "C_2",
            "op": "LoadVar"
          },
        {
            "value": "C_2",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "182"
              },
            "op": "Apply"
          },
        {
            "pc": "41",
            "op": "Jump"
          },
        {
            "value": "C_2",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu5",
            "op": "StoreVar"
          },
        {
            "pc": "27",
            "op": "Jump"
          },
        {
            "value": "C_1",
            "op": "DelVar"
          },
        {
            "value": "C_2",
            "op": "DelVar"
          },
        {
            "value": "$accu5",
            "op": "LoadVar"
          },
        {
            "value": "$accu5",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "any",
            "op": "Nary"
          },
        {
            "pc": "54",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "C_1"
                  }
              ],
            "op": "Load"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "C_2"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "55",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "4",
            "op": "Invariant",
            "pre": "False"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "op": "Sequential"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "turn"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "op": "Sequential"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "flags"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "201",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "thread",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "128",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "106",
            "cond": {
                "type": "bool",
                "value": "True"
              },
            "op": "JumpCond"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "107",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "pc": "94",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "pc": "110",
            "op": "Jump"
          },
        {
            "pc": "94",
            "op": "Jump"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "pc": "78",
            "op": "Jump"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "201",
            "op": "Jump"
          },
        {
            "args": "tid",
            "name": "entering",
            "op": "Frame"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "144",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "146",
            "op": "Jump"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": "tst1",
            "op": "StoreVar"
          },
        {
            "result": "tst1",
            "op": "Return"
          },
        {
            "value": "tst1",
            "op": "DelVar"
          },
        {
            "pc": "201",
            "op": "Jump"
          },
        {
            "args": "tids",
            "name": "one_entered",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": "tst2",
            "op": "StoreVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "tids",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "<",
            "op": "Nary"
          },
        {
            "pc": "163",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "tst2",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "164",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "pc": "177",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "182"
              },
            "op": "Apply"
          },
        {
            "pc": "171",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "tst2",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "value": "tst2",
            "op": "StoreVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "pc": "155",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "tids",
            "op": "DelVar"
          },
        {
            "result": "tst2",
            "op": "Return"
          },
        {
            "value": "tst2",
            "op": "DelVar"
          },
        {
            "pc": "201",
            "op": "Jump"
          },
        {
            "args": "tid",
            "name": "cs",
            "op": "Frame"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "flags"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "pc": "196",
            "cond": {
                "type": "bool",
                "value": "True"
              },
            "op": "JumpCond"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "turn"
                  }
              ],
            "op": "Load"
          },
        {
            "value": "tid",
            "op": "LoadVar"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "198",
            "op": "Jump"
          },
        {
            "value": "tid",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "value": "tst3",
            "op": "StoreVar"
          },
        {
            "result": "tst3",
            "op": "Return"
          },
        {
            "value": "tst3",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "77"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "77"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "5c358a823d6a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1"
        },

        {
          "code": "Store in_cs",
          "explain": "pop value (0) and store into variable in_cs",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "in_cs" } ] } ] },
          "shared": { "in_cs": { "type": "int", "value": "0" } },
          "npc": "3",
          "pop": "1",
          "push": [ ],
          "pc": "2"
        },

        {
          "code": "Jump 58",
          "explain": "jump over invariant definition: set program counter to 58",
          "explain2": { "text": "jump over invariant definition: set program counter to 58", "args": [] },
          "npc": "58",
          "push": [ ],
          "pc": "3"
        },

        {
          "code": "Invariant 4",
          "explain": "test invariant",
          "explain2": { "text": "test invariant", "args": [] },
          "npc": "59",
          "push": [ ],
          "pc": "58"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "60",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "59"
        },

        {
          "code": "Sequential",
          "explain": "sequential consistency for variable on top of stack",
          "explain2": { "text": "sequential consistency for variable on top of stack", "args": [] },
          "npc": "61",
          "pop": "1",
          "push": [ ],
          "pc": "60"
        },

        {
          "code": "Push ?turn",
          "explain": "push constant ?turn",
          "explain2": { "text": "push constant ?turn", "args": [] },
          "npc": "62",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" } ] } ],
          "pc": "61"
        },

        {
          "code": "Sequential",
          "explain": "sequential consistency for variable on top of stack",
          "explain2": { "text": "sequential consistency for variable on top of stack", "args": [] },
          "npc": "63",
          "pop": "1",
          "push": [ ],
          "pc": "62"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "64",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "63"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "65",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "64"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, []); insert first value into the second; push result ([False])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "67",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "66"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, [False]); insert first value into the second; push result ([False, False])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "list", "value": [{ "type": "bool", "value": "False" } ] }, { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ],
          "pc": "67"
        },

        {
          "code": "Store flags",
          "explain": "pop value ([False, False]) and store into variable flags",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ] },
          "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" } },
          "npc": "69",
          "pop": "1",
          "push": [ ],
          "pc": "68"
        },

        {
          "code": "Push {}",
          "explain": "push constant {}",
          "explain2": { "text": "push constant {}", "args": [] },
          "npc": "70",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "69"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "71",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "70"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (0, {}); insert first value into the second; push result ({ 0 })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "72",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "71"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "73",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "72"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (1, { 0 }); insert first value into the second; push result ({ 0, 1 })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" } ] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "74",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "73"
        }

      ],
      "ctxbag": {
          "7bcfa460015a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7bcfa460015a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "74",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }],
          "trace": [
{"pc": "74","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "3",
      "tid": "0",
      "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" } },
      "name": "__init__()",
      "choice": { "type": "int", "value": "1" },
      "context": {
        "tid": "0",
        "hvalue": "7bcfa460015a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "74",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }],
        "trace": [
{"pc": "74","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ 0, 1 }) with choice (1)",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" } ] },
          "choose": { "type": "int", "value": "1" },
          "npc": "75",
          "fp": "1",
          "trace": [
{"pc": "75","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "74"
        },

        {
          "code": "Store turn",
          "explain": "pop value (1) and store into variable turn",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" } ] } ] },
          "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "turn": { "type": "int", "value": "1" } },
          "npc": "76",
          "pop": "1",
          "push": [ ],
          "pc": "75"
        },

        {
          "code": "Jump 201",
          "explain": "jump over method definition: set program counter to 201",
          "explain2": { "text": "jump over method definition: set program counter to 201", "args": [] },
          "npc": "201",
          "push": [ ],
          "pc": "76"
        },

        {
          "code": "Push ?PC(77)",
          "explain": "push constant ?PC(77)",
          "explain2": { "text": "push constant ?PC(77)", "args": [] },
          "npc": "202",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [ ] } ],
          "pc": "201"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "203",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "202"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?PC(77)); push result (?PC(77)[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "204",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [{ "type": "int", "value": "0" } ] } ],
          "pc": "203"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "205",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "204"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (0), and pc (77: \"thread\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (77: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "0" }, { "type": "atom", "value": "thread" } ] },
          "npc": "206",
          "pop": "2",
          "push": [ ],
          "pc": "205"
        },

        {
          "code": "Push ?PC(77)",
          "explain": "push constant ?PC(77)",
          "explain2": { "text": "push constant ?PC(77)", "args": [] },
          "npc": "207",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [ ] } ],
          "pc": "206"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "208",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "207"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(77)); push result (?PC(77)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "209",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "77" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "208"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "210",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "209"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (77: \"thread\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (77: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "thread" } ] },
          "npc": "211",
          "pop": "2",
          "push": [ ],
          "pc": "210"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "211",
          "mode": "terminated",
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "211"
        }

      ],
      "ctxbag": {
          "7bcfa46001ea": "1",
          "7bcfa460023a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7bcfa460026a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "211",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "211","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7bcfa46001ea",
          "fp": "1",
          "name": "thread(0)",
          "entry": "77",
          "pc": "77",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "77","xpc": "77","method_name": { "type": "atom", "value": "thread" },
"method_arg": { "type": "int", "value": "0" },
"method": "thread(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "thread", "args": "self", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7bcfa460023a",
          "fp": "1",
          "name": "thread(1)",
          "entry": "77",
          "pc": "77",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "77","xpc": "77","method_name": { "type": "atom", "value": "thread" },
"method_arg": { "type": "int", "value": "1" },
"method": "thread(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "thread", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3",
      "tid": "3",
      "shared": { "flags": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] }, "in_cs": { "type": "int", "value": "0" }, "turn": { "type": "int", "value": "1" } },
      "name": "invariant()",
      "context": {
        "tid": "3",
        "hvalue": "7bcfa460003a",
        "fp": "1",
        "name": "invariant()",
        "entry": "4",
        "pc": "4",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "4","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "readonly": "1",
        "next": { "type": "Frame", "name": "invariant", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame invariant()",
          "explain": "pop argument () and run method \"invariant\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "invariant" } ] },
          "npc": "5",
          "fp": "1",
          "trace": [
{"pc": "5","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "4"
        },

        {
          "code": "Push ()",
          "explain": "initialize accumulator for list comprehension: push constant ()",
          "explain2": { "text": "initialize accumulator for list comprehension: push constant ()", "args": [] },
          "npc": "6",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "5"
        },

        {
          "code": "StoreVar $accu5",
          "explain": "pop value ([]) and store locally in variable \\\"$accu5\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu5\"", "args": [ { "type": "list", "value": [] } ] },
          "npc": "7",
          "local": { "$accu5": { "type": "list", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "6"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "8",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "7"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "9",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "8"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "10",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "9"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "11",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "10"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "12",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "11"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [0]); insert first value into the second; push result ([0, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "13",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "12"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([0, 0], []); insert first value into the second; push result ([[0, 0]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "14",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "13"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "15",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "14"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "16",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "15"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "17",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "16"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "18",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "17"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [1]); insert first value into the second; push result ([1, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "19",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "18"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([1, 0], [[0, 0]]); insert first value into the second; push result ([[0, 0], [1, 0]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "20",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "19"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "21",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "20"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "22",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "21"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "23",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "22"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "24",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "23"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [1]); insert first value into the second; push result ([1, 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "25",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([1, 1], [[0, 0], [1, 0]]); insert first value into the second; push result ([[0, 0], [1, 0], [1, 1]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "25"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "27",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "26"
        },

        {
          "code": "Cut((C_1, C_2))",
          "explain": "pop index (0) and value ([[0, 0], [1, 0], [1, 1]]); assign value ([0, 0]) to (C_1, C_2); push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to (C_1, C_2); push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "28",
          "local": { "$accu5": { "type": "list", "value": [] }, "C_1": { "type": "int", "value": "0" }, "C_2": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "27"
        },

        {
          "code": "JumpCond False 44",
          "explain": "pop value (True), compare to False, and jump to 44 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 44 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "29",
          "pop": "1",
          "push": [ ],
          "pc": "28"
        },

        {
          "code": "LoadVar $accu5",
          "explain": "push value ([]) of variable \"$accu5\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "$accu5" } ] },
          "npc": "30",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "29"
        },

        {
          "code": "DelVar $accu5",
          "explain": "delete method variable $accu5",
          "explain2": { "text": "delete method variable $accu5", "args": [] },
          "npc": "31",
          "local": { "C_1": { "type": "int", "value": "0" }, "C_2": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "30"
        },

        {
          "code": "LoadVar C_1",
          "explain": "push value (0) of variable \"C_1\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "C_1" } ] },
          "npc": "32",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "31"
        },

        {
          "code": "DelVar C_1",
          "explain": "delete method variable C_1",
          "explain2": { "text": "delete method variable C_1", "args": [] },
          "npc": "33",
          "local": { "C_2": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "32"
        },

        {
          "code": "Apply PC(182)",
          "explain": "pop an argument (0) and call method (182: \"cs\")",
          "explain2": { "text": "pop an argument (#+) and call method (182: #+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "cs" } ] },
          "npc": "182",
          "fp": "7",
          "trace": [
{"pc": "34","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ "C_2": { "type": "int", "value": "0" } },"sp": 0},{"pc": "182","xpc": "182","method_name": { "type": "atom", "value": "cs" },
"method_arg": { "type": "int", "value": "0" },
"method": "cs(0)","calltype": "normal","vars":{ "C_2": { "type": "int", "value": "0" } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "530" }, { "type": "int", "value": "0" } ],
          "pc": "33"
        },

        {
          "code": "Frame cs(tid)",
          "explain": "pop argument (0), assign to tid, and run method \"cs\"",
          "explain2": { "text": "pop argument (#+), assign to tid, and run method #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "cs" } ] },
          "npc": "183",
          "local": { "tid": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "C_2" }, "value": { "type": "int", "value": "0" } } ] } ],
          "pc": "182"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "184",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "183"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "185",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "184"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (0) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "tid" } ] },
          "npc": "186",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "185"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (0, 1); the second integer minus the first; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] },
          "npc": "187",
          "pop": "1",
          "push": [ ],
          "pc": "186"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?flags); push result (?flags[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "188",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] } ],
          "pc": "187"
        },

        {
          "code": "Load",
          "explain": "pop address (?flags[1]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "189",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "188"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "190",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "189"
        },

        {
          "code": "JumpCond True 196",
          "explain": "pop value (True), compare to True, and jump to 196 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 196 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "196",
          "pop": "1",
          "push": [ ],
          "pc": "190"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "197",
          "local": { },
          "push": [ ],
          "pc": "196"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "198",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "197"
        },

        {
          "code": "StoreVar tst3",
          "explain": "pop value (True) and store locally in variable \\\"tst3\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"tst3\"", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "199",
          "local": { "tst3": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "198"
        },

        {
          "code": "ReturnOp(tst3)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "34",
          "fp": "1",
          "trace": [
{"pc": "34","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ "C_2": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "local": { "C_2": { "type": "int", "value": "0" } },
          "pop": "3",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "199"
        },

        {
          "code": "JumpCond False 39",
          "explain": "pop value (True), compare to False, and jump to 39 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 39 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "35",
          "pop": "1",
          "push": [ ],
          "pc": "34"
        },

        {
          "code": "LoadVar C_2",
          "explain": "push value (0) of variable \"C_2\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "C_2" } ] },
          "npc": "36",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "35"
        },

        {
          "code": "DelVar C_2",
          "explain": "delete method variable C_2",
          "explain2": { "text": "delete method variable C_2", "args": [] },
          "npc": "37",
          "local": { },
          "push": [ ],
          "pc": "36"
        },

        {
          "code": "Apply PC(182)",
          "explain": "pop an argument (0) and call method (182: \"cs\")",
          "explain2": { "text": "pop an argument (#+) and call method (182: #+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "cs" } ] },
          "npc": "182",
          "fp": "7",
          "trace": [
{"pc": "38","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0},{"pc": "182","xpc": "182","method_name": { "type": "atom", "value": "cs" },
"method_arg": { "type": "int", "value": "0" },
"method": "cs(0)","calltype": "normal","vars":{ },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "594" }, { "type": "int", "value": "0" } ],
          "pc": "37"
        },

        {
          "code": "Frame cs(tid)",
          "explain": "pop argument (0), assign to tid, and run method \"cs\"",
          "explain2": { "text": "pop argument (#+), assign to tid, and run method #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "cs" } ] },
          "npc": "183",
          "local": { "tid": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "182"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "184",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "183"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "185",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "184"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (0) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "tid" } ] },
          "npc": "186",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "185"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (0, 1); the second integer minus the first; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] },
          "npc": "187",
          "pop": "1",
          "push": [ ],
          "pc": "186"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?flags); push result (?flags[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "188",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] } ],
          "pc": "187"
        },

        {
          "code": "Load",
          "explain": "pop address (?flags[1]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "189",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "188"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "190",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "189"
        },

        {
          "code": "JumpCond True 196",
          "explain": "pop value (True), compare to True, and jump to 196 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 196 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "196",
          "pop": "1",
          "push": [ ],
          "pc": "190"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "197",
          "local": { },
          "push": [ ],
          "pc": "196"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "198",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "197"
        },

        {
          "code": "StoreVar tst3",
          "explain": "pop value (True) and store locally in variable \\\"tst3\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"tst3\"", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "199",
          "local": { "tst3": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "198"
        },

        {
          "code": "ReturnOp(tst3)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "38",
          "fp": "1",
          "trace": [
{"pc": "38","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "199"
        },

        {
          "code": "Jump 41",
          "explain": "set program counter to 41",
          "explain2": { "text": "set program counter to 41", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "38"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (True, []); insert first value into the second; push result ([True])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "bool", "value": "True" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "True" } ] } ],
          "pc": "41"
        },

        {
          "code": "StoreVar $accu5",
          "explain": "pop value ([True]) and store locally in variable \\\"$accu5\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu5\"", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "True" } ] } ] },
          "npc": "43",
          "local": { "$accu5": { "type": "list", "value": [{ "type": "bool", "value": "True" } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Jump 27",
          "explain": "set program counter to 27",
          "explain2": { "text": "set program counter to 27", "args": [] },
          "npc": "27",
          "push": [ ],
          "pc": "43"
        },

        {
          "code": "Cut((C_1, C_2))",
          "explain": "pop index (1) and value ([[0, 0], [1, 0], [1, 1]]); assign value ([1, 0]) to (C_1, C_2); push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to (C_1, C_2); push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "28",
          "local": { "$accu5": { "type": "list", "value": [{ "type": "bool", "value": "True" } ] }, "C_1": { "type": "int", "value": "1" }, "C_2": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "27"
        },

        {
          "code": "JumpCond False 44",
          "explain": "pop value (True), compare to False, and jump to 44 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 44 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "29",
          "pop": "1",
          "push": [ ],
          "pc": "28"
        },

        {
          "code": "LoadVar $accu5",
          "explain": "push value ([True]) of variable \"$accu5\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "True" } ] }, { "type": "atom", "value": "$accu5" } ] },
          "npc": "30",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "True" } ] } ],
          "pc": "29"
        },

        {
          "code": "DelVar $accu5",
          "explain": "delete method variable $accu5",
          "explain2": { "text": "delete method variable $accu5", "args": [] },
          "npc": "31",
          "local": { "C_1": { "type": "int", "value": "1" }, "C_2": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "30"
        },

        {
          "code": "LoadVar C_1",
          "explain": "push value (1) of variable \"C_1\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "C_1" } ] },
          "npc": "32",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "31"
        },

        {
          "code": "DelVar C_1",
          "explain": "delete method variable C_1",
          "explain2": { "text": "delete method variable C_1", "args": [] },
          "npc": "33",
          "local": { "C_2": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "32"
        },

        {
          "code": "Apply PC(182)",
          "explain": "pop an argument (1) and call method (182: \"cs\")",
          "explain2": { "text": "pop an argument (#+) and call method (182: #+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "cs" } ] },
          "npc": "182",
          "fp": "7",
          "trace": [
{"pc": "34","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ "C_2": { "type": "int", "value": "0" } },"sp": 0},{"pc": "182","xpc": "182","method_name": { "type": "atom", "value": "cs" },
"method_arg": { "type": "int", "value": "1" },
"method": "cs(1)","calltype": "normal","vars":{ "C_2": { "type": "int", "value": "0" } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "530" }, { "type": "int", "value": "1" } ],
          "pc": "33"
        },

        {
          "code": "Frame cs(tid)",
          "explain": "pop argument (1), assign to tid, and run method \"cs\"",
          "explain2": { "text": "pop argument (#+), assign to tid, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "cs" } ] },
          "npc": "183",
          "local": { "tid": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "C_2" }, "value": { "type": "int", "value": "0" } } ] } ],
          "pc": "182"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "184",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "183"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "185",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "184"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (1) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "tid" } ] },
          "npc": "186",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "185"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 1); the second integer minus the first; push result (0)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] },
          "npc": "187",
          "pop": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "186"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?flags); push result (?flags[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "188",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] } ],
          "pc": "187"
        },

        {
          "code": "Load",
          "explain": "pop address (?flags[0]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "189",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "188"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "190",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "189"
        },

        {
          "code": "JumpCond True 196",
          "explain": "pop value (True), compare to True, and jump to 196 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 196 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "196",
          "pop": "1",
          "push": [ ],
          "pc": "190"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "197",
          "local": { },
          "push": [ ],
          "pc": "196"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "198",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "197"
        },

        {
          "code": "StoreVar tst3",
          "explain": "pop value (True) and store locally in variable \\\"tst3\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"tst3\"", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "199",
          "local": { "tst3": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "198"
        },

        {
          "code": "ReturnOp(tst3)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "34",
          "fp": "1",
          "trace": [
{"pc": "34","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ "C_2": { "type": "int", "value": "0" } },"sp": 0}
          ],
          "local": { "C_2": { "type": "int", "value": "0" } },
          "pop": "3",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "199"
        },

        {
          "code": "JumpCond False 39",
          "explain": "pop value (True), compare to False, and jump to 39 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 39 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "35",
          "pop": "1",
          "push": [ ],
          "pc": "34"
        },

        {
          "code": "LoadVar C_2",
          "explain": "push value (0) of variable \"C_2\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "C_2" } ] },
          "npc": "36",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "35"
        },

        {
          "code": "DelVar C_2",
          "explain": "delete method variable C_2",
          "explain2": { "text": "delete method variable C_2", "args": [] },
          "npc": "37",
          "local": { },
          "push": [ ],
          "pc": "36"
        },

        {
          "code": "Apply PC(182)",
          "explain": "pop an argument (0) and call method (182: \"cs\")",
          "explain2": { "text": "pop an argument (#+) and call method (182: #+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "cs" } ] },
          "npc": "182",
          "fp": "7",
          "trace": [
{"pc": "38","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0},{"pc": "182","xpc": "182","method_name": { "type": "atom", "value": "cs" },
"method_arg": { "type": "int", "value": "0" },
"method": "cs(0)","calltype": "normal","vars":{ },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "594" }, { "type": "int", "value": "0" } ],
          "pc": "37"
        },

        {
          "code": "Frame cs(tid)",
          "explain": "pop argument (0), assign to tid, and run method \"cs\"",
          "explain2": { "text": "pop argument (#+), assign to tid, and run method #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "cs" } ] },
          "npc": "183",
          "local": { "tid": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "182"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "184",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "183"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "185",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "184"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (0) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "tid" } ] },
          "npc": "186",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "185"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (0, 1); the second integer minus the first; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] },
          "npc": "187",
          "pop": "1",
          "push": [ ],
          "pc": "186"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?flags); push result (?flags[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "188",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] } ],
          "pc": "187"
        },

        {
          "code": "Load",
          "explain": "pop address (?flags[1]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "189",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "188"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "190",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "189"
        },

        {
          "code": "JumpCond True 196",
          "explain": "pop value (True), compare to True, and jump to 196 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 196 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "196",
          "pop": "1",
          "push": [ ],
          "pc": "190"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "197",
          "local": { },
          "push": [ ],
          "pc": "196"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "198",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "197"
        },

        {
          "code": "StoreVar tst3",
          "explain": "pop value (True) and store locally in variable \\\"tst3\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"tst3\"", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "199",
          "local": { "tst3": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "198"
        },

        {
          "code": "ReturnOp(tst3)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "38",
          "fp": "1",
          "trace": [
{"pc": "38","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "199"
        },

        {
          "code": "Jump 41",
          "explain": "set program counter to 41",
          "explain2": { "text": "set program counter to 41", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "38"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (True, [True]); insert first value into the second; push result ([True, True])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "list", "value": [{ "type": "bool", "value": "True" } ] }, { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "41"
        },

        {
          "code": "StoreVar $accu5",
          "explain": "pop value ([True, True]) and store locally in variable \\\"$accu5\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu5\"", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "43",
          "local": { "$accu5": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Jump 27",
          "explain": "set program counter to 27",
          "explain2": { "text": "set program counter to 27", "args": [] },
          "npc": "27",
          "push": [ ],
          "pc": "43"
        },

        {
          "code": "Cut((C_1, C_2))",
          "explain": "pop index (2) and value ([[0, 0], [1, 0], [1, 1]]); assign value ([1, 1]) to (C_1, C_2); push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to (C_1, C_2); push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "28",
          "local": { "$accu5": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] }, "C_1": { "type": "int", "value": "1" }, "C_2": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "27"
        },

        {
          "code": "JumpCond False 44",
          "explain": "pop value (True), compare to False, and jump to 44 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 44 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "29",
          "pop": "1",
          "push": [ ],
          "pc": "28"
        },

        {
          "code": "LoadVar $accu5",
          "explain": "push value ([True, True]) of variable \"$accu5\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] }, { "type": "atom", "value": "$accu5" } ] },
          "npc": "30",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "29"
        },

        {
          "code": "DelVar $accu5",
          "explain": "delete method variable $accu5",
          "explain2": { "text": "delete method variable $accu5", "args": [] },
          "npc": "31",
          "local": { "C_1": { "type": "int", "value": "1" }, "C_2": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "30"
        },

        {
          "code": "LoadVar C_1",
          "explain": "push value (1) of variable \"C_1\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "C_1" } ] },
          "npc": "32",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "31"
        },

        {
          "code": "DelVar C_1",
          "explain": "delete method variable C_1",
          "explain2": { "text": "delete method variable C_1", "args": [] },
          "npc": "33",
          "local": { "C_2": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "32"
        },

        {
          "code": "Apply PC(182)",
          "explain": "pop an argument (1) and call method (182: \"cs\")",
          "explain2": { "text": "pop an argument (#+) and call method (182: #+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "cs" } ] },
          "npc": "182",
          "fp": "7",
          "trace": [
{"pc": "34","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ "C_2": { "type": "int", "value": "1" } },"sp": 0},{"pc": "182","xpc": "182","method_name": { "type": "atom", "value": "cs" },
"method_arg": { "type": "int", "value": "1" },
"method": "cs(1)","calltype": "normal","vars":{ "C_2": { "type": "int", "value": "1" } },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "530" }, { "type": "int", "value": "1" } ],
          "pc": "33"
        },

        {
          "code": "Frame cs(tid)",
          "explain": "pop argument (1), assign to tid, and run method \"cs\"",
          "explain2": { "text": "pop argument (#+), assign to tid, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "cs" } ] },
          "npc": "183",
          "local": { "tid": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "C_2" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "182"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "184",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "183"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "185",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "184"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (1) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "tid" } ] },
          "npc": "186",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "185"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 1); the second integer minus the first; push result (0)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] },
          "npc": "187",
          "pop": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "186"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?flags); push result (?flags[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "188",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] } ],
          "pc": "187"
        },

        {
          "code": "Load",
          "explain": "pop address (?flags[0]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "189",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "188"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "190",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "189"
        },

        {
          "code": "JumpCond True 196",
          "explain": "pop value (True), compare to True, and jump to 196 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 196 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "196",
          "pop": "1",
          "push": [ ],
          "pc": "190"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "197",
          "local": { },
          "push": [ ],
          "pc": "196"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "198",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "197"
        },

        {
          "code": "StoreVar tst3",
          "explain": "pop value (True) and store locally in variable \\\"tst3\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"tst3\"", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "199",
          "local": { "tst3": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "198"
        },

        {
          "code": "ReturnOp(tst3)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "34",
          "fp": "1",
          "trace": [
{"pc": "34","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ "C_2": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "local": { "C_2": { "type": "int", "value": "1" } },
          "pop": "3",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "199"
        },

        {
          "code": "JumpCond False 39",
          "explain": "pop value (True), compare to False, and jump to 39 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 39 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "35",
          "pop": "1",
          "push": [ ],
          "pc": "34"
        },

        {
          "code": "LoadVar C_2",
          "explain": "push value (1) of variable \"C_2\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "C_2" } ] },
          "npc": "36",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "35"
        },

        {
          "code": "DelVar C_2",
          "explain": "delete method variable C_2",
          "explain2": { "text": "delete method variable C_2", "args": [] },
          "npc": "37",
          "local": { },
          "push": [ ],
          "pc": "36"
        },

        {
          "code": "Apply PC(182)",
          "explain": "pop an argument (1) and call method (182: \"cs\")",
          "explain2": { "text": "pop an argument (#+) and call method (182: #+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "cs" } ] },
          "npc": "182",
          "fp": "7",
          "trace": [
{"pc": "38","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0},{"pc": "182","xpc": "182","method_name": { "type": "atom", "value": "cs" },
"method_arg": { "type": "int", "value": "1" },
"method": "cs(1)","calltype": "normal","vars":{ },"sp": 6}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "594" }, { "type": "int", "value": "1" } ],
          "pc": "37"
        },

        {
          "code": "Frame cs(tid)",
          "explain": "pop argument (1), assign to tid, and run method \"cs\"",
          "explain2": { "text": "pop argument (#+), assign to tid, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "cs" } ] },
          "npc": "183",
          "local": { "tid": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "182"
        },

        {
          "code": "Push ?flags",
          "explain": "push constant ?flags",
          "explain2": { "text": "push constant ?flags", "args": [] },
          "npc": "184",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] } ],
          "pc": "183"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "185",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "184"
        },

        {
          "code": "LoadVar tid",
          "explain": "push value (1) of variable \"tid\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "tid" } ] },
          "npc": "186",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "185"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 1); the second integer minus the first; push result (0)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] },
          "npc": "187",
          "pop": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "186"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?flags); push result (?flags[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "188",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] } ],
          "pc": "187"
        },

        {
          "code": "Load",
          "explain": "pop address (?flags[0]) and push value (False)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }, { "type": "int", "value": "0" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "189",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "188"
        },

        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "explain2": { "text": "pop a value (#+); logical not; push result (#+)", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "190",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "189"
        },

        {
          "code": "JumpCond True 196",
          "explain": "pop value (True), compare to True, and jump to 196 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 196 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "196",
          "pop": "1",
          "push": [ ],
          "pc": "190"
        },

        {
          "code": "DelVar tid",
          "explain": "delete method variable tid",
          "explain2": { "text": "delete method variable tid", "args": [] },
          "npc": "197",
          "local": { },
          "push": [ ],
          "pc": "196"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "198",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "197"
        },

        {
          "code": "StoreVar tst3",
          "explain": "pop value (True) and store locally in variable \\\"tst3\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"tst3\"", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "199",
          "local": { "tst3": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "198"
        },

        {
          "code": "ReturnOp(tst3)",
          "explain": "pop caller's method variables and pc and push result (%+), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (%+), or terminate if no caller", "args": [ { "type": "bool", "value": "True" } ] },
          "npc": "38",
          "fp": "1",
          "trace": [
{"pc": "38","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "199"
        },

        {
          "code": "Jump 41",
          "explain": "set program counter to 41",
          "explain2": { "text": "set program counter to 41", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "38"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (True, [True, True]); insert first value into the second; push result ([True, True, True])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "bool", "value": "True" }, { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] }, { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "41"
        },

        {
          "code": "StoreVar $accu5",
          "explain": "pop value ([True, True, True]) and store locally in variable \\\"$accu5\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu5\"", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } ] },
          "npc": "43",
          "local": { "$accu5": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Jump 27",
          "explain": "set program counter to 27",
          "explain2": { "text": "set program counter to 27", "args": [] },
          "npc": "27",
          "push": [ ],
          "pc": "43"
        },

        {
          "code": "Cut((C_1, C_2))",
          "explain": "pop index (3) and value ([[0, 0], [1, 0], [1, 1]]); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "28",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "27"
        },

        {
          "code": "JumpCond False 44",
          "explain": "pop value (False), compare to False, and jump to 44 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 44 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "44",
          "pop": "1",
          "push": [ ],
          "pc": "28"
        },

        {
          "code": "DelVar C_1",
          "explain": "delete method variable C_1",
          "explain2": { "text": "delete method variable C_1", "args": [] },
          "npc": "45",
          "push": [ ],
          "pc": "44"
        },

        {
          "code": "DelVar C_2",
          "explain": "delete method variable C_2",
          "explain2": { "text": "delete method variable C_2", "args": [] },
          "npc": "46",
          "push": [ ],
          "pc": "45"
        },

        {
          "code": "LoadVar $accu5",
          "explain": "push value ([True, True, True]) of variable \"$accu5\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] }, { "type": "atom", "value": "$accu5" } ] },
          "npc": "47",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "46"
        },

        {
          "code": "DelVar $accu5",
          "explain": "delete method variable $accu5",
          "explain2": { "text": "delete method variable $accu5", "args": [] },
          "npc": "48",
          "local": { },
          "push": [ ],
          "pc": "47"
        },

        {
          "code": "1-ary any",
          "explain": "pop a value ([True, True, True]); check if any value is True; push result (True)",
          "explain2": { "text": "pop a value (#+); check if any value is True; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 54",
          "explain": "pop value (True), compare to False, and jump to 54 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 54 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Load C_1",
          "explain": "push value of shared variable C_1",
          "explain2": { "text": "push value of shared variable C_1", "args": [] },
          "npc": "50",
          "failure": "Load: unknown variable ?C_1",
          "mode": "failed",
          "push": [ ],
          "pc": "50"
        }

      ],
      "ctxbag": {
          "7bcfa46001ea": "1",
          "7bcfa460023a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7bcfa460026a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "211",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "211","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7bcfa46001ea",
          "fp": "1",
          "name": "thread(0)",
          "entry": "77",
          "pc": "77",
          "sp": "1",
          "stack": [{ "type": "int", "value": "0" }],
          "trace": [
{"pc": "77","xpc": "77","method_name": { "type": "atom", "value": "thread" },
"method_arg": { "type": "int", "value": "0" },
"method": "thread(0)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "thread", "args": "self", "value": { "type": "int", "value": "0" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7bcfa460023a",
          "fp": "1",
          "name": "thread(1)",
          "entry": "77",
          "pc": "77",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "77","xpc": "77","method_name": { "type": "atom", "value": "thread" },
"method_arg": { "type": "int", "value": "1" },
"method": "thread(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "thread", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7bcfa22005ca",
          "fp": "1",
          "name": "invariant()",
          "entry": "4",
          "pc": "50",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "50","xpc": "4","method_name": { "type": "atom", "value": "invariant" },
"method_arg": { "type": "list", "value": [] },
"method": "invariant()","calltype": "process","vars":{ },"sp": 0}
          ],
          "failure": "Load: unknown variable ?C_1",
          "this": { "type": "dict", "value": [] },
          "atomic": "1",
          "readonly": "1",
          "mode": "failed"
        }
      ]
    }

  ]
}
