{
  "labels": {
    "__end__": 297
  },
  "modules": {
    "__main__": {
      "file": "b_ary_fail.hny",
      "lines": [
        "#critical reached?",
        "#invariant reached_crit in {0, 1} # safety",
        "in_cs = 0",
        "#invariant   #forall (C1 C2: clients) , cs C1 /\\ cs C2 -> C1 = C2",
        "invariant  (in_cs in { 0, 1 }) and (any [entering tid for tid in [0,1]] => one_entered [0,1])",
        "sequential turn, lockTaken, flags",
        "turn = 0",
        "lockTaken = False",
        "flags = [False, False]",
        "counter = 0",
        "def fail0 p_q:",
        "\twhile choose {False, True}:",
        "\t\t# non crit",
        "\t\t#entering crit",
        "\t\t#crit",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "",
        "\t\t#leave crit",
        "def fail1 p_q:",
        "\twhile choose {False, True}:",
        "\t\t# Enter cs",
        "\t\tawait not lockTaken",
        "\t\tlockTaken = True",
        "\t\t#cs",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "\t\t#leaving cs",
        "\t\tlockTaken = False",
        "def fail2 p_q:",
        "\twhile choose {False, True}:",
        "\t\t# enter critical",
        "\t\tturn = 1 - p_q",
        "\t\tawait turn == p_q",
        "\t\t# critical",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "\t\t# leaving critical",
        "\t\t# post protocol",
        "def fail3 p_q:",
        "\twhile choose {False, True}:",
        "\t\t#entering critical",
        "\t\tflags p_q = True",
        "\t\tawait not flags (1 - p_q)",
        "\t\t#crit",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "\t\t#leaving",
        "\t\tflags p_q = False",
        "def fail4 p_q:",
        "\twhile choose {False, True}:",
        "\t\twhile not (turn == p_q):",
        "\t\t\tpass",
        "\t\t#cs",
        "\t\tatomically in_cs += 1",
        "\t\tatomically in_cs -= 1",
        "\t\t#counter += 1",
        "\t\tturn = 1 - p_q",
        "",
        "def entering tid returns tst1:",
        "    tst1 = (turn != tid)",
        "",
        "def one_entered tids returns tst2:",
        "    var i = 0",
        "    tst2 = False",
        "    while (i < len(tids)) and (not tst2):",
        "        if cs i:",
        "            tst2 = True",
        "        i += 1",
        "",
        "def cs tid returns tst3:",
        "    tst3 =  turn == tid",
        "",
        "spawn fail2 0;",
        "spawn fail2 1;"
      ],
      "identifiers": {
        "tid": "local-const",
        "p_q": "local-const",
        "tids": "local-const",
        "i": "local-var",
        "this": "local-var",
        "fail0": "constant",
        "fail1": "constant",
        "fail2": "constant",
        "fail3": "constant",
        "fail4": "constant",
        "entering": "constant",
        "one_entered": "constant",
        "cs": "constant",
        "in_cs": "global",
        "turn": "global",
        "lockTaken": "global",
        "flags": "global",
        "counter": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Jump", "pc": "48" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "45", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu13" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "tid" },
    { "op": "JumpCond", "pc": "31", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu13" },
    { "op": "DelVar", "value": "$accu13" },
    { "op": "LoadVar", "value": "tid" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Apply", "value": { "type": "pc", "value": "236" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu13" },
    { "op": "Jump", "pc": "21" },
    { "op": "DelVar", "value": "tid" },
    { "op": "LoadVar", "value": "$accu13" },
    { "op": "DelVar", "value": "$accu13" },
    { "op": "Nary", "arity": 1, "value": "any" },
    { "op": "JumpCond", "pc": "43", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "245" } },
    { "op": "Jump", "pc": "46" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Jump", "pc": "46" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "4" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "lockTaken" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "lockTaken"}] },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "flags"}] },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "counter"}] },
    { "op": "Jump", "pc": "285" },
    { "op": "Frame", "name": "fail0", "args": "p_q" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "90", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "69" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "285" },
    { "op": "Frame", "name": "fail1", "args": "p_q" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "123", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "lockTaken"}] },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "101", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "106" },
    { "op": "Jump", "pc": "101" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "lockTaken"}] },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "lockTaken"}] },
    { "op": "Jump", "pc": "93" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "285" },
    { "op": "Frame", "name": "fail2", "args": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "156", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "137", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "143" },
    { "op": "Jump", "pc": "137" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "126" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "285" },
    { "op": "Frame", "name": "fail3", "args": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "200", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "172", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "182" },
    { "op": "Jump", "pc": "172" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "160" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "285" },
    { "op": "Frame", "name": "fail4", "args": "p_q" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "233", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "216", "cond": { "type": "bool", "value": "True" } },
    { "op": "Jump", "pc": "211" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "in_cs"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "p_q" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Jump", "pc": "204" },
    { "op": "DelVar", "value": "p_q" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "285" },
    { "op": "Frame", "name": "entering", "args": "tid" },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "tid" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "StoreVar", "value": "tst1" },
    { "op": "Return", "result": "tst1" },
    { "op": "DelVar", "value": "tst1" },
    { "op": "Jump", "pc": "285" },
    { "op": "Frame", "name": "one_entered", "args": "tids" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "i" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "tst2" },
    { "op": "LoadVar", "value": "i" },
    { "op": "LoadVar", "value": "tids" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "258", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "tst2" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Jump", "pc": "259" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "272", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "i" },
    { "op": "Apply", "value": { "type": "pc", "value": "277" } },
    { "op": "JumpCond", "pc": "266", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "tst2" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "tst2" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "i" },
    { "op": "Jump", "pc": "250" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "tids" },
    { "op": "Return", "result": "tst2" },
    { "op": "DelVar", "value": "tst2" },
    { "op": "Jump", "pc": "285" },
    { "op": "Frame", "name": "cs", "args": "tid" },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "tid" },
    { "op": "DelVar", "value": "tid" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "tst3" },
    { "op": "Return", "result": "tst3" },
    { "op": "DelVar", "value": "tst3" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "125" }, "args": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push 0","push constant 0"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["Jump 48","jump over invariant definition: set program counter to 48"],
    ["Frame invariant()","start of method invariant"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 45","pop a value and jump to 45 if the value is False"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu13","initialize accumulator for list comprehension: pop a value and store in $accu13"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 0","push constant 0"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 0","push constant 0"],
    ["Cut(tid)","get next element and assign to tid; push False or True depending on success"],
    ["JumpCond False 31","check if loop is done: pop a value and jump to 31 if the value is False"],
    ["LoadVar $accu13","load accumulator: push the value of $accu13"],
    ["DelVar $accu13","delete method variable $accu13"],
    ["LoadVar tid","push the value of tid"],
    ["DelVar tid","delete method variable tid"],
    ["Apply PC(236)","call method PC(236)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu13","update accumulator: pop a value and store in $accu13"],
    ["Jump 21","set program counter to 21"],
    ["DelVar tid","delete method variable tid"],
    ["LoadVar $accu13","load final accumulator result: push the value of $accu13"],
    ["DelVar $accu13","delete method variable $accu13"],
    ["1-ary any","pop 1 value and push the result of applying any"],
    ["JumpCond False 43","pop a value and jump to 43 if the value is False"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 0","push constant 0"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(245)","call method PC(245)"],
    ["Jump 46","set program counter to 46"],
    ["Push True","push constant True"],
    ["Jump 46","set program counter to 46"],
    ["Push False","push constant False"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 4","test invariant"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?lockTaken","push constant ?lockTaken"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?flags","push constant ?flags"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push 0","push constant 0"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push False","push constant False"],
    ["Store lockTaken","pop a value and store it in shared variable lockTaken"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store flags","pop a value and store it in shared variable flags"],
    ["Push 0","push constant 0"],
    ["Store counter","pop a value and store it in shared variable counter"],
    ["Jump 285","jump over method definition: set program counter to 285"],
    ["Frame fail0(p_q)","start of method fail0"],
    ["DelVar p_q","delete method variable p_q"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 90","pop a value and jump to 90 if the value is False"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 69","set program counter to 69"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 285","jump over method definition: set program counter to 285"],
    ["Frame fail1(p_q)","start of method fail1"],
    ["DelVar p_q","delete method variable p_q"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 123","pop a value and jump to 123 if the value is False"],
    ["Load lockTaken","push value of shared variable lockTaken"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 101","pop a value and jump to 101 if the value is False"],
    ["Jump 106","set program counter to 106"],
    ["Jump 101","set program counter to 101"],
    ["Push True","push constant True"],
    ["Store lockTaken","pop a value and store it in shared variable lockTaken"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push False","push constant False"],
    ["Store lockTaken","pop a value and store it in shared variable lockTaken"],
    ["Jump 93","set program counter to 93"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 285","jump over method definition: set program counter to 285"],
    ["Frame fail2(p_q)","start of method fail2"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 156","pop a value and jump to 156 if the value is False"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 137","pop a value and jump to 137 if the value is False"],
    ["Jump 143","set program counter to 143"],
    ["Jump 137","set program counter to 137"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 126","set program counter to 126"],
    ["DelVar p_q","delete method variable p_q"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 285","jump over method definition: set program counter to 285"],
    ["Frame fail3(p_q)","start of method fail3"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 200","pop a value and jump to 200 if the value is False"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 172","pop a value and jump to 172 if the value is False"],
    ["Jump 182","set program counter to 182"],
    ["Jump 172","set program counter to 172"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 160","set program counter to 160"],
    ["DelVar p_q","delete method variable p_q"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 285","jump over method definition: set program counter to 285"],
    ["Frame fail4(p_q)","start of method fail4"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 233","pop a value and jump to 233 if the value is False"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond True 216","pop a value and jump to 216 if the value is True"],
    ["Jump 211","set program counter to 211"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load in_cs","push value of shared variable in_cs"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store in_cs","pop a value and store it in shared variable in_cs"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push 1","push constant 1"],
    ["LoadVar p_q","push the value of p_q"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Jump 204","set program counter to 204"],
    ["DelVar p_q","delete method variable p_q"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 285","jump over method definition: set program counter to 285"],
    ["Frame entering(tid)","start of method entering"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar tid","push the value of tid"],
    ["DelVar tid","delete method variable tid"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["StoreVar tst1","pop a value and store in tst1"],
    ["ReturnOp(tst1)","restore caller method state and push tst1"],
    ["DelVar tst1","delete method variable tst1"],
    ["Jump 285","jump over method definition: set program counter to 285"],
    ["Frame one_entered(tids)","start of method one_entered"],
    ["Push 0","push constant 0"],
    ["StoreVar i","pop a value and store in i"],
    ["Push False","push constant False"],
    ["StoreVar tst2","pop a value and store in tst2"],
    ["LoadVar i","push the value of i"],
    ["LoadVar tids","push the value of tids"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 258","pop a value and jump to 258 if the value is False"],
    ["LoadVar tst2","push the value of tst2"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Jump 259","set program counter to 259"],
    ["Push False","push constant False"],
    ["JumpCond False 272","pop a value and jump to 272 if the value is False"],
    ["LoadVar i","push the value of i"],
    ["Apply PC(277)","call method PC(277)"],
    ["JumpCond False 266","pop a value and jump to 266 if the value is False"],
    ["DelVar tst2","delete method variable tst2"],
    ["Push True","push constant True"],
    ["StoreVar tst2","pop a value and store in tst2"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar i","pop a value and store in i"],
    ["Jump 250","set program counter to 250"],
    ["DelVar i","delete method variable i"],
    ["DelVar tids","delete method variable tids"],
    ["ReturnOp(tst2)","restore caller method state and push tst2"],
    ["DelVar tst2","delete method variable tst2"],
    ["Jump 285","jump over method definition: set program counter to 285"],
    ["Frame cs(tid)","start of method cs"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar tid","push the value of tid"],
    ["DelVar tid","delete method variable tid"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar tst3","pop a value and store in tst3"],
    ["ReturnOp(tst3)","restore caller method state and push tst3"],
    ["DelVar tst3","delete method variable tst3"],
    ["Push ?PC(125)","push constant ?PC(125)"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push ?PC(125)","push constant ?PC(125)"],
    ["Push 1","push constant 1"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 3, "column": 1, "endline": 76, "endcolumn": 7, "stmt": [3,1,76,7] },
    { "module": "__main__", "line": 3, "column": 9, "endline": 3, "endcolumn": 9, "stmt": [3,1,3,9] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 7, "stmt": [3,1,3,9] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 9, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 93, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 13, "endline": 5, "endcolumn": 17, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 24, "endline": 5, "endcolumn": 27, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 24, "endline": 5, "endcolumn": 24, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 24, "endline": 5, "endcolumn": 27, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 27, "endline": 5, "endcolumn": 27, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 24, "endline": 5, "endcolumn": 27, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 13, "endline": 5, "endcolumn": 29, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 12, "endline": 5, "endcolumn": 93, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 67, "endline": 5, "endcolumn": 69, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 67, "endline": 5, "endcolumn": 67, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 67, "endline": 5, "endcolumn": 69, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 69, "endline": 5, "endcolumn": 69, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 67, "endline": 5, "endcolumn": 69, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 49, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 49, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 49, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 51, "endline": 5, "endcolumn": 53, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 51, "endline": 5, "endcolumn": 53, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 53, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 70, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 42, "endline": 5, "endcolumn": 70, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 37, "endline": 5, "endcolumn": 71, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 37, "endline": 5, "endcolumn": 92, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 89, "endline": 5, "endcolumn": 91, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 89, "endline": 5, "endcolumn": 89, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 89, "endline": 5, "endcolumn": 91, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 91, "endline": 5, "endcolumn": 91, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 89, "endline": 5, "endcolumn": 91, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 76, "endline": 5, "endcolumn": 92, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 73, "endline": 5, "endcolumn": 74, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 37, "endline": 5, "endcolumn": 92, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 32, "endline": 5, "endcolumn": 34, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 12, "endline": 5, "endcolumn": 93, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 93, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 93, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 5, "column": 1, "endline": 5, "endcolumn": 93, "stmt": [5,1,5,93] },
    { "module": "__main__", "line": 6, "column": 12, "endline": 6, "endcolumn": 15, "stmt": [6,1,6,33] },
    { "module": "__main__", "line": 6, "column": 1, "endline": 6, "endcolumn": 33, "stmt": [6,1,6,33] },
    { "module": "__main__", "line": 6, "column": 18, "endline": 6, "endcolumn": 26, "stmt": [6,1,6,33] },
    { "module": "__main__", "line": 6, "column": 1, "endline": 6, "endcolumn": 33, "stmt": [6,1,6,33] },
    { "module": "__main__", "line": 6, "column": 29, "endline": 6, "endcolumn": 33, "stmt": [6,1,6,33] },
    { "module": "__main__", "line": 6, "column": 1, "endline": 6, "endcolumn": 33, "stmt": [6,1,6,33] },
    { "module": "__main__", "line": 7, "column": 8, "endline": 7, "endcolumn": 8, "stmt": [7,1,7,8] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 6, "stmt": [7,1,7,8] },
    { "module": "__main__", "line": 8, "column": 13, "endline": 8, "endcolumn": 17, "stmt": [8,1,8,17] },
    { "module": "__main__", "line": 8, "column": 1, "endline": 8, "endcolumn": 11, "stmt": [8,1,8,17] },
    { "module": "__main__", "line": 9, "column": 10, "endline": 9, "endcolumn": 21, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 9, "column": 10, "endline": 9, "endcolumn": 14, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 9, "column": 10, "endline": 9, "endcolumn": 21, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 9, "column": 17, "endline": 9, "endcolumn": 21, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 9, "column": 10, "endline": 9, "endcolumn": 21, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 7, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 10, "column": 11, "endline": 10, "endcolumn": 11, "stmt": [10,1,10,11] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 9, "stmt": [10,1,10,11] },
    { "module": "__main__", "line": 11, "column": 1, "endline": 11, "endcolumn": 3, "stmt": [11,1,11,14] },
    { "module": "__main__", "line": 11, "column": 1, "endline": 11, "endcolumn": 14, "stmt": [11,1,11,14] },
    { "module": "__main__", "line": 12, "column": 16, "endline": 12, "endcolumn": 26, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 12, "column": 16, "endline": 12, "endcolumn": 26, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 12, "column": 16, "endline": 12, "endcolumn": 20, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 12, "column": 16, "endline": 12, "endcolumn": 26, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 12, "column": 23, "endline": 12, "endcolumn": 26, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 12, "column": 16, "endline": 12, "endcolumn": 26, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 12, "column": 8, "endline": 12, "endcolumn": 27, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 12, "column": 2, "endline": 12, "endcolumn": 6, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 16, "column": 14, "endline": 16, "endcolumn": 23, "stmt": [16,14,16,23] },
    { "module": "__main__", "line": 16, "column": 14, "endline": 16, "endcolumn": 23, "stmt": [16,14,16,23] },
    { "module": "__main__", "line": 16, "column": 23, "endline": 16, "endcolumn": 23, "stmt": [16,14,16,23] },
    { "module": "__main__", "line": 16, "column": 14, "endline": 16, "endcolumn": 23, "stmt": [16,14,16,23] },
    { "module": "__main__", "line": 16, "column": 14, "endline": 16, "endcolumn": 21, "stmt": [16,14,16,23] },
    { "module": "__main__", "line": 16, "column": 14, "endline": 16, "endcolumn": 23, "stmt": [16,14,16,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 23, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 21, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 17, "column": 14, "endline": 17, "endcolumn": 23, "stmt": [17,14,17,23] },
    { "module": "__main__", "line": 12, "column": 2, "endline": 12, "endcolumn": 28, "stmt": [12,2,12,28] },
    { "module": "__main__", "line": 11, "column": 1, "endline": 11, "endcolumn": 14, "stmt": [11,1,11,14] },
    { "module": "__main__", "line": 20, "column": 1, "endline": 20, "endcolumn": 3, "stmt": [20,1,20,14] },
    { "module": "__main__", "line": 20, "column": 1, "endline": 20, "endcolumn": 14, "stmt": [20,1,20,14] },
    { "module": "__main__", "line": 21, "column": 16, "endline": 21, "endcolumn": 26, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 21, "column": 16, "endline": 21, "endcolumn": 26, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 21, "column": 16, "endline": 21, "endcolumn": 20, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 21, "column": 16, "endline": 21, "endcolumn": 26, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 21, "column": 23, "endline": 21, "endcolumn": 26, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 21, "column": 16, "endline": 21, "endcolumn": 26, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 21, "column": 8, "endline": 21, "endcolumn": 27, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 21, "column": 2, "endline": 21, "endcolumn": 6, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 23, "column": 13, "endline": 23, "endcolumn": 21, "stmt": [23,3,23,21] },
    { "module": "__main__", "line": 23, "column": 9, "endline": 23, "endcolumn": 21, "stmt": [23,3,23,21] },
    { "module": "__main__", "line": 23, "column": 3, "endline": 23, "endcolumn": 21, "stmt": [23,3,23,21] },
    { "module": "__main__", "line": 23, "column": 13, "endline": 23, "endcolumn": 21, "stmt": [23,3,23,21] },
    { "module": "__main__", "line": 23, "column": 13, "endline": 23, "endcolumn": 21, "stmt": [23,3,23,21] },
    { "module": "__main__", "line": 24, "column": 15, "endline": 24, "endcolumn": 18, "stmt": [24,3,24,18] },
    { "module": "__main__", "line": 24, "column": 3, "endline": 24, "endcolumn": 13, "stmt": [24,3,24,18] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 23, "stmt": [26,14,26,23] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 23, "stmt": [26,14,26,23] },
    { "module": "__main__", "line": 26, "column": 23, "endline": 26, "endcolumn": 23, "stmt": [26,14,26,23] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 23, "stmt": [26,14,26,23] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 21, "stmt": [26,14,26,23] },
    { "module": "__main__", "line": 26, "column": 14, "endline": 26, "endcolumn": 23, "stmt": [26,14,26,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 23, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 21, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 27, "column": 14, "endline": 27, "endcolumn": 23, "stmt": [27,14,27,23] },
    { "module": "__main__", "line": 29, "column": 15, "endline": 29, "endcolumn": 19, "stmt": [29,3,29,19] },
    { "module": "__main__", "line": 29, "column": 3, "endline": 29, "endcolumn": 13, "stmt": [29,3,29,19] },
    { "module": "__main__", "line": 21, "column": 2, "endline": 21, "endcolumn": 28, "stmt": [21,2,21,28] },
    { "module": "__main__", "line": 20, "column": 1, "endline": 20, "endcolumn": 14, "stmt": [20,1,20,14] },
    { "module": "__main__", "line": 30, "column": 1, "endline": 30, "endcolumn": 3, "stmt": [30,1,30,14] },
    { "module": "__main__", "line": 30, "column": 1, "endline": 30, "endcolumn": 14, "stmt": [30,1,30,14] },
    { "module": "__main__", "line": 31, "column": 16, "endline": 31, "endcolumn": 26, "stmt": [31,2,31,28] },
    { "module": "__main__", "line": 31, "column": 16, "endline": 31, "endcolumn": 20, "stmt": [31,2,31,28] },
    { "module": "__main__", "line": 31, "column": 16, "endline": 31, "endcolumn": 26, "stmt": [31,2,31,28] },
    { "module": "__main__", "line": 31, "column": 23, "endline": 31, "endcolumn": 26, "stmt": [31,2,31,28] },
    { "module": "__main__", "line": 31, "column": 16, "endline": 31, "endcolumn": 26, "stmt": [31,2,31,28] },
    { "module": "__main__", "line": 31, "column": 8, "endline": 31, "endcolumn": 27, "stmt": [31,2,31,28] },
    { "module": "__main__", "line": 31, "column": 2, "endline": 31, "endcolumn": 6, "stmt": [31,2,31,28] },
    { "module": "__main__", "line": 33, "column": 10, "endline": 33, "endcolumn": 10, "stmt": [33,3,33,16] },
    { "module": "__main__", "line": 33, "column": 14, "endline": 33, "endcolumn": 16, "stmt": [33,3,33,16] },
    { "module": "__main__", "line": 33, "column": 10, "endline": 33, "endcolumn": 16, "stmt": [33,3,33,16] },
    { "module": "__main__", "line": 33, "column": 3, "endline": 33, "endcolumn": 8, "stmt": [33,3,33,16] },
    { "module": "__main__", "line": 34, "column": 9, "endline": 34, "endcolumn": 12, "stmt": [34,3,34,19] },
    { "module": "__main__", "line": 34, "column": 17, "endline": 34, "endcolumn": 19, "stmt": [34,3,34,19] },
    { "module": "__main__", "line": 34, "column": 9, "endline": 34, "endcolumn": 19, "stmt": [34,3,34,19] },
    { "module": "__main__", "line": 34, "column": 3, "endline": 34, "endcolumn": 19, "stmt": [34,3,34,19] },
    { "module": "__main__", "line": 34, "column": 17, "endline": 34, "endcolumn": 19, "stmt": [34,3,34,19] },
    { "module": "__main__", "line": 34, "column": 17, "endline": 34, "endcolumn": 19, "stmt": [34,3,34,19] },
    { "module": "__main__", "line": 36, "column": 14, "endline": 36, "endcolumn": 23, "stmt": [36,14,36,23] },
    { "module": "__main__", "line": 36, "column": 14, "endline": 36, "endcolumn": 23, "stmt": [36,14,36,23] },
    { "module": "__main__", "line": 36, "column": 23, "endline": 36, "endcolumn": 23, "stmt": [36,14,36,23] },
    { "module": "__main__", "line": 36, "column": 14, "endline": 36, "endcolumn": 23, "stmt": [36,14,36,23] },
    { "module": "__main__", "line": 36, "column": 14, "endline": 36, "endcolumn": 21, "stmt": [36,14,36,23] },
    { "module": "__main__", "line": 36, "column": 14, "endline": 36, "endcolumn": 23, "stmt": [36,14,36,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 23, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 21, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 37, "column": 14, "endline": 37, "endcolumn": 23, "stmt": [37,14,37,23] },
    { "module": "__main__", "line": 31, "column": 2, "endline": 31, "endcolumn": 28, "stmt": [31,2,31,28] },
    { "module": "__main__", "line": 30, "column": 1, "endline": 30, "endcolumn": 14, "stmt": [30,1,30,14] },
    { "module": "__main__", "line": 30, "column": 1, "endline": 30, "endcolumn": 14, "stmt": [30,1,30,14] },
    { "module": "__main__", "line": 40, "column": 1, "endline": 40, "endcolumn": 3, "stmt": [40,1,40,14] },
    { "module": "__main__", "line": 40, "column": 1, "endline": 40, "endcolumn": 14, "stmt": [40,1,40,14] },
    { "module": "__main__", "line": 41, "column": 16, "endline": 41, "endcolumn": 26, "stmt": [41,2,41,28] },
    { "module": "__main__", "line": 41, "column": 16, "endline": 41, "endcolumn": 20, "stmt": [41,2,41,28] },
    { "module": "__main__", "line": 41, "column": 16, "endline": 41, "endcolumn": 26, "stmt": [41,2,41,28] },
    { "module": "__main__", "line": 41, "column": 23, "endline": 41, "endcolumn": 26, "stmt": [41,2,41,28] },
    { "module": "__main__", "line": 41, "column": 16, "endline": 41, "endcolumn": 26, "stmt": [41,2,41,28] },
    { "module": "__main__", "line": 41, "column": 8, "endline": 41, "endcolumn": 27, "stmt": [41,2,41,28] },
    { "module": "__main__", "line": 41, "column": 2, "endline": 41, "endcolumn": 6, "stmt": [41,2,41,28] },
    { "module": "__main__", "line": 43, "column": 3, "endline": 43, "endcolumn": 7, "stmt": [43,3,43,18] },
    { "module": "__main__", "line": 43, "column": 9, "endline": 43, "endcolumn": 11, "stmt": [43,3,43,18] },
    { "module": "__main__", "line": 43, "column": 3, "endline": 43, "endcolumn": 11, "stmt": [43,3,43,18] },
    { "module": "__main__", "line": 43, "column": 15, "endline": 43, "endcolumn": 18, "stmt": [43,3,43,18] },
    { "module": "__main__", "line": 43, "column": 3, "endline": 43, "endcolumn": 13, "stmt": [43,3,43,18] },
    { "module": "__main__", "line": 44, "column": 13, "endline": 44, "endcolumn": 27, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 20, "endline": 44, "endcolumn": 20, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 24, "endline": 44, "endcolumn": 26, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 20, "endline": 44, "endcolumn": 26, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 13, "endline": 44, "endcolumn": 27, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 13, "endline": 44, "endcolumn": 27, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 9, "endline": 44, "endcolumn": 27, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 3, "endline": 44, "endcolumn": 27, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 27, "endline": 44, "endcolumn": 27, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 44, "column": 27, "endline": 44, "endcolumn": 27, "stmt": [44,3,44,27] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 23, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 21, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 46, "column": 14, "endline": 46, "endcolumn": 23, "stmt": [46,14,46,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 23, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 21, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 47, "column": 14, "endline": 47, "endcolumn": 23, "stmt": [47,14,47,23] },
    { "module": "__main__", "line": 49, "column": 3, "endline": 49, "endcolumn": 7, "stmt": [49,3,49,19] },
    { "module": "__main__", "line": 49, "column": 9, "endline": 49, "endcolumn": 11, "stmt": [49,3,49,19] },
    { "module": "__main__", "line": 49, "column": 3, "endline": 49, "endcolumn": 11, "stmt": [49,3,49,19] },
    { "module": "__main__", "line": 49, "column": 15, "endline": 49, "endcolumn": 19, "stmt": [49,3,49,19] },
    { "module": "__main__", "line": 49, "column": 3, "endline": 49, "endcolumn": 13, "stmt": [49,3,49,19] },
    { "module": "__main__", "line": 41, "column": 2, "endline": 41, "endcolumn": 28, "stmt": [41,2,41,28] },
    { "module": "__main__", "line": 40, "column": 1, "endline": 40, "endcolumn": 14, "stmt": [40,1,40,14] },
    { "module": "__main__", "line": 40, "column": 1, "endline": 40, "endcolumn": 14, "stmt": [40,1,40,14] },
    { "module": "__main__", "line": 50, "column": 1, "endline": 50, "endcolumn": 3, "stmt": [50,1,50,14] },
    { "module": "__main__", "line": 50, "column": 1, "endline": 50, "endcolumn": 14, "stmt": [50,1,50,14] },
    { "module": "__main__", "line": 51, "column": 16, "endline": 51, "endcolumn": 26, "stmt": [51,2,51,28] },
    { "module": "__main__", "line": 51, "column": 16, "endline": 51, "endcolumn": 20, "stmt": [51,2,51,28] },
    { "module": "__main__", "line": 51, "column": 16, "endline": 51, "endcolumn": 26, "stmt": [51,2,51,28] },
    { "module": "__main__", "line": 51, "column": 23, "endline": 51, "endcolumn": 26, "stmt": [51,2,51,28] },
    { "module": "__main__", "line": 51, "column": 16, "endline": 51, "endcolumn": 26, "stmt": [51,2,51,28] },
    { "module": "__main__", "line": 51, "column": 8, "endline": 51, "endcolumn": 27, "stmt": [51,2,51,28] },
    { "module": "__main__", "line": 51, "column": 2, "endline": 51, "endcolumn": 6, "stmt": [51,2,51,28] },
    { "module": "__main__", "line": 52, "column": 14, "endline": 52, "endcolumn": 17, "stmt": [52,3,52,26] },
    { "module": "__main__", "line": 52, "column": 22, "endline": 52, "endcolumn": 24, "stmt": [52,3,52,26] },
    { "module": "__main__", "line": 52, "column": 14, "endline": 52, "endcolumn": 24, "stmt": [52,3,52,26] },
    { "module": "__main__", "line": 52, "column": 3, "endline": 52, "endcolumn": 7, "stmt": [52,3,52,26] },
    { "module": "__main__", "line": 52, "column": 3, "endline": 52, "endcolumn": 26, "stmt": [52,3,52,26] },
    { "module": "__main__", "line": 55, "column": 14, "endline": 55, "endcolumn": 23, "stmt": [55,14,55,23] },
    { "module": "__main__", "line": 55, "column": 14, "endline": 55, "endcolumn": 23, "stmt": [55,14,55,23] },
    { "module": "__main__", "line": 55, "column": 23, "endline": 55, "endcolumn": 23, "stmt": [55,14,55,23] },
    { "module": "__main__", "line": 55, "column": 14, "endline": 55, "endcolumn": 23, "stmt": [55,14,55,23] },
    { "module": "__main__", "line": 55, "column": 14, "endline": 55, "endcolumn": 21, "stmt": [55,14,55,23] },
    { "module": "__main__", "line": 55, "column": 14, "endline": 55, "endcolumn": 23, "stmt": [55,14,55,23] },
    { "module": "__main__", "line": 56, "column": 14, "endline": 56, "endcolumn": 23, "stmt": [56,14,56,23] },
    { "module": "__main__", "line": 56, "column": 14, "endline": 56, "endcolumn": 23, "stmt": [56,14,56,23] },
    { "module": "__main__", "line": 56, "column": 23, "endline": 56, "endcolumn": 23, "stmt": [56,14,56,23] },
    { "module": "__main__", "line": 56, "column": 14, "endline": 56, "endcolumn": 23, "stmt": [56,14,56,23] },
    { "module": "__main__", "line": 56, "column": 14, "endline": 56, "endcolumn": 21, "stmt": [56,14,56,23] },
    { "module": "__main__", "line": 56, "column": 14, "endline": 56, "endcolumn": 23, "stmt": [56,14,56,23] },
    { "module": "__main__", "line": 58, "column": 10, "endline": 58, "endcolumn": 10, "stmt": [58,3,58,16] },
    { "module": "__main__", "line": 58, "column": 14, "endline": 58, "endcolumn": 16, "stmt": [58,3,58,16] },
    { "module": "__main__", "line": 58, "column": 10, "endline": 58, "endcolumn": 16, "stmt": [58,3,58,16] },
    { "module": "__main__", "line": 58, "column": 3, "endline": 58, "endcolumn": 8, "stmt": [58,3,58,16] },
    { "module": "__main__", "line": 51, "column": 2, "endline": 51, "endcolumn": 28, "stmt": [51,2,51,28] },
    { "module": "__main__", "line": 50, "column": 1, "endline": 50, "endcolumn": 14, "stmt": [50,1,50,14] },
    { "module": "__main__", "line": 50, "column": 1, "endline": 50, "endcolumn": 14, "stmt": [50,1,50,14] },
    { "module": "__main__", "line": 60, "column": 1, "endline": 60, "endcolumn": 3, "stmt": [60,1,60,30] },
    { "module": "__main__", "line": 60, "column": 1, "endline": 60, "endcolumn": 30, "stmt": [60,1,60,30] },
    { "module": "__main__", "line": 61, "column": 13, "endline": 61, "endcolumn": 16, "stmt": [61,5,61,24] },
    { "module": "__main__", "line": 61, "column": 21, "endline": 61, "endcolumn": 23, "stmt": [61,5,61,24] },
    { "module": "__main__", "line": 61, "column": 21, "endline": 61, "endcolumn": 23, "stmt": [61,5,61,24] },
    { "module": "__main__", "line": 61, "column": 13, "endline": 61, "endcolumn": 23, "stmt": [61,5,61,24] },
    { "module": "__main__", "line": 61, "column": 5, "endline": 61, "endcolumn": 10, "stmt": [61,5,61,24] },
    { "module": "__main__", "line": 60, "column": 1, "endline": 60, "endcolumn": 30, "stmt": [60,1,60,30] },
    { "module": "__main__", "line": 60, "column": 1, "endline": 60, "endcolumn": 30, "stmt": [60,1,60,30] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 3, "stmt": [63,1,63,34] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 34, "stmt": [63,1,63,34] },
    { "module": "__main__", "line": 64, "column": 13, "endline": 64, "endcolumn": 13, "stmt": [64,5,64,13] },
    { "module": "__main__", "line": 64, "column": 5, "endline": 64, "endcolumn": 13, "stmt": [64,5,64,13] },
    { "module": "__main__", "line": 65, "column": 12, "endline": 65, "endcolumn": 16, "stmt": [65,5,65,16] },
    { "module": "__main__", "line": 65, "column": 5, "endline": 65, "endcolumn": 10, "stmt": [65,5,65,16] },
    { "module": "__main__", "line": 66, "column": 12, "endline": 66, "endcolumn": 12, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 20, "endline": 66, "endcolumn": 23, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 16, "endline": 66, "endcolumn": 24, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 12, "endline": 66, "endcolumn": 24, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 11, "endline": 66, "endcolumn": 40, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 36, "endline": 66, "endcolumn": 39, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 32, "endline": 66, "endcolumn": 39, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 27, "endline": 66, "endcolumn": 29, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 11, "endline": 66, "endcolumn": 40, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 66, "column": 5, "endline": 66, "endcolumn": 9, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 67, "column": 15, "endline": 67, "endcolumn": 15, "stmt": [67,9,67,16] },
    { "module": "__main__", "line": 67, "column": 12, "endline": 67, "endcolumn": 15, "stmt": [67,9,67,16] },
    { "module": "__main__", "line": 67, "column": 9, "endline": 67, "endcolumn": 10, "stmt": [67,9,67,16] },
    { "module": "__main__", "line": 68, "column": 20, "endline": 68, "endcolumn": 23, "stmt": [68,13,68,23] },
    { "module": "__main__", "line": 68, "column": 20, "endline": 68, "endcolumn": 23, "stmt": [68,13,68,23] },
    { "module": "__main__", "line": 68, "column": 13, "endline": 68, "endcolumn": 18, "stmt": [68,13,68,23] },
    { "module": "__main__", "line": 69, "column": 9, "endline": 69, "endcolumn": 14, "stmt": [69,9,69,14] },
    { "module": "__main__", "line": 69, "column": 9, "endline": 69, "endcolumn": 14, "stmt": [69,9,69,14] },
    { "module": "__main__", "line": 69, "column": 14, "endline": 69, "endcolumn": 14, "stmt": [69,9,69,14] },
    { "module": "__main__", "line": 69, "column": 9, "endline": 69, "endcolumn": 14, "stmt": [69,9,69,14] },
    { "module": "__main__", "line": 69, "column": 9, "endline": 69, "endcolumn": 12, "stmt": [69,9,69,14] },
    { "module": "__main__", "line": 66, "column": 5, "endline": 66, "endcolumn": 41, "stmt": [66,5,66,41] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 34, "stmt": [63,1,63,34] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 34, "stmt": [63,1,63,34] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 34, "stmt": [63,1,63,34] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 34, "stmt": [63,1,63,34] },
    { "module": "__main__", "line": 71, "column": 1, "endline": 71, "endcolumn": 3, "stmt": [71,1,71,24] },
    { "module": "__main__", "line": 71, "column": 1, "endline": 71, "endcolumn": 24, "stmt": [71,1,71,24] },
    { "module": "__main__", "line": 72, "column": 13, "endline": 72, "endcolumn": 16, "stmt": [72,5,72,23] },
    { "module": "__main__", "line": 72, "column": 21, "endline": 72, "endcolumn": 23, "stmt": [72,5,72,23] },
    { "module": "__main__", "line": 72, "column": 21, "endline": 72, "endcolumn": 23, "stmt": [72,5,72,23] },
    { "module": "__main__", "line": 72, "column": 13, "endline": 72, "endcolumn": 23, "stmt": [72,5,72,23] },
    { "module": "__main__", "line": 72, "column": 5, "endline": 72, "endcolumn": 10, "stmt": [72,5,72,23] },
    { "module": "__main__", "line": 71, "column": 1, "endline": 71, "endcolumn": 24, "stmt": [71,1,71,24] },
    { "module": "__main__", "line": 71, "column": 1, "endline": 71, "endcolumn": 24, "stmt": [71,1,71,24] },
    { "module": "__main__", "line": 74, "column": 7, "endline": 74, "endcolumn": 11, "stmt": [74,1,74,13] },
    { "module": "__main__", "line": 74, "column": 13, "endline": 74, "endcolumn": 13, "stmt": [74,1,74,13] },
    { "module": "__main__", "line": 74, "column": 7, "endline": 74, "endcolumn": 13, "stmt": [74,1,74,13] },
    { "module": "__main__", "line": 74, "column": 1, "endline": 74, "endcolumn": 13, "stmt": [74,1,74,13] },
    { "module": "__main__", "line": 74, "column": 1, "endline": 74, "endcolumn": 13, "stmt": [74,1,74,13] },
    { "module": "__main__", "line": 75, "column": 7, "endline": 75, "endcolumn": 11, "stmt": [75,1,75,13] },
    { "module": "__main__", "line": 75, "column": 13, "endline": 75, "endcolumn": 13, "stmt": [75,1,75,13] },
    { "module": "__main__", "line": 75, "column": 7, "endline": 75, "endcolumn": 13, "stmt": [75,1,75,13] },
    { "module": "__main__", "line": 75, "column": 1, "endline": 75, "endcolumn": 13, "stmt": [75,1,75,13] },
    { "module": "__main__", "line": 75, "column": 1, "endline": 75, "endcolumn": 13, "stmt": [75,1,75,13] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 76, "endcolumn": 7, "stmt": [3,1,76,7] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 76, "endcolumn": 7, "stmt": [3,1,76,7] }
  ]
}
