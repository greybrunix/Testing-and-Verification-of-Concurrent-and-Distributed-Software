import list
# private variables
net = []
id = 0
dup = False
drop = False
hist = False

def get_net() returns n:
	atomically n = net
# FL
def construct(flags):
		if (flags[0] == 1):
			dup = True
		if (flags[1] == 1):
			drop = True
		if (flags[2] == 1):
			hist = True


# public functions
def send(src, dst, payload):
	atomically:
		var msg_send = {.src:src, .dst:dst, .payload:payload, .id:id}
		net = net + [msg_send,]
		id += 1

def receive(pid) returns msg_rcv:
	atomically:
		var msgs = [m for m in net where (pid == m.dst)]
		if len(msgs) > 0:
			msg_rcv = msgs[len(msgs)-1]
			if (not hist):
				net = remove_msg(net, msg_rcv)
			if (dup and choose{True, False}):
				var msg_dup = msg_rcv
				net = add_msg(net, msg_dup)
			if drop and choose{True, False}:
				var msg_drop = msg_rcv
				msg = []
				if (hist):
					net = remove_msg(net,msg_drop)
		else:
			msg_rcv = []
def remove_msg(L1, msg) returns L2:
	L2 = []
	var found_first = False
	for elem in list.sorted(L1):
		if (elem != msg) or (found_first):
			L2 += [elem,]
		elif (not found_first):
			found_first = True
	L2 = list.sorted(L2)
def add_msg(L1, msg) returns L2:
	L2 = []
	var found_first = False
	var placed = False
	for elem in list.sorted(L1):
		if (elem != msg) or (found_first):
			L2 += [elem,]
			if (not placed) and choose {True, False}:
				L2 += [msg,]
		elif (not found_first):
			found_first = True
		if (elem == msg) and (found_first) and (not placed):
			placed = True
			L2 += [msg,]
	L2 = list.sorted(L2)
