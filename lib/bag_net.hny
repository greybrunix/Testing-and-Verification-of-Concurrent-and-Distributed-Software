import bag
# private variables
net = bag.empty();
id = 0
dup = False
drop = False
hist = False

def get_net() returns n:
	atomically n = net
def construct(flags):
	atomically:
		if (flags[0] == 1):
			dup = True
		if (flags[1] == 1):
			drop = True
		if (flags[2] == 1):
			hist = True

def send(src, dst, payload):
	atomically:
		var msg = {.src:src,.dst:dst,.payload:payload,.id:id}
		net = bag.add(net, msg)
		id += 1

def receive(pid) returns msg:
	atomically:
		var msgs = {(m,c) for m:c in net where (pid == m.dst)}
		if len(msgs) > 0:
			msg = (choose(msgs))
			if (not hist):
				net = bag.remove(net, msg[0])
			if (dup and choose{True, False}):
				var r = {1..5}
				var ran = choose r
				for i in {1..ran}:
					net = bag.add(net,msg[0])
			if drop and choose{True, False}:
				var msg_drop = msg
				msg = {:}
				if (hist):
					net = bag.remove(net, msg[0])
		else:
			msg = {:}
