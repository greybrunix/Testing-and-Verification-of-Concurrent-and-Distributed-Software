import gen_net
API=gen_net.construct(True,0,False,False)

const NIDS = 5      # number of identifiers
leader = 0
def processor(self, succ):
	API[0](succ,self,False)
	var working = True
	while working:
		atomically when exists (id, found) in API[1](self):
			if id == self:
				assert self == leader
				print(self, "is leader")
				API[0](succ, id, True)
			elif id > self:
				assert self != leader
				API[0](succ, id, found)
			if found:
				working = False

var ids, nprocs, procs = { 1 .. NIDS }, choose({ 1 .. NIDS }), [] 
for i in { 0 .. nprocs - 1 }:
    let next = choose(ids):
        ids -= { next }
        procs += [ next, ]
        if next > leader:
            leader = next
for i in { 0 .. nprocs - 1 }:
    spawn processor(procs[i], procs[(i + 1) % nprocs])
